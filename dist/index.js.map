{"version":3,"sources":["webpack:///./src/constants/constants.ts","webpack:///./src/store/index.ts","webpack:///./src/types/types.ts","webpack:///./src/actions/index.ts","webpack:///./src/utils/index.ts","webpack:///./src/states/Person.ts","webpack:///./src/states/Pubsub.ts","webpack:///./src/states/Enemy.ts","webpack:///./src/states/Passer.ts","webpack:///./src/assets/clerk/clerk.png","webpack:///./src/index.ts","webpack:///./src/states/Boot.ts","webpack:///./src/utils/helpers.ts","webpack:///./src/assets/loading.png","webpack:///./src/assets/buildings/big_school.png","webpack:///./src/assets/buildings/innovation_house.png","webpack:///./src/assets/buildings/ministerstvo.png","webpack:///./src/assets/buildings/zakupki_and_tenderi.png","webpack:///./src/assets/buildings/buildings.png","webpack:///./src/assets/buildings/buildings.json","webpack:///./src/assets/player.png","webpack:///./src/assets/hands/raised_hands.png","webpack:///./src/assets/one-coin.png","webpack:///./src/assets/ground.png","webpack:///./src/assets/cactuses.png","webpack:///./src/assets/clouds/clouds.png","webpack:///./src/assets/policeman/policeman.png","webpack:///./src/assets/passers/kindpasser.png","webpack:///./src/assets/passers/kindpasser_green.png","webpack:///./src/assets/passers/pupil.png","webpack:///./src/assets/passers/sentsov.png","webpack:///./src/assets/super_mario.png","webpack:///./src/assets/donation.png","webpack:///./src/assets/obstacles.png","webpack:///./src/assets/obstacles/grey_texture.png","webpack:///./src/assets/obstacles/vasya.png","webpack:///./src/assets/test_level2.json","webpack:///./src/states/Game.ts","webpack:///./src/reducers/policeman.ts","webpack:///./src/reducers/enemy.ts","webpack:///./src/reducers/mood.ts","webpack:///./src/reducers/score.ts","webpack:///./src/reducers/official.ts","webpack:///./src/reducers/passer.ts","webpack:///./src/reducers/events.ts","webpack:///./src/reducers/final.ts","webpack:///./src/states/FBK.ts","webpack:///./src/states/Score.ts","webpack:///./src/states/Coins.ts","webpack:///./src/states/Mood.ts","webpack:///./src/states/RangeComponent.js","webpack:///./src/states/Policeman.ts","webpack:///./src/states/PersonBase.ts","webpack:///./src/states/Cactus.ts","webpack:///./src/states/Hands.ts","webpack:///./src/states/Obstacles.ts","webpack:///./src/states/Official.ts","webpack:///./src/states/FinalScreen.ts","webpack:///./src/assets/smiles.png","webpack:///./src/assets/menu_bg.png","webpack:///./src/utils/sizes.ts","webpack:///./src/states/Menu.ts","webpack:///./src/states/Help.ts","webpack:///./src/assets/back-arrow.png","webpack:///./src/assets/helpMoveDesktop.png"],"names":["helpers_1","__webpack_require__","utils_1","exports","COINS","startSum","PERSON","width","height","speed","velocityX","velocityY","tweenSettings","run","frames","frameRate","jump","stand","RANGE","backgroundColor","ground","ENEMIES","count","ENEMY_TYPES","DEACTIVATE_TIME_FOR_COLLIDE_PERSON_POLICEMAN","STATES","buildingIdsType","strEnumHelper","buildingIdsKeys","Object","keys","map","key","join","typesBuiding","school","innovation","ministerstvo","zakupki_and_tenderi","orderBuidings","BUIDING_COORDS","position","x","scale","y","MOOD","step","LayersIds","obstaclesKeys","passerHeights","passersConstants","usual-1","setTo","getRandomValueFromArray","move","reverse","usual-2","sentsov","pupil","passersTypes","passers","FAIL_MSG","mood","money","HANDS","HANDS_COORDS","redux_1","policeman_1","__importDefault","enemy_1","mood_1","score_1","official_1","passer_1","events_1","final_1","TYPES","__importStar","appReducer","combineReducers","policeman","default","enemy","score","official","events","statusGame","store","createStore","state","action","type","START_GAME","undefined","window","__REDUX_DEVTOOLS_EXTENSION__","PERSON_POLICEMAN_COLLIDE","PERSON_POLICEMAN_REMOVE","ENEMY_COLLIDE","CHANGE_MOOD","REDUCE_MOOD","UPDATE_SCORE","UPDATE_MONEY","ADD_CACTUS","THROW_CACTUS","COLLIDE_POLICEMAN_CACTUS","GAME_OVER","COLLIDE_OFFICIAL","COLLIDE_PASSER","ADD_ENEMY","RENDER_CROWD","HAPPY_END","collidePersonWithPoliceman","id","removePolicemanFromCollided","addCactus","addEnemy","enemyType","playerId","throwCactus","changeMoney","amount","renderCrowd","reduceMood","cause","changeMood","incr","gameOver","msg","gameEnd","collideOfficial","collidePasser","startGame","abc","getChar","Math","round","random","length","getString","result","i","generatorRandomString","idsForEnemies","[object Object]","indexOf","push","this","getId","generatorId","get","name","getRandom","Boolean","deepFlatten","arr","concat","v","Array","isArray","floor","sampleSize","n","m","slice","isDevelopment","process","env","DEVELOPMENT","utils","centerGameObjects","objects","forEach","object","anchor","g","game","sprite","add","existing","physics","arcade","enable","PubSub","subscribers","fn","args","subscriber","call","prototype","apply","PubSubFunction","constants_1","Passer_1","store_1","actions_1","Passer","props","super","coord","spriteOptions","time_threshold","isTouchedByCactus","isCollidedWithPerson","time_disabled","dispatch","animations","stop","update","deactivateForTheTime","time","body","moves","tween","to","alpha","Phaser","Easing","Linear","None","timer","loop","finishCollision","remove","kill","cbBefore","cbAfter","PersonBase_1","PASSER_SPEED","min","max","TIME_THRESHOLD","passerConfig","rnd","between","world","velocity","set","animationRun","play","debug","renderPassers","passerInstances","passer","instances","sprites","p","inst","collisionWithPerson","instance","find","getState","collided","collideWithObstacles","CrowdHandler","isRendered","render","passerKey","subscribe","module","Boot_1","Game_1","FinalScreen_1","sizes_1","Menu_1","Help_1","onload","gameWidth","gameHeight","className","containerNode","document","querySelector","rgResizeBody","getSizes","Game","parent","antialias","renderer","CANVAS","MenuWrapper","start","onresize","State","assetsPath","load","image","Boot","stage","loadingBar","centerX","logo","status","text","fill","setPreloadSprite","atlasJSONHash","spritesheet","tilemap","Tilemap","TILED_JSON","texture","vasya","setText","o","reduce","res","create","phaser_ce_1","FBK_1","Score_1","Policeman_1","Cactus_1","Hands_1","Obstacles_1","Official_1","listBuidingsSprite","cloudsSprite","tileSprite","smoothed","autoScroll","graphics","make","beginFill","drawRect","endFill","boundsPadding","addChild","immovable","buildingInfo","building","Polygon","Point","obstacles","heightInPixels","addTilesetImage","ladder","createLayer","setCollision","scrollFactorY","scrollFactorX","scrollY","fixedToCamera","coords","donation","physicsGroup","Physics","ARCADE","startSystem","resize","createLadder","createClouds","createGround","createBuidings","createObstacles","createFinalPoints","handsHandler","HandsHandler","person","officials","renderOfficials","cactusHandler","CactusHandler","policemanWatcher","PolicemanManager","crowd","collide","getAllSprites","overlap","collideFinalPoints","getAllActivePoliceman","_","collidePerson","collideWithEnemy","aliveCactuses","cactus","collidePersonWithCactus","thrownCactuses","collideCactus","collideEnemyWithCactus","collideObstaclesWithCactus","meetCrowd","endJumping","getHandsSprite","handSprite","collideWithOfficials","collideWithPassers","lodash_omit_1","defaultState","activeIds","assign","collide_id_with_cactus","types_1","enemies","total","cactuses","diff","lodash_once_1","autobind_decorator_1","Person_1","Pubsub_1","COUNT_JUMPING_TRIALS","FBK","isTouchedEnemy","isJumping","facing","direction","countJumps","initiateKeyboardEvents","up","input","keyboard","addKey","Keyboard","UP","down","DOWN","left","LEFT","right","RIGHT","a","A","d","D","Date","now","setSize","animationsRunRight","animationsJump","animationsStand","gravity","collideWorldBounds","camera","follow","collideProps","addDisabledAnimation","deactivateForTime","activate","abs","cursors","player","jumpButton","isDown","touching","onFloor","frame","justDown","endAnimation","publish","worldPosition","angularVelocity","__decorate","Coins_1","Mood_1","Score","group","coins","cactusGroup","cactusImg","cactusesText","font","updateScore","toString","killAll","Coins","coinImage","label","String","align","RangeComponent_1","colors","10","20","30","40","50","60","70","80","90","100","LIMIT_MOOD","Mood","moodValue","bg","color","bar","animationDuration","flipped","isFixedToCamera","barSpriteTween","barSprite","setPercent","foundPercentage","filter","Number","isNaN","setBarColor","HealthBar","providedConfig","setupConfiguration","setPosition","config","drawBackground","drawHealthBar","setFixedToCamera","constructor","mergeWithDefaultConfiguration","newConfig","mergeObjetcs","targetObj","newObj","e","bmd","bitmapData","ctx","fillStyle","beginPath","rect","bgSprite","newValue","newWidth","setWidth","newColor","currentRGBColor","getPixelRGB","newRGBColor","hex","replace","r","b","exec","parseInt","hexToRgb","replaceRGB","setAnchor","xAnchor","yAnchor","Enemy_1","POLICEMAN","rangeX","speed_min","speed_max","POLICEMAN_SPRITE_INFO","Policeman","dir","enemiesObj","values","getPolicemanPlayerId","playedId","policemanId","collideWithPerson","policemanSprite","onCactusCollision","timerChangingVelocity","currentAnim","isPlaying","CACTUS","CACTUS_COORDS","Cactus","allowGravity","onWorldBounds","Signal","hitWorldBounds","destroy","revive","forEachAlive","alive","isKilled","getAll","pop","lodash_throttle_1","MIN_DISTANCE_TO_APROACH","PENALTY_AMOUNT","THROTTLE_TIME","Hands","getTweenProps","tween2","isVisible","resume","pause","handsX","hands","handCoord","hand","handIndexes","index","handIndex","changeVisibility","w","h","imageObstacles","params","shapeSprite","bind","imageObstacle","copy","PASSER_COORDS","OFFICIAL_SPRITE_INFO","Official","PASSER_COORD","findIndex","moodLevel","moodTemplate","moneyTalk","setBounds","statusGameStatusMsg","title","description","heading","wordWrapWidth","boundsAlignH","boundsAlignV","setShadow","setTextBounds","descriptionElement","getBounds","lineSpacing","strokeThickness","offset","characteristics","createCharacteristics","characteristicsMapping","coin","icon","results","textObject","wordWrap","centerY","validationButtonText","backWrapper","back","fontWeight","grd","context","createLinearGradient","addColorStop","onDown","handleClickBack","enterKey","ENTER","contains","windowInnerHeight","innerHeight","clientHeight","style","documentElement","clientWidth","mainMenu","targetState","textStyle","textStyleFocused","Menu","options","focused","controls","addKeys","interact","menuItems","menuItem","MenuItem","focus","activateFocusedItem","selectItem","delta","navigate","Text","baseText","setStyle","data","button","commonGroup","verticalOffset","spacing","fontSize","item","itemGroup","horizontalOffset"],"mappings":"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","file":"index.js","sourcesContent":["import { strEnumHelper } from \"../utils/helpers\"\nimport { getRandomValueFromArray } from \"../utils\";\n\nexport const COINS = {\n    startSum: 500\n}\n\nexport const PERSON = {\n    width: 70,\n    height: 110,\n    speed: 400,\n    velocityX: 300,\n    velocityY: 900,\n    tweenSettings: {\n        'run': {\n            frames: [8, 9, 10, 11],\n            frameRate: 10\n        },\n        'jump': {\n            frames: [4],\n            frameRate: 1\n        },\n        'stand': {\n            frames: [0],\n            frameRate: 1\n        },\n    }\n}\n\n\nexport const RANGE = [0, 1000]\n\nexport const backgroundColor = 'rgba(85, 154, 198, 30)'\nexport const ground = {\n    width: 4300,\n    height: 48\n}\n\nexport const ENEMIES = {\n    count: 10,\n}\n\nexport const enum ENEMY_TYPES {\n    fsb = 'fsb',\n    official = 'official',\n    gangster = 'gangster',\n    prosecutor = 'prosecutor',\n    policeman = 'policeman',\n}\n\nexport const DEACTIVATE_TIME_FOR_COLLIDE_PERSON_POLICEMAN = 2000\n// export const ENEMY = {\n//     width: 30,\n//     height: 90,\n//     speed_min: 0,\n//     speed_max: 200,\n//     speed: 200,\n//     time_threshold: 2000,\n//     time_disabled: 3000,\n// }\n\n\nexport const enum STATES {\n    Game = 'Game',\n    Finish = 'Finish',\n    PreBoot = 'PreBoot',\n    Boot = 'Boot',\n    Preload = 'Preload',\n    Help = 'Help',\n    Menu = 'Menu',\n}\n\n\nexport const buildingIdsType = strEnumHelper(['school', 'innovation', 'ministerstvo', 'zakupki_and_tenderi'])\n\nexport type buildingIdsType = keyof typeof buildingIdsType\nexport const buildingIdsKeys = Object.keys(buildingIdsType).map((key: buildingIdsType) => buildingIdsType[key]).join(',')\n\nexport type buildingIdsInterface = {readonly [key in buildingIdsType]: any}\n\nexport const typesBuiding = {\n    'school': 'big_school.png',\n    'innovation': 'innovation_house.png',\n    'ministerstvo': 'ministerstvo.png',\n    'zakupki_and_tenderi': 'zakupki_and_tenderi.png',\n}\n\nexport const orderBuidings: buildingIdsType[] = [\"ministerstvo\", \"innovation\", \"zakupki_and_tenderi\", \"school\"]\n\nexport const BUIDING_COORDS: buildingIdsInterface = {\n    'ministerstvo': {\n        position: {\n            x: 100,\n        },\n        scale: {\n            x: 0,\n            y: 1,\n        }\n    },\n    'innovation': {\n        position: {\n            x: 1100,\n        },\n        scale: {\n            x: 0,\n            y: 1,\n        }\n    },\n    'zakupki_and_tenderi': {\n        position: {\n            x: 2000\n        },\n        scale: {\n            x: 0,\n            y: 1,\n        }\n    },\n    'school': {\n        position: {\n            x: 3000,\n        },\n        scale: {\n            x: 0,\n            y: 1,\n        }\n    }\n}\n\nexport const MOOD = {\n    step : 10,\n}\n\nexport const enum LayersIds {\n    person = 'person',\n    tilemap = 'tilemap',\n    tiles = 'tiles',\n    coin = 'coin',\n    enemy = 'enemy',\n    ground = 'ground',\n    cactus = 'cactus',\n    clouds = 'clouds',\n    policeman = 'policeman',\n    hands = 'hands',\n    clerk = 'clerk',\n    passer = 'passer',\n    // obstacles = 'obstacles',\n    donation = 'donation',\n    mood = 'mood',\n    loading = 'loading',\n    background = 'background',\n}\n\nexport enum obstaclesKeys {\n    vasya = 'obstacles_vasya',\n    texture = 'obstacles_texture'\n}\n\n\nconst TILE = {\n    x: 16,\n    y: 16\n}\n\nexport interface PasserConstantOptions {\n    setTo: number[]\n    stand: {\n        frames: number[],\n        frameRate: number\n    },\n    move: {\n        frames: number[],\n        frameRate: number\n    }\n}\n\nexport type PasserConstantType = {\n    [k in string]: PasserConstantOptions\n} \n\nconst passerHeights = [0.1, 0.11, 0.101, 0.115]\n\nexport const passersConstants: PasserConstantType = {\n   'usual-1': {\n       setTo: [0.11, passerHeights[getRandomValueFromArray(passerHeights)]],\n       stand: {\n           frames: [8],\n           frameRate: 1,\n       }, \n       move: {\n           frames: [0, 1, 2, 3, 4, 5, 6].reverse(),\n           frameRate: 8\n       }\n   },\n   'usual-2': {\n        setTo: [0.1, 0.1],\n        stand: {\n            frames: [1],\n            frameRate: 1,\n        }, \n        move: {\n            frames: [0, 1, 2, 3, 4, 5, 6, 7].reverse(),\n            frameRate: 8\n        }  \n   },\n   'sentsov': {\n        setTo: [0.1, 0.1],\n        stand: {\n            frames: [1],\n            frameRate: 1,\n        }, \n        move: {\n            frames: [0,1,2,3,4,5,6,7].reverse(),\n            frameRate: 8\n        } \n   },\n   'pupil': {\n        setTo: [0.09, 0.085],\n        stand: {\n            frames: [2],\n            frameRate: 1,\n        }, \n        move: {\n            frames: [4,5,6,7, 0, 1, 2, 3].reverse(),\n            frameRate: 8\n        } \n   }\n}\n\nexport const passersTypes = strEnumHelper(Object.keys(passersConstants))\n\nexport type passersIdsTypes = keyof typeof passersTypes\n\n\n\nexport type PassersKeys = {\n    readonly key: passersIdsTypes,\n    readonly count: number,\n}\n\nexport const passers: PassersKeys[] = [\n    {key: 'usual-1', count: 5}, \n    {key: 'usual-2', count: 5}, \n    {key: 'sentsov', count: 5}, \n    {key: 'pupil', count: 10}\n]\n\nexport const FAIL_MSG = {\n    mood: 'You are not gonna be in a good mood at this moment! Will try tomorrow!)',\n    money: 'You are out of money!'\n}\n\nexport const HANDS = {\n    width: 60,\n    height: 80\n} \n\nexport const HANDS_COORDS = [[1230, 130], [2161, 200], [735, 200]]","import {\n    createStore,\n    combineReducers\n} from 'redux'\n\nimport policeman, { PolicemanState } from '../reducers/policeman'\nimport enemy, { EnemyState } from '../reducers/enemy'\nimport mood, { MoodState } from '../reducers/mood'\nimport score, { ScoreState } from '../reducers/score'\nimport official, { OfficialState } from '../reducers/official'\nimport passers, { PasserState } from '../reducers/passer'\nimport events, { EventsState } from '../reducers/events'\nimport statusGame, { FinalState } from '../reducers/final'\nimport * as TYPES from '../types/types';\n\nexport interface State {\n    readonly policeman: PolicemanState,\n    readonly enemy: EnemyState,\n    readonly mood: MoodState,\n    readonly score: ScoreState,\n    readonly official: OfficialState,\n    readonly passers: PasserState,\n    readonly events: EventsState,\n    readonly statusGame: FinalState,\n}\n\nconst appReducer = combineReducers<State>({\n    policeman,\n    enemy,\n    mood,\n    score,\n    official,\n    passers,\n    events,\n    statusGame,\n});\n\n\nconst rootReducer = (state: State, action: any) => {\n    if (action.type === TYPES.START_GAME) {\n        state = undefined\n    }\n\n    return appReducer(state, action)\n} \n\nconst store = createStore(\n    rootReducer,\n    (window as any).__REDUX_DEVTOOLS_EXTENSION__ && (window as any).__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nexport default store","export const PERSON_POLICEMAN_COLLIDE = 'PERSON_POLICEMAN_COLLIDE'\nexport const PERSON_POLICEMAN_REMOVE = 'PERSON_POLICEMAN_REMOVE'\n\nexport const ENEMY_COLLIDE = 'ENEMY_COLLIDE';\n\nexport const CHANGE_MOOD = 'CHANGE_MOOD'\nexport const REDUCE_MOOD = 'REDUCE_MOOD'\n\nexport const UPDATE_SCORE = 'UPDATE_SCORE'\nexport const UPDATE_MONEY = 'UPDATE_MONEY'\n\n\nexport const ADD_CACTUS = 'ADD_CACTUS'\nexport const THROW_CACTUS = 'THROW_CACTUS'\n\nexport const COLLIDE_POLICEMAN_CACTUS = 'COLLIDE_POLICEMAN_CACTUS'\n\nexport const GAME_OVER = 'GAME_OVER'\n\nexport const COLLIDE_OFFICIAL = 'COLLIDE_OFFICIAL'\nexport const COLLIDE_PASSER = 'COLLIDE_PASSER'\n\nexport const ADD_ENEMY = 'ADD_ENEMY';\n\nexport const RENDER_CROWD = 'RENDER_CROWD'\n\nexport const HAPPY_END = 'HAPPY_END'\n    \nexport const START_GAME = 'START_GAME'","// Actions\nimport * as TYPES from '../types/types';\nimport { passersIdsTypes, ENEMY_TYPES } from '../constants/constants';\n\ntype CollidePersonWithPolicemanAction = {\n    id: string\n}\n\nexport function collidePersonWithPoliceman(action: CollidePersonWithPolicemanAction) {\n    return {\n        type: TYPES.PERSON_POLICEMAN_COLLIDE,\n        id: action.id,\n    };\n}\n\nexport function removePolicemanFromCollided(action: CollidePersonWithPolicemanAction) {\n    return {\n        type: TYPES.PERSON_POLICEMAN_REMOVE,\n        id: action.id\n    };\n}\n\nexport function addCactus() {\n    return {\n        type: TYPES.ADD_CACTUS\n    }\n}\n\ntype AddEnemyAction = {\n    readonly playerId: string,\n    readonly type: ENEMY_TYPES\n}\n\nexport function addEnemy(action: AddEnemyAction) {\n    return {\n        type: TYPES.ADD_ENEMY,\n        enemyType: action.type,\n        playerId: action.playerId\n    }\n}\n\nexport function throwCactus() {\n    return {\n        type: TYPES.THROW_CACTUS\n    }\n}\n\nexport function changeMoney(amount: number) {\n    return {\n        type: TYPES.UPDATE_MONEY,\n        amount\n    }        \n}\n\nexport function renderCrowd() {\n    return {\n        type: TYPES.RENDER_CROWD\n    }\n}\n\n// export function collidePersonWithEnemy(action) {\n//     return {\n//         type: TYPES.ENEMY_COLLIDE,\n//         type: action.type\n//     }\n// }\n\ninterface ReduceModeAction {\n    readonly cause: string\n}\n\nexport function reduceMood(action: ReduceModeAction) {\n    return {\n        type: TYPES.REDUCE_MOOD,\n        cause: action.cause\n    }\n}\n\ninterface ChangeMoodAction {\n    readonly incr: number\n}\n\nexport function changeMood(action: ChangeMoodAction) {\n    return {\n        type: TYPES.CHANGE_MOOD,\n        incr: action.incr\n    }\n}\n\nexport interface GameOverAction {\n    readonly msg: string\n}\n\nexport function gameOver(action: GameOverAction) {\n    return {\n        type: TYPES.GAME_OVER,\n        msg: action.msg\n    }\n}\n\n\nexport function gameEnd() {\n    return {\n        type: TYPES.HAPPY_END\n    }\n}\n\nexport function collideOfficial(id: number) {\n   return {\n       type: TYPES.COLLIDE_OFFICIAL,\n       id\n   }     \n}\n\nexport function collidePasser(id: passersIdsTypes) {\n    return {\n        type: TYPES.COLLIDE_PASSER,\n        id\n    }\n}\n\n\nexport function startGame() {\n    return {\n        type: TYPES.START_GAME\n    }\n}","const abc = 'sdkfjhskdf34234623V4sdfjgh234234JG3eu247y237RKWRG3U2YTGKUW7R234TGqwmjhegmqjrgea,jthlei485y3i4yr';\n\nconst getChar = () => abc[Math.round(Math.random()*(abc.length-1))];\n\nexport function getString(length:number = 8): string {\n\n    let result = '';\n\n    for (let i = 0; i < length; i++){\n        result += getChar();\n    }\n\n    return result;\n}\n\n\nexport function generatorRandomString() {\n    let idsForEnemies: string[] = [];\n\n    return {\n        getId() {\n            let id: string = getString();\n\n            if (idsForEnemies.indexOf(id) >= 0) {\n                this.getId();\n            }\n            else {\n                idsForEnemies.push(id);\n                return id;\n            }\n        }\n    }\n}\n\n\nexport const generatorId = () => {\n    let id = 0;\n    return {\n        get: (name: string) => {\n            return name+'-'+(++id);\n        },\n    }\n}\n\nexport const getRandom = () => Boolean(Math.round(Math.random()))\n\nexport function deepFlatten<T>(arr: T[]): T[] { return [].concat(...arr.map(v => (Array.isArray(v) ? deepFlatten(v) : v)))}\n\nexport const getRandomValueFromArray = (arr: any[]) => Math.floor(Math.random() * arr.length)\n\nexport const sampleSize = ([...arr], n = 1) => {\n    let m = arr.length;\n    while (m) {\n      const i = Math.floor(Math.random() * m--);\n      [arr[m], arr[i]] = [arr[i], arr[m]];\n    }\n    return arr.slice(0, n);\n  }\n\n\nexport const isDevelopment = process.env.DEVELOPMENT === 'true'\n\n\nexport const utils = {\n    centerGameObjects: function (objects: any[]) {\n      objects.forEach(function (object) {\n        object.anchor.setTo(0.5);\n      })\n    }\n};","import { generatorId } from '../utils';\n\nconst g = generatorId();\nconst { get } = g;\n\ninterface PersonProps {\n    readonly game: Phaser.Game,\n    readonly x: number,\n    readonly y: number,\n    readonly key: string,\n}\n \nexport default class Person {\n    public sprite: Phaser.Sprite\n    public playerId: string\n\n    constructor ({\n        game,\n        x,\n        y,\n        key\n    }: PersonProps) {\n        this.sprite = game.add.sprite(x, y, key)\n        this.playerId = get(key)\n        game.add.existing(this.sprite)\n        game.physics.arcade.enable(this.sprite)\n    }\n}\n","type SubscriberFunction = (args: any) => void\n\nconst PubSubFunction = () => {\n    const subscribers: SubscriberFunction[] = []\n    return {\n        subscribe(fn: SubscriberFunction) {\n            subscribers.push(fn)    \n        },\n        publish(...args : any[]) {\n            subscribers.forEach(subscriber => {\n                subscriber.call(this,  ...Array.prototype.slice.apply(args) )\n            })\n        }\n    }\n}\n\nexport const PubSub = PubSubFunction()","import {\n    ENEMY_TYPES,\n    PasserConstantOptions,\n    DEACTIVATE_TIME_FOR_COLLIDE_PERSON_POLICEMAN\n} from '../constants/constants';\n\nimport Person from './Person';\n\nimport { generatorRandomString } from '../utils';\nimport { Passer, COORD, SPEED } from './Passer';\nimport store from '../store';\nimport { addEnemy } from '../actions';\n\nconst generatorId = generatorRandomString();\n\ninterface EnemyProps {\n    readonly game: Phaser.Game,\n    readonly coord: COORD,\n    readonly speed: SPEED,\n    readonly key: string,\n    readonly type: ENEMY_TYPES,\n    readonly spriteOptions: PasserConstantOptions\n    readonly time_threshold?: number\n    readonly time_disabled: number\n}\n\n// function EnemiesGlobal(game: Phaser.Game) {\n//     return function decorator(Class: any) {\n//         return (...args: any[]) => {\n//             console.log(`Arguments for ${name}: args`); \n//             const enemiesGroup = game.add.physicsGroup(Phaser.Physics.ARCADE)\n//             return new Class(...args, enemiesGroup)\n//         }\n//     }\n// }\n\n\nexport default class Enemy extends Passer{\n    sprite: Phaser.Sprite\n    game: Phaser.Game\n    time_disabled: number\n    public isTouchedByCactus: boolean = false\n    tween: Phaser.Tween\n    timer: Phaser.TimerEvent\n    type: ENEMY_TYPES\n    isCollidedWithPerson: boolean = false\n\n    constructor(props: EnemyProps) {\n        super(\n            props.game, \n            props.coord,\n            props.speed,\n            props.key,\n            props.spriteOptions,\n            props.time_threshold\n        )\n\n        this.game = props.game\n        this.type = props.type    \n        this.time_disabled = props.time_disabled\n        this.addEnemy()\n    }\n\n    addEnemy() {\n        store.dispatch(addEnemy({\n            playerId: this.playerId,\n            type: this.type,\n        }))\n    }\n\n    update() {\n        if (this.isTouchedByCactus) {\n            this.sprite.animations.stop('move', true);\n            return true;\n        }\n        super.update()\n    }\n\n    onCactusCollision() {\n        debugger\n        switch(this.type) {\n            case ENEMY_TYPES.policeman:\n                this.deactivateForTheTime()\n                break\n            case ENEMY_TYPES.official:\n                this.deactivateForTheTime()\n                break    \n            default: break\n        }\n    }\n\n    deactivateForTheTime(time = 300) {\n        this.isTouchedByCactus = true\n        this.sprite.body.moves = false\n        this.tween = this.game.add.tween(this.sprite).to(\n            { alpha: 0 },\n            time, Phaser.Easing.Linear.None, true, 0, 100, false\n        )\n        // this.timer = this.game.time.create(false)\n        // this.timer.loop(2000, this.finishCollision, this)\n        // this.timer.start()\n        this.timer = this.game.time.events.loop(this.time_disabled, this.finishCollision, this)\n    }\n\n    finishCollision() {\n        // this.timer.remove();\n        this.game.time.events.remove(this.timer)\n        this.isTouchedByCactus = false\n        this.sprite.alpha = 1\n        this.tween.stop()\n    }\n\n    kill() {\n        this.sprite.kill()\n    }\n\n    public collideWithPerson(cbBefore?: () => void, cbAfter?: () => void) {\n        if (!this.isTouchedByCactus && !this.isCollidedWithPerson) {\n            this.isCollidedWithPerson = true\n\n            if (cbBefore) {\n                cbBefore()\n            }\n\n            const timer = this.game.time.events.loop(DEACTIVATE_TIME_FOR_COLLIDE_PERSON_POLICEMAN, () => {\n                this.isCollidedWithPerson = false\n                this.game.time.events.remove(timer);\n                if (cbAfter) {\n                    cbAfter()\n                }\n            }, this)\n        }\n    }\n}","import autobind from 'autobind-decorator'\n\nimport Person from './Person'\nimport store from '../store'\nimport { connect } from '../utils/connect';\nimport PersonBase from './PersonBase';\nimport { LayersIds, passers, passersConstants, PasserConstantOptions, ground, PassersKeys } from '../constants/constants';\n\n\nimport '../assets/clerk/clerk.png'\nimport { changeMoney, collidePasser, changeMood } from '../actions';\nimport { deepFlatten } from '../utils';\n\nexport type COORD = {\n    readonly x: number\n}\n\nexport type SPEED = {\n    readonly min: number,\n    readonly max: number,\n}\n\nconst AMOUNT_FUNDRISING = 10\nconst MOOD_DEVIDER_COLLIDED_PASSERS = 5\nconst MOOD_INCREMENT = 10\n\nconst PASSER_SPEED = {\n    min: 15,\n    max: 30\n}\n\nconst TIME_THRESHOLD = 2000\n\nconst mapStateToProps = (state = store.getState()) => {\n    return {\n        state: state\n    }\n}   \n\n// @connect(mapStateToProps, null)\n\nexport class Passer extends PersonBase {\n    game: Phaser.Game\n    sprite: Phaser.Sprite\n    key: string\n\n    constructor( \n        game: Phaser.Game, \n        coord: COORD,\n        speed: SPEED,\n        key: string,\n        passerConfig: PasserConstantOptions,\n        time_threshold?: number\n    ) {\n        super({\n            game: game,\n            x: game.rnd.between(100, coord.x),\n            y: game.world.height - ground.height,\n            key: key,\n            speed: speed,\n            time_threshold: time_threshold ? time_threshold : TIME_THRESHOLD,\n            velocity: {\n                min: 5,\n                max: 8,\n            }\n        });\n        \n        this.game = game;\n        this.key = key\n        // custom logic for sprite\n        // this.sprite.body.setSize(326)\n        this.sprite.scale.setTo(passerConfig.setTo[0], passerConfig.setTo[1])\n        this.sprite.anchor.set(0.5, 1)\n        this.sprite.animations.add('stand', passerConfig.stand.frames, passerConfig.stand.frameRate, true)\n        this.animationRun = this.sprite.animations.add('move', passerConfig.move.frames, passerConfig.move.frameRate, true)\n        this.sprite.animations.play('stand')\n        this.game.debug.body(this.sprite)\n    }\n\n    render() {}\n}\n\n\nexport interface PassersProps {\n    sprites: Phaser.Sprite[],\n    instances: Passer[],\n    update: any,\n    collisionWithPerson: (sprite: Phaser.Sprite) => any\n    collideWithObstacles: (sprite: Phaser.Sprite) => any\n}\n\nexport const renderPassers = (game: Phaser.Game): PassersProps => {\n    // const passerInstances: Passer[] = []\n    const passerInstances: Passer[][] = passers.map((passer) => {\n        const arr = []\n        if (passer.count > 0 && passer.key !== 'pupil') {\n            for(let i=0; i<passer.count; i++) {\n                arr.push(new Passer(\n                    game, \n                    {\n                        x: game.rnd.between(100, game.world.width - 300)\n                    }, \n                    PASSER_SPEED, \n                    `${LayersIds.passer}-${passer.key}`,\n                    passersConstants[passer.key]\n                ))\n            }\n        }\n        return arr\n    })\n\n    const instances = deepFlatten<any>(passerInstances)\n\n\n\n    return {\n        sprites: instances.map((p) => p.sprite),\n        instances: instances,\n        update: () => instances.forEach((inst: Passer) => inst.update()),\n        collisionWithPerson: (sprite) => {\n            const instance = instances.find(p => p.sprite === sprite)\n            const state = store.getState()\n            if (state.passers.collided.indexOf(instance.key) < 0) {\n                store.dispatch(collidePasser(instance.key))\n                store.dispatch(changeMoney(AMOUNT_FUNDRISING))\n\n                const numberCollided = state.passers.collided.length\n                if (numberCollided % MOOD_DEVIDER_COLLIDED_PASSERS === 0) {\n                    store.dispatch(changeMood({\n                        incr: MOOD_INCREMENT\n                    }))\n                }\n            }\n        },\n        collideWithObstacles: (sprite) => {\n            const passer = instances.find(p => p.sprite === sprite)\n            passer.collideWithObstacles()\n        }\n    }\n} \n\n\nexport class CrowdHandler {\n    public arr: Passer[] = []\n    game: Phaser.Game\n    isRendered: boolean = false\n    sprites: Phaser.Sprite[] = []\n    constructor(game: Phaser.Game) {\n        // const state = store.getState()\n        // this.isRendered =  state.events.renderCrowd\n        this.game = game\n        store.subscribe(this.render)     \n    }\n\n    collisionWithPerson(sprite: Phaser.Sprite) {\n    }\n\n    update() {\n        this.arr.forEach((inst) => {\n            inst.update()\n        })  \n    }\n\n    render = () => {\n        const state = store.getState()\n        \n        if (!state.events.renderCrowd || state.events.renderCrowd === this.isRendered) {\n            return ;\n        }\n        this.isRendered = state.events.renderCrowd  \n        const passerKey: PassersKeys = passers\n            .find(p => p.key === 'pupil')\n        \n        this.arr = []    \n        if (passerKey.count > 0) {\n            for(let i=0; i<passerKey.count; i++) {\n                this.arr.push(new Passer(\n                    this.game, \n                    {\n                        x: this.game.rnd.between(\n                            this.game.world.width - 100, \n                            this.game.world.width\n                        )\n                    }, \n                    PASSER_SPEED, \n                    `${LayersIds.passer}-${passerKey.key}`,\n                    passersConstants[passerKey.key]\n                ))\n            }\n            \n            this.sprites = this.arr.map((p) => p.sprite)\n        }\n    }\n}\n\n","module.exports = __webpack_public_path__ + \"assets/clerk.png\";","// import * as Phaser from 'phaser-ce'\n\n// (window as WindowPhaser).Phaser = Phaser\n\n// import PIXI from 'phaser-ce/build/custom/pixi.js'\n// import p2 from 'expose-loader?p2!phaser-ce/build/custom/p2.js';\n// import Phaser from 'expose-loader?Phaser!/node_modules/phaser-ce/build/phaser.js'\n//  import Phaser from 'phaser-ce'\n\n// interface WindowPhaser extends Window {\n//     Phaser: any,\n//     PIXI: any,\n// }\n\n// (window as WindowPhaser).Phaser = Phaser\n\nimport PreBoot from './states/Boot'\nimport Game from './states/Game'\nimport FinalScreen from './states/FinalScreen'\n\nimport { rgResizeBody } from './utils/sizes'\n\nimport {\n    STATES,\n} from './constants/constants'\nimport { mainMenu, Menu, MenuWrapper } from './states/Menu';\nimport Help from './states/Help';\n// import {MenuWrapper} from './states/Menu';\n\n\nconst getSizes = (className: string) => {\n    const containerNode = <HTMLElement>document.querySelector(className)\n    return rgResizeBody(containerNode)\n}\n\nconst initGame = () => {\n    const className: string = '.js-game-container'\n    const [ gameWidth, gameHeight ] = getSizes(className)\n\n    this.game = new Phaser.Game({\n        width: gameWidth,\n        height: gameHeight,\n        parent: <HTMLScriptElement>document.querySelector(className),\n        antialias: true,\n        renderer: Phaser.CANVAS\n    })\n\n    this.game.state.add(STATES.PreBoot, PreBoot)\n    this.game.state.add(STATES.Game, Game)\n    this.game.state.add(STATES.Finish, FinalScreen)\n    this.game.state.add(STATES.Menu, MenuWrapper)\n    this.game.state.add(STATES.Help, Help)\n    this.game.state.start(STATES.PreBoot)\n}\n\nwindow.onload = initGame\n\nwindow.onresize = () => {\n    if (this.game) {\n        // this.game.scale.setGameSize(...getSizes('.js-game-container'))\n    }\n}\n","import { STATES, LayersIds, passersTypes, obstaclesKeys } from \"../constants/constants\"\n\nimport '../assets/loading.png'\nimport '../assets/buildings/big_school.png'\nimport '../assets/buildings/innovation_house.png'\nimport '../assets/buildings/ministerstvo.png'\nimport '../assets/buildings/zakupki_and_tenderi.png'\nimport '../assets/buildings/buildings.png'\nimport '../assets/buildings/buildings.json'\nimport '../assets/player.png'\nimport '../assets/hands/raised_hands.png'\nimport '../assets/one-coin.png'\nimport '../assets/ground.png'\nimport '../assets/cactuses.png'\nimport '../assets/clouds/clouds.png'\nimport '../assets/policeman/policeman.png'\nimport '../assets/passers/kindpasser.png'\nimport '../assets/passers/kindpasser_green.png'\nimport '../assets/passers/pupil.png'\nimport '../assets/passers/sentsov.png'\nimport '../assets/super_mario.png'\nimport '../assets/donation.png'\nimport '../assets/obstacles.png'\nimport '../assets/obstacles/grey_texture.png'\nimport '../assets/obstacles/vasya.png'\nimport '../assets/test_level2.json'\n\n\nimport { utils } from \"../utils\";\n\nexport default class PreBoot extends Phaser.State {\n    assetsPath: string = './assets/'\n    preload () {\n        this.load.image(LayersIds.loading, `${this.assetsPath}loading.png`)\n        this.load.image(LayersIds.cactus, `${this.assetsPath}cactuses.png`)\n    }\n\n    create() {\n        this.state.add(STATES.Boot, Boot);\n\n        this.state.start(STATES.Boot)\n    }\n}\n\n\nclass Boot extends Phaser.State {\n    assetsPath: string = './assets/'\n    loadingBar: Phaser.Sprite\n    logo: Phaser.Sprite\n    status: Phaser.Text\n    preloadBar: Phaser.Graphics\n\n    init () {\n        \n    }\n\n    preload () {\n        this.game.stage.backgroundColor = '#000';\n        this.loadingBar = this.add.sprite(this.world.centerX, 100, LayersIds.loading);\n        this.logo       = this.add.sprite(this.world.centerX, 200, LayersIds.cactus);\n        this.status     = this.add.text(this.world.centerX, 380, 'Loading...', {fill: 'white'});\n        this.loadingBar.anchor.set(0.5, 0)\n        this.logo.scale.setTo(1.2);\n\n        utils.centerGameObjects([this.logo, this.status]);\n        this.load.setPreloadSprite(this.loadingBar, 0);\n        this.game.load.atlasJSONHash(\n            'buildings', \n            './assets/buildings.png', \n            './assets/buildings.json'\n        )\n\n        this.load.spritesheet(LayersIds.person, `${this.assetsPath}player.png`, 128, 128, 12)\n        this.load.image(LayersIds.hands, `${this.assetsPath}raised_hands.png`)\n        this.load.tilemap(LayersIds.tilemap, `${this.assetsPath}test_level2.json`, null, Phaser.Tilemap.TILED_JSON)\n        this.load.image(LayersIds.tiles, `${this.assetsPath}obstacles.png`)\n        this.load.image(LayersIds.coin, `${this.assetsPath}one-coin.png`)\n        this.load.image(LayersIds.tiles, `${this.assetsPath}super_mario.png`)\n        this.load.image(LayersIds.ground, `${this.assetsPath}ground.png`)\n        this.load.image(LayersIds.clouds, `${this.assetsPath}clouds.png`)\n        this.load.spritesheet(LayersIds.policeman, `${this.assetsPath}policeman.png`, 274, 756.5, 8)\n        this.load.spritesheet(LayersIds.clerk, `${this.assetsPath}clerk.png`, 721.5, 1105, 8)\n        this.load.image(LayersIds.donation, `${this.assetsPath}donation.png`);\n        this.load.spritesheet(`${LayersIds.passer}-${passersTypes['usual-1']}`, `${this.assetsPath}kindpasser_green.png`, 329, 894, 9)\n        this.load.spritesheet(`${LayersIds.passer}-${passersTypes['usual-2']}`, `${this.assetsPath}kindpasser.png`, 329.25, 896.5, 8)\n        this.load.spritesheet(`${LayersIds.passer}-${passersTypes['sentsov']}`, `${this.assetsPath}sentsov.png`, 451.5, 894, 8)\n        this.load.spritesheet(`${LayersIds.passer}-${passersTypes['pupil']}`, `${this.assetsPath}pupil.png`, 445.25, 986.5, 8)\n\n        this.load.image(obstaclesKeys.texture, `${this.assetsPath}grey_texture.png`)\n        this.load.image(obstaclesKeys.vasya, `${this.assetsPath}vasya.png`)\n        \n    }\n    \n    create() {\n        this.status.setText('Ready!');\n        // this.state.start(STATES.Menu)\n        this.state.start(STATES.Game)\n    }\n\n    render () {\n    }\n}\n","export function strEnumHelper<T extends string>(o: Array<T>): { [K in T]: K } {\n    return o.reduce(\n      (res, key) => {\n        res[key] = key\n        return res\n      },\n      Object.create(null))\n  }","module.exports = __webpack_public_path__ + \"assets/loading.png\";","module.exports = __webpack_public_path__ + \"assets/big_school.png\";","module.exports = __webpack_public_path__ + \"assets/innovation_house.png\";","module.exports = __webpack_public_path__ + \"assets/ministerstvo.png\";","module.exports = __webpack_public_path__ + \"assets/zakupki_and_tenderi.png\";","module.exports = __webpack_public_path__ + \"assets/buildings.png\";","module.exports = __webpack_public_path__ + \"assets/buildings.json\";","module.exports = __webpack_public_path__ + \"assets/player.png\";","module.exports = __webpack_public_path__ + \"assets/raised_hands.png\";","module.exports = __webpack_public_path__ + \"assets/one-coin.png\";","module.exports = __webpack_public_path__ + \"assets/ground.png\";","module.exports = __webpack_public_path__ + \"assets/cactuses.png\";","module.exports = __webpack_public_path__ + \"assets/clouds.png\";","module.exports = __webpack_public_path__ + \"assets/policeman.png\";","module.exports = __webpack_public_path__ + \"assets/kindpasser.png\";","module.exports = __webpack_public_path__ + \"assets/kindpasser_green.png\";","module.exports = __webpack_public_path__ + \"assets/pupil.png\";","module.exports = __webpack_public_path__ + \"assets/sentsov.png\";","module.exports = __webpack_public_path__ + \"assets/super_mario.png\";","module.exports = __webpack_public_path__ + \"assets/donation.png\";","module.exports = __webpack_public_path__ + \"assets/obstacles.png\";","module.exports = __webpack_public_path__ + \"assets/grey_texture.png\";","module.exports = __webpack_public_path__ + \"assets/vasya.png\";","module.exports = __webpack_public_path__ + \"assets/test_level2.json\";","import autobind from 'autobind-decorator'\nimport debounce from 'lodash.debounce'\nimport once from 'lodash.once'\nimport Phaser, { TilemapLayer, Sprite } from 'phaser-ce'\n\n\nimport store from '../store'\n\nimport Enemy from './Enemy'\nimport Person from './Person'\nimport FBK from './FBK'\nimport Score from './Score'\nimport { PolicemanManager, PolicemanManagerProps } from \"./Policeman\"\nimport { CactusHandler, ThrowCactusProps, CactusHanlerProps } from \"./Cactus\"\nimport {HandsHandler} from './Hands'\nimport {render as renderObstacles} from './Obstacles'\n\nimport {\n    backgroundColor,\n    ground,\n    BUIDING_COORDS,\n    orderBuidings,\n    typesBuiding,\n    ENEMY_TYPES,\n    LayersIds,\n    passers,\n    passersTypes,\n    obstaclesKeys\n} from '../constants/constants'\n\nimport { OfficialProps, renderOfficials } from './Official'\nimport { renderPassers, PassersProps, CrowdHandler } from './Passer';\nimport { isDevelopment } from '../utils';\nimport { startGame } from '../actions';\n\nexport default class Game extends Phaser.State{\n    private map: Phaser.Tilemap\n    private obstacles: Phaser.Group\n    private person: FBK\n    private cactuses: Phaser.Group\n    private crowd: CrowdHandler\n    private ground: Phaser.Sprite\n    private cloudsSprite: Phaser.TileSprite\n    private ladder: Phaser.TilemapLayer;\n    private listBuidingsSprite: Phaser.Sprite[] = []\n    private score: Score\n    private handsHandler: HandsHandler\n    private officials: OfficialProps\n    private passers: PassersProps\n    donation: Phaser.Group\n    cactusHandler: CactusHanlerProps\n    policemanWatcher: PolicemanManagerProps\n    assetsPath: string = './assets/'\n\n    init() {\n        store.dispatch(startGame())\n    }\n\n    preload() {\n        \n    }\n\n    createClouds() {\n        this.cloudsSprite = this.game.add.tileSprite(0, 0, this.game.width * 3000, this.game.height - 200, 'clouds', 0)\n        this.cloudsSprite.scale.set(1.1, 1)\n        this.cloudsSprite.smoothed = true;\n        this.cloudsSprite.autoScroll(-5, 0);\n    }\n\n    createGround() {\n        let graphics: Phaser.Graphics = this.game.make.graphics()\n        graphics.beginFill(0x766627, 1)\n        graphics.drawRect(0, 0, ground.width, ground.height)\n        graphics.endFill()\n        graphics.boundsPadding = 0;\n        this.ground = this.game.add.sprite(0, this.game.world.height - ground.height)\n        this.ground.addChild(graphics)\n        this.ground.width = ground.width\n        this.ground.height = ground.height\n        this.ground.anchor.set(0, 0)\n        this.physics.arcade.enable(this.ground)\n        this.ground.body.immovable = true\n    }\n\n    createBuidings() {\n        for(let type of orderBuidings) {\n            if (typeof(BUIDING_COORDS[type]) !== 'undefined') {\n                let buildingInfo = BUIDING_COORDS[type]\n                let building = this.game.add.sprite(\n                    buildingInfo.position.x, \n                    this.game.world.height - ground.height, \n                    'buildings', \n                    `${typesBuiding[type]}`\n                )\n                building.anchor.setTo(buildingInfo.scale.x, buildingInfo.scale.y)\n                this.listBuidingsSprite.push(building)\n            }\n        }\n    }\n\n    createGroundFromTiles() {\n        // const layer = this.map.createLayer('background')\n        // this.physics.arcade.enable(layer);\n        // layer.anchor.set(0, 0)    \n        // // layer.debug = true\n        // this.map.setCollision([58, 59, 60], true, layer);\n        // layer.position.x = 0\n        // layer.position.y = 0\n        // layer.fixedToCamera = false\n        // layer.scrollFactorX = 0\n        // layer.scrollFactorY = 0\n        // layer.setScale(Math.round(this.game.world.width/this.game.width), 1)\n        // layer.position.set(0, this.game.height - 512)\n        // this.backgroundlayer = layer\n    }\n\n\n    _createObstacles() {\n        // this.map.addTilesetImage('obstacles', LayersIds.obstacles);\n        // const collisionPoints = [...Array(96)].map((_, v) => v)\n        // this.obstacles = this.map.createLayer('obstacles');\n        // this.physics.arcade.enable(this.obstacles);\n        // this.obstacles.anchor.set(0, 0)\n        // this.map.setCollision(collisionPoints, true, this.obstacles);\n        // console.log('height = ', this.obstacles.height)\n        // // this.obstacles.debug = true\n        // this.obstacles.position.x = 0\n        // this.obstacles.position.y = 0\n        // this.obstacles.fixedToCamera = false\n        // this.obstacles.scrollFactorX = 0\n        // this.obstacles.scrollFactorY = 0\n        // console.log(this.obstacles.getLocalBounds())\n        // console.log(this.obstacles.scale.y)\n        // this.obstacles.position.set(0, 0)\n    }\n\n\n    createObstacles() {\n        \n        // var bmd = this.game.make.bitmapData(320, 256)\n        // bmd.copy(obstaclesKeys.texture)\n        // const sprite = this.game.add.sprite(100, this.game.height - ground.height, obstaclesKeys.texture)\n        // sprite.anchor.set(0, 1)\n        // group.add(sprite)\n        // sprite.body.immovable = true\n        \n\n        const poly = new Phaser.Polygon()\n\n        //  And then populate it via setTo, using any combination of values as above\n        poly.setTo([ new Phaser.Point(200, 100), new Phaser.Point(350, 100), new Phaser.Point(375, 200), new Phaser.Point(150, 200) ])\n\n        // this.physics.arcade.enable(group);\n        // this.physics.arcade.enable(shapeSprite);\n        // group.forEach((el: Phaser.Graphics) => {\n        // shapeSprite.body.allowGravity = true\n        // shapeSprite.body.gravity.y = 400\n        // shapeSprite.body.immovable = true\n        // })\n\n        this.obstacles = renderObstacles.call({game: this.game})\n    }\n\n    createLadder() {\n        this.map = this.add.tilemap(LayersIds.tilemap);\n        this.map.heightInPixels = this.game.world.height\n        this.map.addTilesetImage('obstacles', LayersIds.tiles);\n        this.ladder = this.map.createLayer('ladder');\n\n        this.physics.arcade.enable(this.ladder);\n        this.map.setCollision([58, 59], true, this.ladder);\n        this.ladder.anchor.set(0, 0)\n        // this.ladder.anchor.set(0, 1)\n        this.ladder.scrollFactorY = 0\n        this.ladder.scrollFactorX = 0\n        this.ladder.scrollY = 0\n        this.ladder.fixedToCamera = false\n        // this.ladder.resize(this.game.width, this.game.world.height)\n        // this.ladder.scale.set(1, Math.round(960/this.game.world.height))\n    }\n\n    createFinalPoints() {\n        const coords = [{\n            y: this.game.world.height - ground.height - 400,\n            x: this.game.world.width - 100\n        }]\n\n        this.donation = this.game.add.physicsGroup(Phaser.Physics.ARCADE)\n        // this.map.createFromObjects('finalpoints', 'point', LayersIds.donation, 0, true, false, this.donation); \n\n        coords.forEach((coord: Phaser.Sprite) => {\n            const sprite = this.game.add.sprite(coord.x, coord.y, LayersIds.donation)\n            sprite.width = 50\n            sprite.height = 50\n            this.donation.add(sprite)\n        })\n    }\n\n    create() {\n        this.physics.startSystem(Phaser.Physics.ARCADE);\n\n        this.stage.backgroundColor = backgroundColor;\n        // this.game.world.setBounds(0, 0, ground.width, this.game.world.height);\n        this.game.world.resize(ground.width, this.game.height);\n        this.createLadder()\n        this.createClouds();\n        this.createGround();\n        this.createBuidings();\n        this.createObstacles()\n        this.createFinalPoints()\n        \n        \n\n        this.handsHandler = new HandsHandler(\n            this.game\n        )\n\n        this.person = new FBK({\n            game: this.game\n        });\n        \n        \n\n\n        this.score = new Score({\n            game: this.game,\n        });\n\n        this.officials = renderOfficials(this.game)\n        this.passers = renderPassers(this.game)\n        this.cactusHandler = CactusHandler(this.game)\n        this.policemanWatcher = PolicemanManager(this.game)\n\n        this.crowd = new CrowdHandler(\n            this.game\n        )\n    }\n\n    \n    update() {\n\n        this.physics.arcade.collide(\n            this.person.sprite, \n            this.obstacles, \n            null, \n            null, \n            this\n        );\n\n        this.physics.arcade.collide(\n            this.policemanWatcher.getAllSprites(), \n            this.obstacles, \n            this.policemanWatcher.collideWithObstacles, \n            null, \n            this.policemanWatcher\n        );\n\n        this.physics.arcade.collide(\n            this.officials.sprites, \n            this.obstacles, \n            this.officials.collideWithObstacles, \n            null, \n            this\n        );\n\n        this.physics.arcade.collide(\n            this.passers.sprites,\n            this.obstacles,\n            this.passers.collideWithObstacles,\n            null,\n            this\n        )\n\n        this.physics.arcade.overlap(\n            this.person.sprite,\n            this.donation, \n            this.person.collideFinalPoints,\n            null,\n            this\n        )\n\n        this.physics.arcade.overlap(\n            this.person.sprite,\n            this.policemanWatcher.getAllActivePoliceman(),\n            (_: Phaser.Sprite, policeman: Phaser.Sprite) => {\n                if (!isDevelopment) {\n                    this.policemanWatcher.collidePerson(policeman)\n                    this.person.collideWithEnemy({\n                        type: ENEMY_TYPES.policeman\n                    })\n                }\n            },\n            null,\n            this\n        )\n        this.physics.arcade.collide(\n            this.ground, \n            this.policemanWatcher.getAllSprites()\n        )\n        this.physics.arcade.collide(\n            this.person.sprite,\n            this.cactusHandler.aliveCactuses(),\n            (_: Phaser.Sprite, cactus: Phaser.Sprite) => {\n                this.cactusHandler.collidePersonWithCactus(cactus)\n            },\n            null,\n            this\n        )\n        this.physics.arcade.collide(\n            this.policemanWatcher.getAllSprites(),\n            this.cactusHandler.thrownCactuses, \n            (policeman: Phaser.Sprite, cactus: Phaser.Sprite) => {\n                this.policemanWatcher.collideCactus(policeman)\n                this.cactusHandler.collideEnemyWithCactus(cactus)\n            },\n            null, \n            this\n        );\n\n        this.physics.arcade.collide(\n            this.officials.sprites,\n            this.cactusHandler.thrownCactuses, \n            (official: Phaser.Sprite, cactus: Phaser.Sprite) => {\n                this.officials.collideCactus(official)\n                this.cactusHandler.collideEnemyWithCactus(cactus)\n            },\n            null, \n            this\n        );\n\n        this.physics.arcade.collide(\n            this.cactusHandler.thrownCactuses, \n            this.obstacles, \n            this.cactusHandler.collideObstaclesWithCactus,\n            null, \n            this.cactusHandler\n        )\n\n        this.physics.arcade.collide(\n            this.cactusHandler.thrownCactuses, \n            this.ground, \n            this.cactusHandler.collideObstaclesWithCactus, \n            null, \n            this.cactusHandler\n        )\n\n        this.physics.arcade.collide(\n            this.person.sprite, \n            this.crowd, \n            this.meetCrowd, \n            null, \n            this\n        );\n        this.physics.arcade.collide(\n            this.person.sprite, \n            this.ground, \n            () => {\n                this.person.endJumping();\n            }, \n            null, \n            this\n        );\n\n        this.physics.arcade.collide(\n            this.ground,\n            this.passers.sprites\n        )\n\n        this.physics.arcade.collide(\n            this.ground,\n            this.officials.sprites\n        )\n\n        this.physics.arcade.collide(\n            this.ground,\n            this.crowd.sprites\n        )\n\n\n        this.physics.arcade.overlap(\n            this.person.sprite,\n            this.handsHandler.getHandsSprite(),\n            (_: Phaser.Sprite, handSprite: Phaser.Sprite) => {\n                this.handsHandler.collidePerson(handSprite)        \n            }\n        )\n\n        this.physics.arcade.overlap(\n            this.person.sprite,\n            this.officials.sprites,\n            this.collideWithOfficials,\n            null,\n            this\n        )\n\n        this.physics.arcade.overlap(\n            this.person.sprite,\n            this.passers.sprites,\n            this.collideWithPassers,\n            null,\n            this\n        )\n\n        this.person.update()\n        this.handsHandler.update(this.person.sprite.centerX)\n        this.passers.update()\n        this.officials.update()\n        this.cactusHandler.update()\n        this.policemanWatcher.update()\n        this.crowd.update()\n    }\n\n    collideWithOfficials(person: Phaser.Sprite, official: Phaser.Sprite) {\n        this.officials.collisionWithPerson(official)\n    }\n\n    collideWithPassers(person: Phaser.Sprite, passer: Phaser.Sprite) {\n        this.passers.collisionWithPerson(passer)\n    }\n\n    render() {\n        // this.game.debug.geom( this.obstacles, 'rgba(255,0,0,1)' ) ;\n        // this.game.debug.body(this.ground);\n\n        this.obstacles.forEach((o: Phaser.Sprite) => {\n            // this.game.debug.body(o);\n        })\n        this.person.render()\n        // this.game.debug.body(this.ladder);\n        \n    }\n\n    meetCrowd(person: Phaser.Sprite, crowd: Phaser.Sprite) {\n        this.game.state.start('Finish', true, false);\n    }\n}\n","import omit from 'lodash.omit'\nimport * as TYPES from '../types/types'\n\nexport interface PolicemanState {\n    readonly activeIds: {[k: string]: boolean}\n}\n\nconst defaultState = {\n    activeIds: {}\n};\n\ntype CollideWithPersonAction = {\n    type: typeof TYPES.PERSON_POLICEMAN_COLLIDE,\n    id: string,\n}\n\n\ntype PolicemanRemoveAction = {\n    type: typeof TYPES.PERSON_POLICEMAN_REMOVE,\n    id: string,\n}\n\ntype CollideCactusAction = {\n    type: typeof TYPES.COLLIDE_POLICEMAN_CACTUS,\n    id: string,    \n}\n\ntype PolicemanAction = CollideWithPersonAction | PolicemanRemoveAction | CollideCactusAction\n\nexport default function (state: PolicemanState = defaultState, action: PolicemanAction) {\n    switch(action.type) {\n        case TYPES.PERSON_POLICEMAN_COLLIDE:\n            return {\n                ...state,\n                activeIds: {\n                    ...state.activeIds,\n                    [action.id]: true\n                }\n            };\n        case TYPES.PERSON_POLICEMAN_REMOVE:\n            return omit(state, [action.id]);\n\n        case TYPES.COLLIDE_POLICEMAN_CACTUS:\n            return {\n                collide_id_with_cactus: action.id\n            };\n        default:\n            return state;\n    }\n}","import { ADD_ENEMY } from '../types/types';\nimport { ENEMY_TYPES } from '../constants/constants';\n\nexport interface EnemyState {\n    enemies: {\n        [k in string]: string[]\n    }\n}\n\nconst defaultState = {\n    enemies: {\n\n    }\n};\n\ntype AddActionType = {\n    type: typeof ADD_ENEMY,\n    enemyType: ENEMY_TYPES,\n    playerId: string\n}\n\ntype Action = AddActionType\n\n// XXX maybe this file need to be removed\n\nexport default function (state: EnemyState = defaultState, action: Action) {\n    switch(action.type) {\n        case ADD_ENEMY:\n            const enemies = {...state.enemies}\n            if (typeof(enemies[action.enemyType]) === 'undefined') {\n                enemies[action.enemyType] = []\n            }\n            enemies[action.enemyType].push(action.playerId)\n            return {\n                ...state,\n                enemies\n            };\n        default:\n            return state;\n    }\n}","import { CHANGE_MOOD, REDUCE_MOOD } from '../types/types'\nimport { MOOD } from '../constants/constants'\n\nexport interface MoodState {\n    readonly total: number\n}\n\nconst defaultState = {\n    total: 100\n}\n\n\ntype ChangeMoodAction = {\n    readonly type: typeof CHANGE_MOOD,\n    readonly incr: number\n}\n\ntype ReduceMoodAction = {\n    readonly type: typeof REDUCE_MOOD,\n    readonly cause: string\n}\n\ntype MoodAction = ChangeMoodAction | ReduceMoodAction\n\nexport default function (state: MoodState = defaultState, action: MoodAction) {\n    switch(action.type) {\n        case CHANGE_MOOD:\n            let total = state.total + action.incr < 0 ? 0 : state.total + action.incr;\n            return {\n                ...state,\n                total\n            } \n        case REDUCE_MOOD:\n            return {\n                ...state,\n                cause: action.cause\n            }      \n        default:\n            return state;\n    }\n}","import * as TYPES from '../types/types'\nimport { COINS } from '../constants/constants'\n\nexport interface ScoreState {\n   readonly cactuses: number,\n   readonly money: number \n}\n\nconst defaultState = {\n    cactuses: 0,\n    money: COINS.startSum\n}\n\ntype UpdateScore = {\n    type: typeof TYPES.UPDATE_SCORE,\n    diff: number,\n}\n\ntype UpdateMoney = {\n    type: typeof TYPES.UPDATE_MONEY,\n    amount: number,\n}\n\ntype AddCactus = {\n    type: typeof TYPES.ADD_CACTUS,\n}\n\ntype ThrowCactus = {\n    type: typeof TYPES.THROW_CACTUS\n}\n\ntype Action = UpdateScore | UpdateMoney | AddCactus | ThrowCactus\n\nexport default function (state: ScoreState = defaultState, action: Action) {\n    switch(action.type) {\n        case TYPES.UPDATE_SCORE:\n            return {\n                ...state,\n                cactuses: state.cactuses + action.diff\n            }\n        case TYPES.UPDATE_MONEY:\n            const money = state.money + action.amount\n            return {\n                ...state,\n                money: money < 0 ? 0 : money\n            }\n        case TYPES.ADD_CACTUS:\n            return {\n                ...state,\n                cactuses: state.cactuses + 1\n            }\n        case TYPES.THROW_CACTUS:\n            return {\n                ...state,\n                cactuses: state.cactuses - 1\n            }\n        default:\n            return state;\n    }\n}","import { ENEMY_TYPES } from '../constants/constants'\nimport { COLLIDE_OFFICIAL } from '../types/types'\n\nexport interface OfficialState {\n    collided: number[]\n}\n\nconst defaultState: OfficialState = {\n    collided: []\n}\n\ntype ActionCollide = {\n    type: typeof COLLIDE_OFFICIAL,\n    id: number\n}\n\ntype Action = ActionCollide\n// XXX maybe this file need to be removed\n\nexport default function (state = defaultState, action: Action) {\n    switch(action.type) {\n        case COLLIDE_OFFICIAL:\n            return {\n                ...state,\n                collided: (state.collided.push(action.id), state.collided)\n            };\n        default:\n            return state;\n    }\n}","import { ENEMY_TYPES } from '../constants/constants'\nimport { COLLIDE_PASSER } from '../types/types'\n\nexport interface PasserState {\n    collided: number[]\n}\n\nconst defaultState: PasserState = {\n    collided: []\n}\n\ntype ActionCollide = {\n    type: typeof COLLIDE_PASSER,\n    id: number\n}\n\ntype Action = ActionCollide\n// XXX maybe this file need to be removed\n\nexport default function (state = defaultState, action: Action) {\n    switch(action.type) {\n        case COLLIDE_PASSER:\n            return {\n                ...state,\n                collided: (state.collided.push(action.id), state.collided)\n            };\n        default:\n            return state;\n    }\n}","import { RENDER_CROWD } from \"../types/types\";\n\nexport interface EventsState {\n    readonly renderCrowd: boolean\n}\n\nconst defaultState = {\n    renderCrowd: false\n};\n\ntype RenderCrowdAction = {\n    type: typeof RENDER_CROWD\n}\n\ntype Action = RenderCrowdAction\n\n// XXX maybe this file need to be removed\n\nexport default function (state: EventsState = defaultState, action: Action) {\n    switch(action.type) {\n        case RENDER_CROWD: \n            return {\n                ...state,\n                renderCrowd: true \n            }\n        default: \n            return state    \n    }\n}","import { GAME_OVER, HAPPY_END } from '../types/types'\n\nexport interface FinalState {\n    readonly [k: string]: string \n}\n\nconst defaultState = {\n    status: ''\n}\n\ntype GameOverAction = {\n    readonly type: typeof GAME_OVER,\n    readonly msg: string,\n}\n\ntype HappyEndAction = {\n    readonly type: typeof HAPPY_END,\n}\n\ntype Action = GameOverAction | HappyEndAction\n\nexport default function statusGame(state: FinalState = defaultState, action: Action) {\n    switch(action.type) {\n        case GAME_OVER: \n            return {\n                ...state,\n                status: 'fail',\n                msg: action.msg,\n            }\n        case HAPPY_END:\n            return {\n                ...state,\n                status: 'end'\n            }\n        default: return state    \n    }\n}","import once from 'lodash.once'\nimport autobind from 'autobind-decorator'\n\nimport Person from './Person'\nimport store from '../store'\n\nimport {\n    PERSON,\n    ENEMY_TYPES,\n    MOOD,\n    DEACTIVATE_TIME_FOR_COLLIDE_PERSON_POLICEMAN,\n    ground,\n    STATES\n} from '../constants/constants'\n\nimport { throwCactus, changeMoney, reduceMood, changeMood, renderCrowd, gameEnd } from '../actions'\nimport { PubSub } from './Pubsub';\n\ninterface FBKProps {\n    readonly game: Phaser.Game,\n    // readonly onThrowCactus: (\n    //     x:number, \n    //     y:number, \n    //     velocityX: number, \n    //     angularVelocity: number\n    // ) => void\n}\ninterface CollideEventProps {\n    readonly type: ENEMY_TYPES\n}\n\n\nconst COUNT_JUMPING_TRIALS = 2\n\n\nexport default class FBK extends Person {\n    isTouchedEnemy: boolean = false\n    game: Phaser.Game\n    sprite: Phaser.Sprite\n    tween: Phaser.Tween\n    time: number\n    cactuses: Phaser.Sprite[] = []\n    private isJumping:boolean = false\n    private facing: string = 'right'\n    private direction: number = 1\n    private timer: Phaser.TimerEvent\n    private keys: {[key: string]: Phaser.Key}\n    // private onThrowCactus: (x: number, y: number, velocityX: number, angularVelocity: number) => void\n    private animationsRunRight: Phaser.Animation\n    private animationsJump: Phaser.Animation\n    private animationsStand: Phaser.Animation\n    countJumps: number = 0\n    // private collideWithEnemy: (enemies: any, person: Phaser.Sprite, enemy:Phaser.Sprite) => void\n\n    constructor( {\n        game, \n        // onThrowCactus \n    }: FBKProps) {\n        \n        super({\n            game: game,\n            x: 0,\n            y: game.world.height - ground.height,\n            key: 'person'\n        });\n        \n        this.game = game;\n        this.time = Date.now();\n\n        this.sprite.width = PERSON.width;\n        this.sprite.height = PERSON.height;\n        \n        this.sprite.anchor.set(0.5, 1);\n        this.sprite.body.setSize(PERSON.width, PERSON.height, 20, 17) \n        // this.sprite.scale.setTo(PERSON.setTo[0], PERSON.setTo[1]);\n        // this.sprite.body.offset.y = this.sprite.body.offset.y - 18;\n\n        this.animationsRunRight = this.sprite.animations.add(\n            'run',\n            PERSON.tweenSettings.run.frames,\n            PERSON.tweenSettings.run.frameRate,\n            true\n        );\n        this.animationsJump = this.sprite.animations.add(\n            'jump', \n            PERSON.tweenSettings.jump.frames, \n            PERSON.tweenSettings.jump.frameRate, \n            true\n        );\n        this.animationsStand = this.sprite.animations.add(\n            'stand', \n            PERSON.tweenSettings.stand.frames, \n            PERSON.tweenSettings.stand.frameRate, \n            true\n        );\n        this.game.physics.arcade.enable(this.sprite);\n        this.sprite.body.gravity.y = 3000;\n        // this.sprite.body.immovable = true;\n        // this.sprite.body.allowGravity = true; \n\n        this.sprite.animations.play('stand');\n        this.sprite.body.collideWorldBounds = true;\n        \n        this.game.camera.follow(this.sprite);\n        this.initiateKeyboardEvents()   \n    }\n\n    initiateKeyboardEvents = () => {\n        this.keys = {\n            up: this.game.input.keyboard.addKey(Phaser.Keyboard.UP),\n            down: this.game.input.keyboard.addKey(Phaser.Keyboard.DOWN),\n            left: this.game.input.keyboard.addKey(Phaser.Keyboard.LEFT),\n            right: this.game.input.keyboard.addKey(Phaser.Keyboard.RIGHT),\n            a: this.game.input.keyboard.addKey(Phaser.Keyboard.A), //throw\n            d: this.game.input.keyboard.addKey(Phaser.Keyboard.D) //delete\n        }\n    }\n\n    render() {\n        // this.game.debug.body(this.sprite);\n    }\n\n    @autobind\n    collideWithEnemy(collideProps: CollideEventProps) {\n        const state = store.getState();\n        switch(collideProps.type) {\n            case ENEMY_TYPES.fsb:\n                if (!this.isTouchedEnemy) {\n                    state.dispatch(changeMoney(-10))\n                    this.addDisabledAnimation()\n                }\n                break;\n            case ENEMY_TYPES.gangster:\n            case ENEMY_TYPES.official:\n                state.dispatch(changeMoney(-10))\n                this.deactivateForTime();\n                break;\n            case ENEMY_TYPES.policeman:\n                if (!this.isTouchedEnemy) {\n                    this.addDisabledAnimation()\n                    this.reduceMood(ENEMY_TYPES.policeman);\n                    store.dispatch(changeMood({\n                        incr: -MOOD.step\n                    }))\n                    break;\n                }\n            default: break;\n        }\n    }\n\n    deactivateForTime() {\n        this.timer = this.game.time.events.loop(2000, this.activate, this);\n    }\n\n    addDisabledAnimation() {\n        this.isTouchedEnemy = true;\n        this.tween = this.game.add.tween(this.sprite).to(\n            { alpha: 0 },\n            300, Phaser.Easing.Linear.None, true, 0, 100, false\n        );\n\n        this.timer = this.game.time.events.loop(\n            DEACTIVATE_TIME_FOR_COLLIDE_PERSON_POLICEMAN, \n            this.finishCollision, \n            this\n        )\n\n        this.animationsStand.play()\n        this.sprite.body.velocity.x = -1 * Math.abs(this.sprite.body.velocity.x);\n    }\n    \n    \n    renderCrowd = once(() => {\n        store.dispatch(renderCrowd())\n    })\n\n    update() {\n        let cursors = this.keys;\n        let player = this.sprite;\n        let jumpButton = this.keys.up;\n        if (this.sprite.position.x >= ground.width/2) {\n            this.renderCrowd()\n        }\n        if (!this.isTouchedEnemy) {\n            player.body.velocity.x = 0;\n            if (cursors.left.isDown) {\n                this.direction = -1\n                player.body.velocity.x = -PERSON.velocityX;\n\n                if (this.facing != 'left' || player.body.touching.down || player.body.onFloor())\n                {\n                    this.sprite.scale.setTo(-Math.abs(this.sprite.scale.x), this.sprite.scale.y);\n                    player.animations.play('run');\n                    this.facing = 'left';\n                }\n            } else if (cursors.right.isDown) {\n                player.body.velocity.x = PERSON.velocityX;\n                this.direction = 1 \n                if (this.facing != 'right' || player.body.touching.down || player.body.onFloor())\n                {\n                    this.sprite.scale.setTo(Math.abs(this.sprite.scale.x), this.sprite.scale.y);\n                    player.animations.play('run');\n                    this.facing = 'right';\n                }\n            } else {\n                if (this.facing != 'idle')\n                {\n                    player.animations.stop();\n                    player.frame = 0;\n                    this.facing = 'idle';\n                }\n                else {\n                    if ( player.body.touching.down || player.body.onFloor() ) {\n                        player.frame = 0;\n                        this.facing = 'idle';\n                        this.countJumps = 0\n                    }\n                }\n            }\n\n            if (jumpButton.isDown)\n            {\n                this.countJumps++\n                if (this.countJumps < COUNT_JUMPING_TRIALS || !this.isJumping) {\n                    player.animations.play('jump');\n                    player.body.velocity.y = player.body.velocity.y - PERSON.velocityY;\n                    this.isJumping = true;\n                }\n            }\n\n\n            const state = store.getState();\n            if (state.score.cactuses > 0 && this.keys.a.justDown) {\n                this.throwCactus();\n            }\n        }\n    }\n\n    finishCollision() {\n       this.endAnimation();\n       this.activate();\n    }\n\n\n    endAnimation() {\n        this.sprite.alpha = 1;\n        this.tween.stop();\n    }\n\n    activate() {\n        this.game.time.events.remove(this.timer);\n        this.isTouchedEnemy = false;\n    }\n\n    public throwCactus() {\n        store.dispatch(throwCactus());\n        PubSub.publish({\n            x: this.sprite.position.x,\n            y: this.sprite.worldPosition.y - this.sprite.body.height,\n            velocityX: this.direction * PERSON.velocityX,\n            angularVelocity: 100\n        })\n        \n    }\n\n    @autobind\n    reduceMood(cause: string) {\n        store.dispatch(reduceMood({\n            cause\n        }))\n    }\n\n    public endJumping() {\n        this.isJumping = false;\n        // if (this.sprite.body.checkCollision.down) {\n        //     this.sprite.body.gravity.y = 0;\n        // }\n    }\n\n    public collideFinalPoints = once(() => {\n        store.dispatch(gameEnd())\n        this.game.state.start(STATES.Finish)\n    })\n}\n","import autobind from 'autobind-decorator'\nimport Coins from './Coins'\nimport Mood from './Mood'\nimport store from '../store'\n\ninterface ScoreProps {\n    readonly game: Phaser.Game\n}\n\nclass Score {\n    group: Phaser.Group\n    game: Phaser.Game\n    cactusesText: Phaser.Text\n    mood: Mood\n    cactuses: number\n    private coins: Coins\n\n    constructor({ game }: ScoreProps) {\n        this.game = game\n        this.group = this.game.add.group()\n        this.group.fixedToCamera = true\n        this.group.x = 0\n        this.group.y = 0\n        this.mood = new Mood({ game })\n        this.coins = new Coins({ game })\n        this.group.add(this.coins.group) \n        let cactusGroup = this.game.add.group()\n        let cactusImg = this.game.add.sprite(20, 85, 'cactus')\n        cactusImg.width = 30\n        cactusImg.height = 30\n\n        this.cactusesText = this.game.add.text(55, 85, '0', {\n            font: '25px Arial',\n            fill: '#fff'\n        })\n        // this.textTimer.anchor.set(1, 0);\n        // this.textTimer.setShadow(2, 2, 'rgba(0, 0, 0, .8)', 0);\n        cactusGroup.add(cactusImg)\n        cactusGroup.add(this.cactusesText)\n        this.group.add(cactusGroup)\n        store.subscribe(this.updateScore)\n    }\n\n    @autobind\n    updateScore() {\n        const state = store.getState()\n        const { score: { cactuses } } = state\n        if (this.cactuses !== cactuses) {\n            this.cactuses = cactuses\n            this.cactusesText.setText(cactuses.toString())\n        }\n    }\n\n    kill() {\n        this.group.killAll()\n    }\n}\n\nexport default Score","import autobind from 'autobind-decorator';\n\nimport { COINS, FAIL_MSG, STATES } from '../constants/constants';\n\nimport store from '../store';\nimport { gameOver } from '../actions';\n\nexport default class Coins {\n    coinImage: Phaser.Sprite;\n    label: Phaser.Text;\n    money: number = 0;\n    game: Phaser.Game;\n    group: Phaser.Group;\n    // width: number;\n\n    constructor( { game }: { game: Phaser.Game } ) {\n        this.game = game;\n\n        this.group = this.game.add.group();\n        this.group.x = 20;\n        this.group.y = 50;\n\n        this.coinImage = this.game.add.sprite(0, 0, 'coin');\n        this.coinImage.width = 30;\n        this.coinImage.height = 30;\n\n        this.label = this.game.add\n            .text(\n                35,\n                0,\n                String(COINS.startSum),\n                {\n                    font: \"25px Arial\",\n                    fill: \"#ffffff\",\n                    align: \"center\"\n                }\n            );\n\n        this.group.add(this.coinImage);\n        this.group.add(this.label);\n        store.subscribe(this.update);\n    }\n\n    @autobind\n    update() {\n        const state = store.getState();\n        const { money } = state.score;\n        if (money !== this.money) {\n            this.money = money;\n            this.label.setText(this.money.toString());\n            if (money === 0) {\n                store.dispatch(gameOver({\n                    msg: FAIL_MSG.money\n                }))\n                this.game.state.start(STATES.Finish)\n            }\n        }\n    }\n}","import autobind from 'autobind-decorator';\n\nimport MoodRange from './RangeComponent';\n\nimport store from '../store';\nimport { gameOver } from '../actions';\nimport { FAIL_MSG, STATES } from '../constants/constants';\n\ninterface Colors {\n    readonly [percentage: string]: string\n}\nconst colors: Colors = {\n    '10': '#FF0000',\n    '20': '#FF4000',\n    '30': '#DF7401',\n    '40': '#DBA901',\n    '50': '#D7DF01',\n    '60': '#A5DF00',\n    '70': '#74DF00',\n    '80': '#3ADF00',\n    '90': '#01DF01',\n    '100': '#01DF3A',\n}\n\nconst LIMIT_MOOD: number = 30 \n\nexport default class Mood {\n    group: Phaser.Group\n    game: Phaser.Game\n    cactusesText: Phaser.Text\n    mood: any\n    moodValue: number = 100\n    total: number\n    timer: any\n    barSpriteTween: Phaser.Tween\n    \n    constructor({ game }: {\n        game: Phaser.Game\n    }) {\n        this.game = game;\n        this.mood = new MoodRange(this.game, {\n            width: 200,\n            height: 30,\n            x: 120,\n            y: 30,\n            bg: {\n                color: '#651828'\n            },\n            bar: {\n                color: '#10ff80'\n            },\n            animationDuration: 200,\n            flipped: false,\n            isFixedToCamera: true\n        });\n\n        store.subscribe(this.changeMood);\n\n        this.barSpriteTween = this.game.add.tween(this.mood.barSprite).to( \n            { alpha: 0.5 }, \n            300, \n            Phaser.Easing.Linear.None, \n            false,\n            0,\n            -1,\n            false\n        );\n        // this.coins = coins;\n        // this.person = person;\n        // this.group = this.game.add.group();\n        // this.group.fixedToCamera = true;\n        // this.group.x = this.game.width - 60;\n        // this.group.y = 20;\n        //\n        // this.group.add(this.coins.group);\n        //\n        // this.cactusesText = this.game.add.text(\n        //     0,\n        //     10,\n        //     this.person.cactuses.length.toString(),\n        //     {\n        //         font: '25px Arial',\n        //         fill: '#fff'\n        //     }\n        // );\n        // this.group.add(this.cactusesText);\n    }\n\n    @autobind\n    changeMood() {\n        const total: number = store.getState().mood.total\n        if (this.total !== total) {\n            this.total = total\n            this.mood.setPercent(this.total)\n\n            if (this.total === 0) {\n                store.dispatch(gameOver({\n                    msg: FAIL_MSG.mood\n                })) \n                this.game.state.start(STATES.Finish)\n            }\n\n            const percentages = Object.keys(colors).filter((p) => !Number.isNaN(+p)).map(p => +p)\n\n            const reversedPercentages = percentages.reverse()\n            const foundPercentage = reversedPercentages.find((p) => p <= this.total)\n            if (foundPercentage) {\n                this.mood.setBarColor(colors[`${foundPercentage}`])\n                if (foundPercentage <= LIMIT_MOOD) {\n                    this.barSpriteTween.start()\n                }\n                else {\n                    this.barSpriteTween.stop()\n                }\n            }\n        }\n    }\n}\n","/**\n Copyright (c) 2015 Belahcen Marwane (b.marwane@gmail.com)\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n */\nvar HealthBar = function HealthBar(game, providedConfig) {\n  this.game = game;\n  this.setupConfiguration(providedConfig);\n  this.setPosition(this.config.x, this.config.y);\n  this.drawBackground();\n  this.drawHealthBar();\n  this.setFixedToCamera(this.config.isFixedToCamera);\n};\n\nHealthBar.prototype.constructor = HealthBar;\n\nHealthBar.prototype.setupConfiguration = function (providedConfig) {\n  this.config = this.mergeWithDefaultConfiguration(providedConfig);\n  this.flipped = this.config.flipped;\n};\n\nHealthBar.prototype.mergeWithDefaultConfiguration = function (newConfig) {\n  var defaultConfig = {\n    width: 250,\n    height: 40,\n    x: 0,\n    y: 0,\n    bg: {\n      color: '#651828'\n    },\n    bar: {\n      color: '#FEFF03'\n    },\n    animationDuration: 200,\n    flipped: false,\n    isFixedToCamera: false\n  };\n  return mergeObjetcs(defaultConfig, newConfig);\n};\n\nfunction mergeObjetcs(targetObj, newObj) {\n  for (var p in newObj) {\n    try {\n      targetObj[p] = newObj[p].constructor == Object ? mergeObjetcs(targetObj[p], newObj[p]) : newObj[p];\n    } catch (e) {\n      targetObj[p] = newObj[p];\n    }\n  }\n\n  return targetObj;\n}\n\nHealthBar.prototype.drawBackground = function () {\n  var bmd = this.game.add.bitmapData(this.config.width, this.config.height);\n  bmd.ctx.fillStyle = this.config.bg.color;\n  bmd.ctx.beginPath();\n  bmd.ctx.rect(0, 0, this.config.width, this.config.height);\n  bmd.ctx.fill();\n  bmd.update();\n  this.bgSprite = this.game.add.sprite(this.x, this.y, bmd);\n  this.bgSprite.anchor.set(0.5);\n};\n\nHealthBar.prototype.drawHealthBar = function () {\n  var bmd = this.game.add.bitmapData(this.config.width, this.config.height);\n  bmd.ctx.fillStyle = this.config.bar.color;\n  bmd.ctx.beginPath();\n  bmd.ctx.rect(0, 0, this.config.width, this.config.height);\n  bmd.ctx.fill();\n  bmd.update();\n  this.barSprite = this.game.add.sprite(this.x - this.bgSprite.width / 2, this.y, bmd);\n  this.barSprite.anchor.y = 0.5;\n\n  if (this.flipped) {\n    this.barSprite.anchor.x = 1;\n    this.barSprite.position.x = this.bgSprite.position.x + this.config.width * this.bgSprite.anchor.x;\n  }\n};\n\nHealthBar.prototype.setPosition = function (x, y) {\n  this.x = x;\n  this.y = y;\n\n  if (this.bgSprite !== undefined && this.barSprite !== undefined) {\n    this.bgSprite.position.x = x;\n    this.bgSprite.position.y = y;\n    this.barSprite.position.x = this.bgSprite.position.x - this.config.width * this.bgSprite.anchor.x;\n    this.barSprite.position.y = y;\n\n    if (this.flipped) {\n      this.barSprite.position.x = this.bgSprite.position.x;\n    }\n  }\n};\n\nHealthBar.prototype.setPercent = function (newValue) {\n  if (newValue < 0) newValue = 0;\n  if (newValue > 100) newValue = 100;\n  var newWidth = newValue * this.config.width / 100;\n  this.setWidth(newWidth);\n};\n/*\n Hex format, example #ad3aa3\n */\n\n\nHealthBar.prototype.setBarColor = function (newColor) {\n  var bmd = this.barSprite.key;\n  bmd.update();\n  var currentRGBColor = bmd.getPixelRGB(0, 0);\n  var newRGBColor = hexToRgb(newColor);\n  bmd.replaceRGB(currentRGBColor.r, currentRGBColor.g, currentRGBColor.b, 255, newRGBColor.r, newRGBColor.g, newRGBColor.b, 255);\n};\n\nHealthBar.prototype.setWidth = function (newWidth) {\n  this.game.add.tween(this.barSprite).to({\n    width: newWidth\n  }, this.config.animationDuration, Phaser.Easing.Linear.None, true);\n};\n\nHealthBar.prototype.setFixedToCamera = function (fixedToCamera) {\n  this.bgSprite.fixedToCamera = fixedToCamera;\n  this.barSprite.fixedToCamera = fixedToCamera;\n};\n\nHealthBar.prototype.setAnchor = function (xAnchor, yAnchor) {\n  this.bgSprite.anchor.set(xAnchor, yAnchor);\n  this.barSprite.position.x = this.bgSprite.position.x - this.config.width * this.bgSprite.anchor.x;\n  this.barSprite.anchor.y = yAnchor;\n\n  if (this.flipped) {\n    this.barSprite.anchor.x = 1;\n    this.barSprite.position.x = this.bgSprite.position.x;\n  }\n};\n\nHealthBar.prototype.kill = function () {\n  this.bgSprite.kill();\n  this.barSprite.kill();\n};\n/**\n Utils\n */\n\n\nfunction hexToRgb(hex) {\n  // Expand shorthand form (e.g. \"03F\") to full form (e.g. \"0033FF\")\n  var shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n  hex = hex.replace(shorthandRegex, function (m, r, g, b) {\n    return r + r + g + g + b + b;\n  });\n  var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  return result ? {\n    r: parseInt(result[1], 16),\n    g: parseInt(result[2], 16),\n    b: parseInt(result[3], 16)\n  } : null;\n}\n\nexport default HealthBar;","import autobind from 'autobind-decorator';\n\nimport { ENEMY_TYPES, passersConstants, LayersIds } from '../constants/constants';\nimport Enemy from './Enemy';\n\nimport store from '../store';\nimport { collidePersonWithPoliceman, removePolicemanFromCollided } from '../actions';\nimport { generatorId } from '../utils';\n\nexport const POLICEMAN = {\n    width: 100,\n    height: 70,\n    rangeX: [2000, 5000],\n    count: 10,\n    speed_min: 1,\n    speed_max: 40,\n    time_threshold: 3000,\n    time_disabled: 3000,\n}\n\nexport const POLICEMAN_SPRITE_INFO = {\n    setTo: [0.12, 0.12],\n    stand: {\n        frames: [0],\n        frameRate: 1,\n    }, \n    move: {\n        frames: [7, 6, 5, 4, 3, 2, 1, 0],\n        frameRate: 8\n    }\n}\n\nexport class Policeman extends Enemy{\n    game: Phaser.Game\n    sprite: Phaser.Sprite\n    dir: number = Math.round(Math.random()) ? 1 : -1\n    velocity: number\n    animationRun: Phaser.Animation\n    timerChangingVelocity: number\n\n    constructor(game: Phaser.Game) {\n        super({\n            game, \n            coord: {\n                x: game.rnd.between(POLICEMAN.rangeX[0], POLICEMAN.rangeX[1])\n            }, \n            speed: {\n                min: POLICEMAN.speed_min,\n                max: POLICEMAN.speed_max,\n            }, \n            key: LayersIds.policeman,\n            spriteOptions: POLICEMAN_SPRITE_INFO,\n            type: ENEMY_TYPES.policeman,\n            time_threshold: POLICEMAN.time_threshold,\n            time_disabled: POLICEMAN.time_disabled,\n        })\n        \n        this.game = game;\n    }\n}\n\ninterface CollideEnemiesIdProps {\n    [k: string]: number\n}\n\ninterface EnemyObjProp {\n    [key: string]: Enemy\n}\nexport interface PolicemanManagerProps {\n    // readonly policemen: typeof Policeman[]\n    // readonly create: () => void,\n    readonly getAllSprites: () => Phaser.Sprite[],\n    readonly getAllActivePoliceman: () => Phaser.Sprite[],\n    readonly update: () => void,\n    readonly getPolicemanPlayerId: (sprite: Phaser.Sprite) => string\n    readonly collidePerson: (policemanSprite: Phaser.Sprite) => void\n    // readonly enemiesObj: EnemyObjProp\n    readonly collideCactus: (enemy: Phaser.Sprite) => void\n    readonly collideWithObstacles: (sprite: Phaser.Sprite) => void\n}\n\nexport const PolicemanManager = (game: Phaser.Game): PolicemanManagerProps => {\n    const enemies = game.add.physicsGroup(Phaser.Physics.ARCADE);\n    const enemiesObj: EnemyObjProp = {}\n    for(let i = 0; i < POLICEMAN.count; i++) {\n        let policeman = new Policeman(\n            game\n        )\n        // this.policemen.push(policeman)\n        // this.enemies.add(policeman.sprite)\n        enemiesObj[policeman.playerId] = policeman\n    }\n    return {\n        getAllSprites: function() {\n            return Object.values(enemiesObj).map((enemy: Policeman) => enemy.sprite)\n        },\n        getAllActivePoliceman: function() {\n            return Object\n                .values(enemiesObj)\n                .filter(enemy => !enemy.isTouchedByCactus)\n                .map((enemy: Policeman) => enemy.sprite)\n        },\n        update: function() {\n            Object.values(enemiesObj).forEach((policeman: Policeman) => {\n                policeman.update()\n            })\n            // for (let name in enemiesObj) {\n            //     if (enemiesObj[name].enemy === null) {\n            //         enemiesObj[name] = null;\n            //         delete enemiesObj[name];\n            //     }\n            // }\n        },\n        getPolicemanPlayerId: function(sprite) {\n            return Object\n                .keys(enemiesObj)\n                .find((playedId: string) => \n                    enemiesObj[playedId].sprite === sprite\n                )\n        },\n\n        collidePerson: function(policeman) {\n            // const collidedPolicemanIds = store.getState().policeman.activeIds\n            const policemanId = this.getPolicemanPlayerId(policeman)\n            // let startTime = collidedPolicemanIds[policemanId].time\n            // if ((!startTime || Date.now() - startTime > TIMEOUT_COLLIDE_POLIMEN_CACTUS) && \n            // enemiesObj[policemanId].isTouchedByCactus) {\n            //     \n            //     enemiesObj[policemanId]\n            // }\n            // const policemanStore = store.getState().policeman\n            // if (policemanStore.activeIds[policemanId]) {\n            //     return ;\n            // }\n\n\n            const collideBefore = () => {\n                store.dispatch(collidePersonWithPoliceman({\n                    id: policemanId,\n                }))\n            }\n\n            const collideAfter = () => {\n                store.dispatch(removePolicemanFromCollided({\n                    id: policemanId,\n                }))\n            }\n\n            enemiesObj[policemanId].collideWithPerson()\n\n        },\n        collideCactus: function(policemanSprite) {\n            const playerId = this.getPolicemanPlayerId(policemanSprite)\n            enemiesObj[playerId].onCactusCollision()\n        },\n        collideWithObstacles: function(sprite) {\n            const playedId = this.getPolicemanPlayerId(sprite)\n            enemiesObj[playedId].collideWithObstacles()\n        }\n    }\n}","import autobind from 'autobind-decorator'\n\nimport { ENEMY_TYPES, ground } from '../constants/constants'\nimport Person from './Person'\nimport Enemy from './Enemy'\n\nimport store from '../store'\n\ntype SPEED = {\n    readonly min: number,\n    readonly max: number,\n}\n\ninterface PersonBaseProps {\n    readonly game: Phaser.Game\n    readonly x: number\n    readonly y?: number\n    readonly key: string\n    readonly speed: SPEED\n    readonly time_threshold: number\n    readonly velocity: {\n        readonly min: number,\n        readonly max: number,\n    }\n}\n\nexport default class PersonBase extends Person{\n    game: Phaser.Game\n    sprite: Phaser.Sprite\n    dir: number = Math.round(Math.random()) ? 1 : -1\n    velocity: number\n    animationRun: Phaser.Animation\n    timerChangingVelocity: number\n    props: PersonBaseProps\n\n    constructor(props: PersonBaseProps) {\n        super({\n            game: props.game,\n            x: props.x,\n            y: props.game.world.height - ground.height,\n            key: props.key,\n        })\n        this.game = props.game\n        this.props = {...props}\n        this.sprite.body.collideWorldBounds = true\n        this.velocity = this.game.rnd.between(props.speed.min, props.speed.max)\n        this.sprite.body.gravity.y = 300\n        this.timerChangingVelocity = Date.now()\n    }\n\n    public update() {\n        if (Date.now() - this.timerChangingVelocity > this.props.time_threshold) {\n            this.sprite.body.moves = true\n            this.timerChangingVelocity = Date.now()\n            this.dir = Math.round(Math.random()) ? 1 : -1\n            this.velocity = this.game.rnd.between(this.props.speed.min, this.props.speed.max)\n        }\n\n        this.sprite.scale.setTo(-this.dir * Math.abs(this.sprite.scale.x), this.sprite.scale.y)\n        this.sprite.body.velocity.x = this.velocity * this.dir\n\n        if ((this.sprite.body.x <= 0 && this.dir < 0) ||\n            (this.sprite.body.x >= this.game.world.width && this.dir > 0)) {\n            if (this.sprite.body.x <= 0) {\n                this.sprite.body.x = 0\n            }\n            else {\n                this.sprite.body.x = this.game.world.width\n            }\n            this.sprite.body.velocity.x = 0\n            this.dir *= -1\n            this.sprite.animations.stop('move', true)\n        }\n        else {\n            if (\n                this.sprite.animations.currentAnim.name !== 'move' ||\n                !this.sprite.animations.currentAnim.isPlaying\n            ) {\n                this.sprite.animations.play('move', (this.velocity < 15) ? this.props.velocity.min : this.props.velocity.max)\n            }\n        }\n    }\n\n    public collideWithObstacles() {\n        this.sprite.body.velocity.x = 0\n    }\n}","import autobind from 'autobind-decorator';\nimport store from '../store';\nimport { addCactus } from '../actions';\nimport { sampleSize, isDevelopment } from '../utils';\nimport { PubSub } from './Pubsub';\nimport { ground } from '../constants/constants';\n\n\ninterface CactusProps {\n    readonly game: Phaser.Game\n    readonly x: number\n    readonly y: number\n    readonly key?: string\n}\n\ninterface CactusProp extends Phaser.Sprite {\n    isKilled?: boolean\n}\n\nexport const CACTUS = {\n    width: 25,\n    height: 30,\n}\n\nconst CACTUS_COORDS = [\n    {x: 100, y: 200},\n    {x: 200, y: 100}, \n    {x: 300, y: 100}, \n    {x: 400, y: 100}, \n    {x: 500, y: 100}, \n    {x: 700, y: 100}, \n    {x: 1010, y: 100}, \n    {x: 1010, y: 230}, \n    {x: 1300, y: 170}, \n    {x: 2190, y: 170}, \n    {x: 2330, y: 170}, \n    {x: 2463, y: 170}, \n    {x: 2595, y: 170},  \n]\n\nexport class Cactus {\n    cactus: CactusProp\n\n    constructor({\n        game, \n        x, \n        y, \n        key = 'cactus'\n    }: CactusProps) {\n        this.cactus = game.add.sprite(\n            x,\n            y,\n            key\n        );\n        game.physics.arcade.enable(this.cactus);\n        this.cactus.width = CACTUS.width;\n        this.cactus.height = CACTUS.height;\n        this.cactus.body.immovable = true;\n        this.cactus.body.allowGravity = false;\n        this.cactus.body.collideWorldBounds = true;\n        this.cactus.body.onWorldBounds = new Phaser.Signal();\n        this.cactus.body.onWorldBounds.add(this.hitWorldBounds, this);\n        this.cactus.anchor.set(0.5, 1)\n    }\n\n    hitWorldBounds() {\n        this.cactus.destroy();\n    }\n}\n\nexport interface ThrowCactusProps {\n    readonly x:number, \n    readonly y:number, \n    readonly velocityX: number, \n    readonly angularVelocity: number\n}\n\n\nexport interface CactusHanlerProps {\n    readonly cactuses: Phaser.Group\n    readonly thrownCactuses: CactusProp[] \n    readonly aliveCactuses: () => Phaser.Sprite[]\n    readonly update: () => any\n    readonly instances: Cactus[]\n    readonly collideEnemyWithCactus: (cactus: CactusProp)=> any\n    readonly collidePersonWithCactus: (cactus: CactusProp) => any\n    readonly collideObstaclesWithCactus: (cactus: CactusProp) => any\n}\n\n\nexport const CactusHandler = (game: Phaser.Game): CactusHanlerProps => {\n    const cactuses = game.add.physicsGroup(Phaser.Physics.ARCADE);\n    const arrFromCoords = isDevelopment ? CACTUS_COORDS : sampleSize(CACTUS_COORDS, Math.floor(Math.random() * CACTUS_COORDS.length))\n    const instances: Cactus[] = []   \n    const thrownCactuses: CactusProp[] = [] \n    arrFromCoords.forEach((coord) => {\n        let instance = new Cactus({\n            game: game,\n            x: coord.x/*Math.floor(Math.random() * (game.world.width - 100)) + 100*/,\n            y: game.world.height - ground.height - coord.y,\n        })\n        instances.push(instance)\n    \n        cactuses.add(instance.cactus)\n    })\n\n\n    const throwCactus = (props: ThrowCactusProps) => {\n        const {\n            x, \n            y,\n            velocityX,\n            angularVelocity\n        } = props\n        if (!thrownCactuses.length) {\n            return ;\n        }\n        const cactus = thrownCactuses[thrownCactuses.length-1];\n        cactus.revive();\n        game.physics.arcade.enable(cactus);\n        cactus.body.enable = true\n        cactus.body.x = x;\n        cactus.body.y = y;\n        cactus.body.velocity.x = velocityX;\n        cactus.body.velocity.y = 0;\n        cactus.body.angularVelocity = angularVelocity;\n        cactus.body.allowGravity = true\n        cactus.body.gravity.y = 100\n    }\n\n    PubSub.subscribe(throwCactus)\n    return  {\n        instances,\n        thrownCactuses,\n        cactuses,\n        update: () => {\n            cactuses.forEachAlive((cactus: CactusProp) => {\n                game.debug.body(cactus);\n            }, this);\n            \n            cactuses.forEach((cactus: CactusProp) => {\n                if (!cactus.alive && cactus.isKilled){\n                    cactus.destroy();\n                }\n            }, this);\n        },\n        aliveCactuses: () => cactuses.getAll('isKilled', false || undefined),\n        collideEnemyWithCactus: (cactus) => {\n            thrownCactuses.pop()\n            cactus.destroy();\n            cactus.isKilled = true\n        },\n        collideObstaclesWithCactus: (cactus) => {\n            thrownCactuses.pop()\n            cactus.kill()\n            cactus.isKilled = true\n        },\n        collidePersonWithCactus: (cactus) => {\n            cactus.kill()\n            thrownCactuses.push(cactus)\n            store.dispatch(addCactus())\n        },\n    }\n}\n","import autobind from 'autobind-decorator'\nimport throttle from 'lodash.throttle'\n\nimport store from '../store'\n\nimport {\n    LayersIds, HANDS, HANDS_COORDS\n} from '../constants/constants'\n\nimport { throwCactus, changeMoney, reduceMood } from '../actions'\nimport Person from './Person';\nimport { getRandom } from '../utils';\n\nconst MIN_DISTANCE_TO_APROACH = 50\nconst PENALTY_AMOUNT = 50\nconst THROTTLE_TIME = 3000\n\ninterface HandsProps {\n    readonly game: Phaser.Game,\n    readonly x: number,\n    readonly y: number,\n}\n\nexport class Hands extends Person {\n    readonly game: Phaser.Game\n    tween: Phaser.Tween\n    tween2: Phaser.Tween\n    constructor( {\n        game, \n        x,\n        y\n    }: HandsProps) {\n        super({\n            game: game,\n            x: x,\n            y: game.world.height - y - 10,\n            key: LayersIds.hands\n        })\n\n        this.game = game\n\n        this.sprite.width = HANDS.width\n        this.sprite.height = HANDS.height\n        this.sprite.alpha = 0\n        this.sprite.body.immovable = true\n        this.sprite.body.moves = true\n        this.sprite.body.enable = true\n        this.update = throttle(this.update, THROTTLE_TIME)\n\n        this.tween = this.game.add.tween(this.sprite).to(\n            this.getTweenProps(true),\n            0, \n            Phaser.Easing.Linear.None, \n            true, \n            0, \n            -1, \n            true\n        )\n        \n        this.tween2 = this.game.add.tween(this.sprite).to(\n            this.getTweenProps(false),\n            0, \n            Phaser.Easing.Linear.None, \n            true, \n            0, \n            -1, \n            true\n        ) \n    \n    }\n\n    getTweenProps(isVisible: boolean) {\n        return (isVisible) ? { \n            alpha: 1,\n            y: this.sprite.y + 20,\n        } : { \n            alpha: 0,\n            y: this.sprite.y - 20,\n        }\n    }\n\n    changeVisibility(isVisible: boolean) {\n        if (isVisible) {\n            this.tween.resume()\n            this.tween2.pause()\n        } else {\n            this.tween.pause()\n            this.tween2.resume()\n        }\n    }\n\n    update() {\n        store.dispatch(changeMoney(-PENALTY_AMOUNT))\n    }\n}\n\nexport class HandsHandler {\n    readonly hands: Hands[]\n    readonly handsX: number[]\n    constructor(game: Phaser.Game) {\n        this.handsX = HANDS_COORDS.map(coord => coord[0])\n        this.hands = HANDS_COORDS.map((handCoord) => {\n            return new Hands({\n                game,\n                x: handCoord[0],\n                y: handCoord[1]\n            })\n        })\n        // this.update = throttle(this.update, 5000)\n    }\n\n    getHandsSprite() {\n        return this.hands.map((hand) => hand.sprite)\n    }\n\n    collidePerson(sprite: Phaser.Sprite) {\n        const hand = this.hands.find(hand => hand.sprite === sprite)\n        hand.update()\n    }\n\n    update(x: number) {\n        // const {personCoords} = state\n        const handIndexes = HANDS_COORDS.reduce((res, coord, i) => {\n            if (Math.abs(this.hands[i].sprite.centerX - x) < MIN_DISTANCE_TO_APROACH) \n                res.push(i)\n            return res    \n        }, []) \n\n        this.hands.forEach((_, i) => {\n            const index = handIndexes.find(handIndex => handIndex === i)\n            typeof(index)!=='undefined' && index >= 0 ? this.hands[i].changeVisibility(true): this.hands[i].changeVisibility(false)\n        })\n    }\n}\n","import { obstaclesKeys, ground } from \"../constants/constants\";\n\ninterface Coord {\n    readonly x: number\n    readonly y: number\n    readonly w: number\n    readonly h: number\n}\n\nconst coords = [\n    {x: 900, y: 70, w: 200, h: 30},\n    {x: 900, y: 200, w: 200, h: 30},\n    {x: 1172, y: 130, w: 20, h: 30},\n    {x: 1200, y: 240, w: 200, h: 30},\n    {x: 3440, y: 50, w: 100, h: 30},\n    {x: 3540, y: 80, w: 200, h: 30},\n    {x: 3740, y: 110, w: 150, h: 40},\n    {x: 3890, y: 150, w: 200, h: 30},\n    {x: 4090, y: 180, w: 200, h: 30},\n]\n\nconst imageObstacles = [\n{\n    key: obstaclesKeys.texture, \n    w: 300,\n    h: 40,\n    x: 1890,\n    y: 0,\n}, \n{\n    key: obstaclesKeys.texture, \n    w: 150,\n    h: 10,\n    x: 2100,\n    y: 100,\n},\n{\n    key: obstaclesKeys.vasya, \n    w: 300,\n    h: 40,\n    x: 1374,\n    y: 0,\n}]\n\nfunction renderObstacle(coord: Coord) {\n    let graphics: Phaser.Graphics = this.game.make.graphics()\n    graphics.beginFill(0x8C7272, 1)\n    graphics.drawRect(0, 0, coord.w, coord.h)\n    graphics.endFill()\n    graphics.boundsPadding = 0;\n\n    // Create an empty sprite as a container\n    let shapeSprite = this.game.add.sprite(\n        coord.x, \n        this.game.world.height - ground.height - coord.y - coord.h\n    );\n\n    // Add the graphics to the sprite as a child\n    shapeSprite.addChild(graphics);\n    this.group.add(shapeSprite)\n    // this.game.physics.enable(shapeSprite, Phaser.Physics.ARCADE);\n    shapeSprite.body.width = coord.w\n    shapeSprite.body.height = coord.h\n    shapeSprite.anchor.set(0, 0)\n    shapeSprite.body.collideWorldBounds = true;\n    shapeSprite.body.immovable = true\n}\n\n\n\nexport function render(params?: any) {\n    const group = this.game.add.physicsGroup(Phaser.Physics.ARCADE)\n    const r = renderObstacle.bind({game: this.game as Phaser.Game, group})\n    coords.forEach(coord => {\n        r(coord)\n    })\n\n    imageObstacles.forEach((imageObstacle) => {\n        const bmd = this.game.make.bitmapData(imageObstacle.w, imageObstacle.h)\n        bmd.copy(imageObstacle.key)\n        const sprite = this.game.add.sprite(imageObstacle.x, this.game.height - ground.height, imageObstacle.key)\n        sprite.anchor.set(0, 1)\n        group.add(sprite)\n        if (imageObstacle.key === obstaclesKeys.vasya) {\n            sprite.scale.set(0.24, 0.1)\n        }\n        sprite.body.immovable = true\n    })\n\n    return group\n}","\nimport store from '../store'\nimport PersonBase from './PersonBase';\nimport { LayersIds, ground, ENEMY_TYPES } from '../constants/constants';\n\n\nimport '../assets/clerk/clerk.png'\nimport { collideOfficial, changeMoney } from '../actions';\nimport Enemy from './Enemy';\n\ntype COORD = {\n    readonly x: number\n}\n\ntype SPEED = {\n    readonly min: number,\n    readonly max: number,\n}\n\nconst PASSER_COORDS: COORD[] = [{\n    x: 600,\n}, {\n    x: 800,\n}, {\n    x: 2000\n}, {\n    x: 700,\n}, {\n    x: 900,\n}, {\n    x: 1000\n}]\n\nconst PASSER_SPEED = {\n    min: 10,\n    max: 30\n}\n\nconst TIME_THRESHOLD = 2000\nconst PENALTY_IN_COLLISION_WITH_OFFICIAL = -5\n\nexport const OFFICIAL_SPRITE_INFO = {\n    setTo: [0.09, 0.085],\n    stand: {\n        frames: [2],\n        frameRate: 8,\n    }, \n    move: {\n        frames: [3, 2, 1, 0],\n        frameRate: 8\n    }\n}\n\nexport class Official extends Enemy {\n    game: Phaser.Game\n    sprite: Phaser.Sprite\n\n    constructor( \n        game: Phaser.Game, \n        coord: COORD,\n        speed: SPEED,\n        key: string\n    ) {\n        super({\n            // game: game,\n            // x: game.rnd.between(100, coord.x),\n            // y: game.world.height - ground.height,\n            // key: key,\n            // speed: speed,\n            // time_threshold: TIME_THRESHOLD,\n            // velocity: {\n            //     min: 5,\n            //     max: 8,\n            // }\n            game, \n            coord: {\n                x: game.rnd.between(100, coord.x)\n            }, \n            speed: {\n                min: speed.min,\n                max: speed.max,\n            }, \n            key,\n            spriteOptions: OFFICIAL_SPRITE_INFO,\n            type: ENEMY_TYPES.official,\n            time_threshold: TIME_THRESHOLD,\n            time_disabled: TIME_THRESHOLD,\n        })\n        \n    }\n\n    render() {\n\n    }\n}\n\n\nexport interface OfficialProps {\n    sprites: Phaser.Sprite[],\n    instances: Official[],\n    update: any,\n    collisionWithPerson: (sprite: Phaser.Sprite) => any\n    collideWithObstacles: (sprite: Phaser.Sprite) => any\n    collideCactus: (sprite: Phaser.Sprite) => any\n}\n\nexport const renderOfficials = (game: Phaser.Game): OfficialProps => {\n\n    const passers = PASSER_COORDS.map((PASSER_COORD) => {\n        return new Official(game, PASSER_COORD, PASSER_SPEED, LayersIds.clerk)\n    })\n\n    return {\n        sprites: passers.map((p) => p.sprite),\n        instances: passers,\n        update: () => passers.forEach((inst: Official) => inst.update()),\n        collisionWithPerson: (sprite) => {\n            const id = passers.findIndex(p => p.sprite === sprite)\n            const state = store.getState()\n            if (state.official.collided.indexOf(id) < 0) {\n                store.dispatch(collideOfficial(id))\n                store.dispatch(changeMoney(PENALTY_IN_COLLISION_WITH_OFFICIAL))\n            }\n        },\n        collideWithObstacles: function(sprite) {\n            const official = passers.find(p => p.sprite === sprite)\n            official.collideWithObstacles()\n        },\n        collideCactus: function(sprite) {\n            const official = passers.find(p => p.sprite === sprite)\n            official.onCactusCollision()\n        },\n    }\n} \n\n\n","import store, { State } from \"../store\";\nimport { COINS, LayersIds, STATES } from \"../constants/constants\";\nimport { isDevelopment } from \"../utils\";\n\nimport '../assets/smiles.png'\nimport '../assets/menu_bg.png'\nimport { startGame } from \"../actions\";\n\nclass FinalScreen {\n    game: Phaser.Game;\n    back: Phaser.Text;\n    state: State\n    assetsPath: string = './assets/'\n    heading: Phaser.Text\n    backWrapper: Phaser.Graphics\n    bg: Phaser.TileSprite\n    enterKey: Phaser.Key\n\n    preload() {\n        this.game.stage.backgroundColor = 'rgb(65, 75, 122)'\n        this.game.load.spritesheet(LayersIds.mood, `${this.assetsPath}smiles.png`, 203.2, 204, 5)\n        this.game.load.image(LayersIds.coin, `${this.assetsPath}one-coin.png`)\n        this.game.load.image('background',`${this.assetsPath}menu_bg.png`);\n    }\n\n    createCharacteristics() {\n        const money = this.state.score.money\n        const mood = this.state.mood.total\n        let moodTemplate = ''\n        let moodLevel;\n        if (mood < 40) {\n            moodTemplate = `But, you mood is rather poor at this momemt. \\nJust follow the next tips to boost your mind - try to meet more passers and touch them, they will inspire you. \\nTry to avoid all communications with policemen because they make you feel sad in this case \\nthrowing a cactus looks a good idea. Good luck!`\n            moodLevel = 'bad'\n        }\n        else if (mood < 80) {\n            moodTemplate = `Cheer up when something goes wrong :) \\nEvery day may not be good, but there’s something good in every day. \\nYou will feel better when you escape meetings with policeman and officials.`\n            moodLevel = 'good'\n        }\n        else {\n            moodTemplate = `You're a professional! Seems that you can overcome even more difficult missions.`\n            moodLevel = 'excellent'\n        }\n\n        let moneyTalk = ''\n        if (money < COINS.startSum) {\n            moneyTalk = `Good job! \\nYou earned ${money}, but that's not so much to invest this money to some business or any good deals. \\nThe thing is all clashes with police lead to irritation and mood reduction. \\nSo, please, try to avoid routine communication with officials and any kinds of clerks.`\n        }\n        else {\n            moneyTalk = `How did you do that! Unbelievable! You saved ${money} RUR from Government waste. \\nAnd that means you can invest it to the profitable business as an investment or in any good deals like building new schools ans kindegartens.`\n        }\n        return {\n            moodTemplate,\n            moneyTalk,\n            moodLevel\n        }    \n    }\n\n    create() {\n        this.game.world.setBounds(0, 0, this.game.width, this.game.height);\n        this.bg = this.game.add.tileSprite(0, 0, this.game.world.width * 5, this.game.world.height * 5, 'background');\n        this.bg.scale.set(0.3, 0.3)\n        this.bg.smoothed = true;\n        this.bg.alpha = 0.2\n        this.state = store.getState()\n        const statusGame = this.state.statusGame.status\n        const statusGameStatusMsg = this.state.statusGame.msg\n\n        let title = ''\n        let description = ''\n        switch(statusGame) {\n            case \"fail\":\n                title = 'Game Over, Man!'\n                description = `${statusGameStatusMsg} \\n You should try again, the most important thing is not to give up and \\ndefeat the damned corrupt! Good luck!`\n                break;\n            case \"end\":\n                title = 'Congratulations!'\n                description = 'That was hard but you did it!'\n                break;\n            default: \n                return ;        \n        }\n        const bar = this.game.add.graphics()\n        bar.beginFill(0x000000, 0.2)\n        bar.drawRect(0, 100, this.game.width, 100)\n\n\n        this.heading = this.game.add.text(\n            0,\n            0,\n            title, \n            {\n                fill: '#fff',\n                align: 'center',\n                wordWrapWidth: this.game.width * 0.7,\n                boundsAlignH: \"center\",\n                boundsAlignV: \"middle\", \n            },\n        )\n\n        // heading.anchor.set(0.5);\n\n        this.heading.setShadow(3, 3, 'rgba(0,0,0,0.5)', 2);\n            \n        this.heading.setTextBounds(0, 100, this.game.width, 100);    \n\n        const descriptionElement = this.game.add.text(\n            this.game.world.centerX ,\n            bar.getBounds().y + bar.getBounds().height + 10,\n            description, \n            {\n                font: 'bold 25px Arial',\n                fill: '#fff',\n                align: 'center',\n                wordWrapWidth: this.game.width * 0.7 ,\n            },\n        )\n\n        descriptionElement.lineSpacing = 5\n        descriptionElement.strokeThickness = 5;\n        descriptionElement.setShadow(2, 2, \"#333333\", 2, true, false);\n\n        descriptionElement.anchor.set(0.5, 0);\n         \n        const {y, height} = descriptionElement.getBounds()   \n        let offset = y + height\n        \n        if (statusGame !== 'fail') {\n            const characteristics = this.createCharacteristics()\n    \n            interface CharacteristicsMapping {\n                readonly [key: string]: string\n            }\n            const characteristicsMapping: CharacteristicsMapping = {\n                [LayersIds.mood]: characteristics.moodTemplate,\n                [LayersIds.coin]: characteristics.moneyTalk\n            }\n            \n            for(let key in characteristicsMapping) {\n                let results: Phaser.Group = this.game.add.group();\n                let icon: Phaser.Sprite;\n                if (key === LayersIds.mood) {\n                    icon = this.game.add.sprite(50, 50, LayersIds.mood);\n                    switch(characteristics.moodLevel) {\n                        case \"bad\":\n                            icon.frame = 4\n                        case \"good\":\n                            icon.frame = 0\n                        case \"excellent\":\n                            icon.frame = 2\n                        default:\n                            icon.frame = 0    \n                    }\n                    icon.width = 50\n                    icon.height = 50\n                }\n    \n                if (key === LayersIds.coin) {\n                    icon = this.game.add.sprite(50, 50, LayersIds.coin);\n                    icon.width = 50\n                    icon.height = 50\n                }\n    \n                // icon.anchor.set(0, 0.5);\n                const textObject = this.game.add.text(\n                    0,\n                    0,\n                    `${characteristicsMapping[key]}`,\n                    {\n                        font: `20px Arial`,\n                        fill: '#fff',\n                        wordWrap: true,\n                        wordWrapWidth: this.game.width * 0.6,\n                        align: 'left',\n                    }\n                );\n    \n                textObject.x = 110\n    \n                icon.centerY = textObject.centerY\n    \n                results.add(icon)\n                results.add(textObject)\n                offset += 40\n                results.y = offset;\n                offset +=  textObject.height\n                results.centerX = this.game.world.centerX\n            }\n        }\n\n        offset += 50\n\n        const validationButtonText = this.game.add.text(\n            0, \n            0,\n            'Press Enter or click on button below', \n            {\n                font: '19px Arial',\n                fill: '#fff',\n                align: 'center',\n                wordWrapWidth: this.game.width * 0.7 ,\n            },\n        )\n\n        validationButtonText.centerX = this.game.world.centerX\n        validationButtonText.y = offset\n\n        this.backWrapper = this.game.add.graphics()\n        this.backWrapper.beginFill(0xd70000, 0.9)\n        this.backWrapper.drawRect(this.game.world.centerX - 300/2, offset + 50, 300, 100);\n        \n\n        this.back = this.game.add\n        .text(\n            0,\n            0,\n            `Start again!`,\n            {\n                font: `28px Arial`,\n                fill: '#fff',\n                align: 'center',\n                fontWeight: 'bold',\n                boundsAlignH: \"center\",\n                boundsAlignV: \"middle\", \n                wordWrap: true, \n                wordWrapWidth: 200 \n            }\n        );\n        this.back.setTextBounds(this.game.world.centerX -  300/2, offset + 50, 300, 100)\n\n        // this.back.anchor.set(0.5)\n        \n        // this.back.anchor.setTo(0.5, 0.5);\n        // backWrapper.addChild(this.back);\n        // this.game.world.addChild(backWrapper);\n        // let backWrapper = this.game.add.graphics();\n        // backWrapper.beginFill(0x000000, 0.2);\n        // backWrapper.drawRect(this.game.world.centerX - this.back.centerX, this.game.world.height - 200, 200, 100);\n        // this.back.setTextBounds(100, 100, this.back.texture.frame.width, this.back.texture.frame.height)    \n        this.back.setShadow(-3, 3, 'rgba(0,0,0,0.2)', 0);\n\n        const grd = this.back.context.createLinearGradient(0, 0, this.back.width, this.back.height);\n\n        grd.addColorStop(0, '#FFD1AA');   \n        grd.addColorStop(1, '#D49A6A');\n\n        this.back.fill = grd\n        \n        this.game.input.onDown.add(this.handleClickBack, this);\n\n        this.enterKey = this.game.input.keyboard.addKey(Phaser.Keyboard.ENTER)\n    }\n\n    render() {\n        \n    }\n\n    handleClickBack() {\n        if (this.backWrapper.getBounds().contains(this.game.input.x, this.game.input.y)) {\n            this.game.input.onDown.remove(this.handleClickBack, this);\n            this.game.state.start(STATES.PreBoot, true, false);\n            return true;\n        }\n    }\n\n    update() {\n        if (this.enterKey.isDown) {\n            this.game.state.start(STATES.PreBoot, true, false);\n        }\n    }\n}\n\nexport default FinalScreen;","module.exports = __webpack_public_path__ + \"assets/smiles.png\";","module.exports = __webpack_public_path__ + \"assets/menu_bg.png\";","function rgResizeBody(containerNode: HTMLElement) {\n    const windowInnerHeight = window.innerHeight;\n    if (document.body.clientHeight > windowInnerHeight) {\n        document.body.style.height = windowInnerHeight + 'px';\n        document.documentElement.style.height = windowInnerHeight + 'px';\n    }\n\n    return [containerNode.clientWidth, containerNode.clientHeight];\n};\n\n\nexport {\n    rgResizeBody\n}","import { STATES } from \"../constants/constants\";\n\ninterface MainMenuInterface {\n    readonly text: string\n    readonly targetState: string\n}\n\nexport let mainMenu = [{\n    text: 'Start Game',\n    targetState: STATES.Game\n}, {\n    text: 'Guide',\n    targetState: STATES.Help\n}];\n\n// newGameMenu = [{\n//     text: 'Start a new game'\n// }, {\n//     text: 'Back',\n//     targetState: 'MainMenu'\n// }];\n\n// loadGameMenu = [{\n//     text: 'Load a saved game'\n// }, {\n//     text: 'Back',\n//     targetState: 'MainMenu'\n// }];\n\n\n\nconst config = {\n    textStyle: {\n        font: \"24px Arial\",\n        fill: \"#888\"\n    },\n    textStyleFocused: {\n        font: '30px Arial',\n        fill: '#000',\n        backgroundColor: '#888'\n    }\n};\n\n\nexport const MenuWrapper = function() {\n    return new Menu('Menu:', mainMenu);\n}\n\nexport class Menu extends Phaser.State {\n    focused: number = 0\n    keyboard: Phaser.Keyboard\n    controls: any\n    heading: string\n    options: MainMenuInterface[]\n    menuItems: MenuItem[]\n    constructor(heading: string, options: MainMenuInterface[]) {\n        super();\n\n        this.heading = heading;\n        this.options = options;\n    }\n\n    create() {\n        this.focused = 0;\n\n        this.keyboard = this.game.input.keyboard;\n\n        this.controls = this.keyboard.addKeys({\n            up: Phaser.Keyboard.UP,\n            down: Phaser.Keyboard.DOWN,\n            left: Phaser.Keyboard.LEFT,\n            right: Phaser.Keyboard.RIGHT,\n            interact: Phaser.Keyboard.ENTER\n        });\n\n        this.game.add\n            .text(this.game.world.centerX, this.game.world.centerY - 100, this.heading, config.textStyle)\n            .anchor.set(0.5);\n        \n        this.menuItems = [];\n\n        for (let i = 0; i < this.options.length; i++) {\n            let options,\n                menuItem;\n\n            options = this.options[i];\n\n            menuItem = new MenuItem(this.game, this.game.world.centerX, this.game.world.centerY + (((i + 1) * 70)), options.text, options.targetState);\n\n            this.menuItems.push(menuItem);\n        }\n\n        this.menuItems[this.focused].focus(true);\n\n        this.controls.interact.onDown.add(this.activateFocusedItem, this);\n        this.controls.up.onDown.add(this.selectItem, this, 0, -1);\n        this.controls.down.onDown.add(this.selectItem, this, 0, 1);\n    }\n\n    selectItem(key: any, delta: number) {\n        this.menuItems[this.focused].focus(false);\n\n        this.focused += delta;\n\n        if (this.focused >= this.menuItems.length) {\n            this.focused -= this.menuItems.length;\n        } else if (this.focused < 0) {\n            this.focused += this.menuItems.length;\n        }\n\n        this.menuItems[this.focused].focus(true);\n    }\n\n    activateFocusedItem() {\n        this.menuItems[this.focused].navigate();\n    }\n}\n\nclass MenuItem extends Phaser.Text {\n    focused: boolean\n    targetState: string\n    options: MainMenuInterface[]\n    baseText: string\n\n    constructor(\n        game: Phaser.Game, \n        x: number, \n        y: number, \n        text: string, \n        targetState: string, \n        focused = false\n    ) {\n        super(game, x, y, text, config.textStyle);\n\n        this.baseText = text;\n        this.targetState = targetState;\n        this.focused = focused;\n\n        this.game.world.addChild(this);\n        this.anchor.set(0.5)\n    }\n\n    focus(focused: boolean) {\n        if (focused) {\n            this.focused = true;\n            this.setStyle(config.textStyleFocused);\n        } else {\n            this.focused = false;\n            this.setStyle(config.textStyle);\n        }\n    }\n\n    navigate() {\n        if (this.targetState) {\n            this.game.state.start(this.targetState);\n        }\n    }\n\n    select() {\n        this.text = this.baseText \n    }\n}\n","import '../assets/back-arrow.png'\nimport '../assets/helpMoveDesktop.png'\nimport { STATES, LayersIds } from '../constants/constants';\n\nclass Help extends Phaser.State{\n    back: Phaser.Text\n    button: Phaser.Button\n    assetsPath: string = './assets/'\n\n    preload() {\n        this.game.stage.backgroundColor = '#000';\n        this.game.load.image('back', `${this.assetsPath}back-arrow.png`)\n        this.game.load.image('helpMoveDesktop', `${this.assetsPath}helpMoveDesktop.png`)\n    }\n\n    create() {\n        const backKey = this.game.input.keyboard.addKey(Phaser.Keyboard.LEFT);\n        backKey.onDown.add(this.handleClickBack, this);\n        const data = [\n            {\n                image:  this.game.make.sprite(0, 0, 'helpMoveDesktop'),\n                text: 'Up - jump, Left, Right - direction',\n                options: {\n                    image: {\n                        width: 250,\n                        height: 70,\n                    },\n                    text: {\n                        boundsAlignH: \"center\", \n                        boundsAlignV: \"middle\"\n                    }\n                }\n            }, \n            {\n                image: this.game.make.sprite(0, 0, LayersIds.cactus), \n                text: 'PRESS \"A\" to throw a cactus. This item used for protection player against cops',\n                options: {\n                    image: {\n                        width: 40,\n                        height: 40,\n                    },\n                    text: {\n                        boundsAlignH: \"center\", \n                        boundsAlignV: \"middle\"\n                    }\n                }\n            }, \n            {\n                image: this.game.make.sprite(0, 0, LayersIds.coin),\n                text: 'Money that you need to save as much as you can',\n                options: {\n                    image: {\n                        width: 40,\n                        height: 40,\n                    },\n                    text: {\n                        boundsAlignH: \"center\", \n                        boundsAlignV: \"middle\"\n                    }\n                }\n            },\n            {\n                image: this.game.make.sprite(0, 0, LayersIds.loading),\n                text: 'Stay positive otherwise the system will kill you',\n                options: {\n                    image: {\n                        width: 70,\n                        height: 30,\n                    },\n                    text: {\n                        boundsAlignH: \"center\", \n                        boundsAlignV: \"middle\"\n                    }\n                }\n            }\n        ]\n\n\n        const horizontalOffset = 100\n        \n        this.button = this.game.add.button(\n            100, this.game.height / 15, 'back', this.handleClickBack, this, 2, 1, 0\n        );\n\n        this.back = this.game.add.text(\n            140,\n            this.game.height / 15,\n            'Back',\n            {\n                fill: '#fff',\n                align: 'center',\n            }\n        );\n\n\n        const commonGroup = this.game.add.group();\n        let verticalOffset = 0;\n        const spacing = this.game.height / 15 < 20 ? 20 : this.game.height / 15;\n        const fontSize = Math.min(22, Math.round(this.game.height / 19));\n        data.forEach((item, i) => {\n            let itemGroup = this.game.add.group() \n            const textObject = this.game.add.text(\n                horizontalOffset,\n                verticalOffset,\n                `${item.text}.`,\n                {\n                    font: `${fontSize}px Arial`,\n                    fill: '#fff',\n                    wordWrap: true,\n                    wordWrapWidth: this.game.width - horizontalOffset * 2,\n                    ...item.options.text,\n                }\n            );\n            itemGroup.height = 100\n            this.game.add.existing(item.image)\n            item.image.width = item.options.image.width\n            item.image.height = item.options.image.height\n            textObject.anchor.set(0, 0.5)\n            textObject.y = itemGroup.centerY\n            textObject.position.x = item.image.width + 50\n            item.image.anchor.set(0, 0.5)\n            item.image.y = itemGroup.centerY\n            itemGroup.add(item.image)\n            itemGroup.add(textObject);\n            verticalOffset += textObject.height + spacing;\n            itemGroup.y = verticalOffset\n            commonGroup.add(itemGroup)\n        });\n\n        commonGroup.width = 700\n        commonGroup.x = this.game.world.centerX - (commonGroup.width * 0.5);\n        commonGroup.y = this.game.world.centerY - (commonGroup.height* 0.5);\n\n        this.game.input.onDown.add(this.handleClickBack, this);\n    }\n\n    handleClickBack() {\n        this.state.start(STATES.Menu, true, false);\n    }\n}\n\nexport default Help;","module.exports = __webpack_public_path__ + \"assets/back-arrow.png\";","module.exports = __webpack_public_path__ + \"assets/helpMoveDesktop.png\";"],"sourceRoot":""}