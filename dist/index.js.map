{"version":3,"sources":["webpack:///./src/constants/constants.ts","webpack:///./src/store/index.ts","webpack:///./src/types/types.ts","webpack:///./src/actions/index.ts","webpack:///./src/utils/index.ts","webpack:///./src/states/Person.ts","webpack:///./src/states/Pubsub.ts","webpack:///./src/states/Passer.ts","webpack:///./src/states/PersonBase.ts","webpack:///./src/assets/clerk/clerk.png","webpack:///./src/index.ts","webpack:///./src/states/Boot.ts","webpack:///./src/utils/helpers.ts","webpack:///./src/assets/loading.png","webpack:///./src/assets/buildings/big_school.png","webpack:///./src/assets/buildings/innovation_house.png","webpack:///./src/assets/buildings/ministerstvo.png","webpack:///./src/assets/buildings/zakupki_and_tenderi.png","webpack:///./src/assets/buildings/buildings.png","webpack:///./src/assets/buildings/buildings.json","webpack:///./src/assets/player.png","webpack:///./src/assets/hands/raised_hands.png","webpack:///./src/assets/one-coin.png","webpack:///./src/assets/ground.png","webpack:///./src/assets/cactuses.png","webpack:///./src/assets/clouds/clouds.png","webpack:///./src/assets/policeman/policeman.png","webpack:///./src/assets/passers/kindpasser.png","webpack:///./src/assets/passers/kindpasser_green.png","webpack:///./src/assets/passers/pupil.png","webpack:///./src/assets/passers/sentsov.png","webpack:///./src/assets/super_mario.png","webpack:///./src/assets/donation.png","webpack:///./src/assets/obstacles.png","webpack:///./src/assets/obstacles/grey_texture.png","webpack:///./src/assets/obstacles/vasya.png","webpack:///./src/assets/test_level2.json","webpack:///./src/states/Game.ts","webpack:///./src/states/FBK.ts","webpack:///./src/reducers/policeman.ts","webpack:///./src/reducers/enemy.ts","webpack:///./src/reducers/mood.ts","webpack:///./src/reducers/score.ts","webpack:///./src/reducers/official.ts","webpack:///./src/reducers/passer.ts","webpack:///./src/reducers/events.ts","webpack:///./src/reducers/final.ts","webpack:///./src/states/Score.ts","webpack:///./src/states/Coins.ts","webpack:///./src/states/Mood.ts","webpack:///./src/states/RangeComponent.js","webpack:///./src/states/Policeman.ts","webpack:///./src/states/Enemy.ts","webpack:///./src/states/Cactus.ts","webpack:///./src/states/Hands.ts","webpack:///./src/states/Obstacles.ts","webpack:///./src/states/Official.ts","webpack:///./src/states/FinalScreen.ts","webpack:///./src/assets/smiles.png","webpack:///./src/assets/menu_bg.png","webpack:///./src/utils/sizes.ts","webpack:///./src/states/Menu.ts","webpack:///./src/states/Help.ts","webpack:///./src/assets/back-arrow.png","webpack:///./src/assets/helpMoveDesktop.png"],"names":["helpers_1","__webpack_require__","utils_1","exports","COINS","startSum","PERSON","width","height","speed","velocityX","velocityY","tweenSettings","run","frames","frameRate","jump","stand","RANGE","backgroundColor","ground","ENEMIES","count","ENEMY_TYPES","DEACTIVATE_TIME_FOR_COLLIDE_PERSON_POLICEMAN","STATES","buildingIdsType","strEnumHelper","buildingIdsKeys","Object","keys","map","key","join","typesBuiding","school","innovation","ministerstvo","zakupki_and_tenderi","orderBuidings","BUIDING_COORDS","position","x","scale","y","MOOD","step","LayersIds","obstaclesKeys","passerHeights","passersConstants","usual-1","setTo","getRandomValueFromArray","move","reverse","usual-2","sentsov","pupil","passersTypes","passers","FAIL_MSG","mood","money","HANDS","HANDS_COORDS","redux_1","policeman_1","__importDefault","enemy_1","mood_1","score_1","official_1","passer_1","events_1","final_1","rootReducer","combineReducers","policeman","default","enemy","score","official","events","statusGame","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","PERSON_POLICEMAN_COLLIDE","PERSON_POLICEMAN_REMOVE","ENEMY_COLLIDE","CHANGE_MOOD","REDUCE_MOOD","UPDATE_SCORE","UPDATE_MONEY","ADD_CACTUS","THROW_CACTUS","COLLIDE_POLICEMAN_CACTUS","GAME_OVER","COLLIDE_OFFICIAL","COLLIDE_PASSER","ADD_ENEMY","RENDER_CROWD","HAPPY_END","TYPES","__importStar","collidePersonWithPoliceman","action","type","id","removePolicemanFromCollided","addCactus","addEnemy","enemyType","playerId","throwCactus","changeMoney","amount","renderCrowd","reduceMood","cause","changeMood","incr","gameOver","msg","gameEnd","collideOfficial","collidePasser","abc","getChar","Math","round","random","length","getString","result","i","generatorRandomString","idsForEnemies","[object Object]","indexOf","push","this","getId","generatorId","get","name","getRandom","Boolean","deepFlatten","arr","concat","v","Array","isArray","floor","sampleSize","n","m","slice","isDevelopment","process","env","DEVELOPMENT","utils","centerGameObjects","objects","forEach","object","anchor","g","game","sprite","add","existing","physics","arcade","enable","PubSub","subscribers","fn","args","subscriber","call","prototype","apply","PubSubFunction","store_1","PersonBase_1","constants_1","actions_1","PASSER_SPEED","min","max","TIME_THRESHOLD","Passer","coord","passerConfig","time_threshold","super","rnd","between","world","velocity","set","animations","animationRun","play","debug","body","renderPassers","passerInstances","passer","instances","sprites","p","update","inst","collisionWithPerson","instance","find","state","getState","collided","dispatch","collideWithObstacles","CrowdHandler","isRendered","render","passerKey","subscribe","console","log","Person_1","props","dir","assign","collideWorldBounds","gravity","timerChangingVelocity","Date","now","moves","abs","stop","currentAnim","isPlaying","module","Boot_1","Game_1","FinalScreen_1","sizes_1","Menu_1","Help_1","onload","gameWidth","gameHeight","className","containerNode","document","querySelector","rgResizeBody","getSizes","Phaser","Game","parent","antialias","renderer","CANVAS","MenuWrapper","start","onresize","State","assetsPath","load","image","Boot","stage","loadingBar","centerX","logo","status","text","fill","setPreloadSprite","atlasJSONHash","spritesheet","tilemap","Tilemap","TILED_JSON","texture","vasya","setText","o","reduce","res","create","phaser_ce_1","FBK_1","Score_1","Policeman_1","Cactus_1","Hands_1","Obstacles_1","Official_1","Passer_1","listBuidingsSprite","cloudsSprite","tileSprite","smoothed","autoScroll","graphics","make","beginFill","drawRect","endFill","boundsPadding","addChild","immovable","buildingInfo","building","Polygon","Point","obstacles","heightInPixels","addTilesetImage","ladder","createLayer","setCollision","scrollFactorY","scrollFactorX","scrollY","fixedToCamera","coords","donation","physicsGroup","Physics","ARCADE","startSystem","resize","createLadder","createClouds","createGround","createBuidings","createObstacles","createFinalPoints","handsHandler","HandsHandler","person","officials","renderOfficials","cactusHandler","CactusHandler","policemanWatcher","PolicemanManager","crowd","collide","overlap","collideFinalPoints","getAllActivePoliceman","_","collidePerson","collideWithEnemy","getAllSprites","aliveCactuses","cactus","collidePersonWithCactus","thrownCactuses","collideCactus","collidePolicemanWithCactus","collideObstaclesWithCactus","meetCrowd","endJumping","getHandsSprite","handSprite","collideWithOfficials","collideWithPassers","lodash_once_1","autobind_decorator_1","Pubsub_1","COUNT_JUMPING_TRIALS","FBK","isTouchedEnemy","cactuses","isJumping","facing","direction","countJumps","initiateKeyboardEvents","up","input","keyboard","addKey","Keyboard","UP","down","DOWN","left","LEFT","right","RIGHT","a","A","d","D","time","setSize","animationsRunRight","animationsJump","animationsStand","camera","follow","collideProps","addDisabledAnimation","deactivateForTime","timer","loop","activate","tween","to","alpha","Easing","Linear","None","finishCollision","cursors","player","jumpButton","isDown","touching","onFloor","frame","justDown","endAnimation","remove","publish","worldPosition","angularVelocity","__decorate","lodash_omit_1","defaultState","activeIds","collide_id_with_cactus","types_1","enemies","total","diff","Coins_1","Mood_1","Score","group","coins","cactusGroup","cactusImg","cactusesText","font","updateScore","toString","killAll","Coins","coinImage","label","String","align","RangeComponent_1","colors","10","20","30","40","50","60","70","80","90","100","LIMIT_MOOD","Mood","moodValue","bg","color","bar","animationDuration","flipped","isFixedToCamera","barSpriteTween","barSprite","setPercent","foundPercentage","filter","Number","isNaN","setBarColor","HealthBar","providedConfig","setupConfiguration","setPosition","config","drawBackground","drawHealthBar","setFixedToCamera","constructor","mergeWithDefaultConfiguration","newConfig","mergeObjetcs","targetObj","newObj","e","bmd","bitmapData","ctx","fillStyle","beginPath","rect","bgSprite","undefined","newValue","newWidth","setWidth","newColor","currentRGBColor","getPixelRGB","newRGBColor","hex","replace","r","b","exec","parseInt","hexToRgb","replaceRGB","setAnchor","xAnchor","yAnchor","kill","Enemy_1","POLICEMAN","rangeX","speed_min","speed_max","time_disabled","POLICEMAN_SPRITE_INFO","Policeman","spriteOptions","enemiesObj","values","isTouchedByCactus","getPolicemanPlayerId","playedId","policemanId","collideWithPerson","policemanSprite","onCactusCollision","isCollidedWithPerson","deactivateForTheTime","cbBefore","cbAfter","CACTUS","CACTUS_COORDS","Cactus","allowGravity","onWorldBounds","Signal","hitWorldBounds","destroy","revive","forEachAlive","getAll","pop","isKilled","lodash_throttle_1","MIN_DISTANCE_TO_APROACH","PENALTY_AMOUNT","THROTTLE_TIME","Hands","getTweenProps","tween2","isVisible","resume","pause","handsX","hands","handCoord","hand","handIndexes","index","handIndex","changeVisibility","w","h","imageObstacles","params","shapeSprite","bind","imageObstacle","copy","PASSER_COORDS","Official","PASSER_COORD","findIndex","moodLevel","moodTemplate","moneyTalk","setBounds","statusGameStatusMsg","title","description","heading","wordWrapWidth","boundsAlignH","boundsAlignV","setShadow","setTextBounds","descriptionElement","getBounds","lineSpacing","strokeThickness","characteristics","createCharacteristics","characteristicsMapping","coin","offset","icon","results","textObject","wordWrap","centerY","backWrapper","back","fontWeight","grd","context","createLinearGradient","addColorStop","onDown","handleClickBack","contains","windowInnerHeight","innerHeight","clientHeight","style","documentElement","clientWidth","mainMenu","targetState","textStyle","textStyleFocused","Menu","options","focused","controls","addKeys","interact","ENTER","menuItems","menuItem","MenuItem","focus","activateFocusedItem","selectItem","delta","navigate","Text","baseText","setStyle","data","button","commonGroup","verticalOffset","spacing","fontSize","item","itemGroup","horizontalOffset"],"mappings":"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","file":"index.js","sourcesContent":["import { strEnumHelper } from \"../utils/helpers\"\nimport { getRandomValueFromArray } from \"../utils\";\n\nexport const COINS = {\n    startSum: 1000\n}\n\nexport const PERSON = {\n    width: 70,\n    height: 110,\n    speed: 400,\n    velocityX: 200,\n    velocityY: 900,\n    tweenSettings: {\n        'run': {\n            frames: [8, 9, 10, 11],\n            frameRate: 10\n        },\n        'jump': {\n            frames: [4],\n            frameRate: 1\n        },\n        'stand': {\n            frames: [0],\n            frameRate: 1\n        },\n    }\n}\n\n\nexport const RANGE = [0, 1000]\n\nexport const backgroundColor = 'rgba(85, 154, 198, 30)'\nexport const ground = {\n    width: 4300,\n    height: 48\n}\n\nexport const ENEMIES = {\n    count: 10,\n}\n\nexport const enum ENEMY_TYPES {\n    fsb = 'fsb',\n    official = 'official',\n    gangster = 'gangster',\n    prosecutor = 'prosecutor',\n    policeman = 'policeman',\n}\n\nexport const DEACTIVATE_TIME_FOR_COLLIDE_PERSON_POLICEMAN = 2000\n// export const ENEMY = {\n//     width: 30,\n//     height: 90,\n//     speed_min: 0,\n//     speed_max: 200,\n//     speed: 200,\n//     time_threshold: 2000,\n//     time_disabled: 3000,\n// }\n\n\nexport const enum STATES {\n    Game = 'Game',\n    Finish = 'Finish',\n    PreBoot = 'PreBoot',\n    Boot = 'Boot',\n    Preload = 'Preload',\n    Help = 'Help',\n    Menu = 'Menu',\n}\n\n\nexport const buildingIdsType = strEnumHelper(['school', 'innovation', 'ministerstvo', 'zakupki_and_tenderi'])\n\nexport type buildingIdsType = keyof typeof buildingIdsType\nexport const buildingIdsKeys = Object.keys(buildingIdsType).map((key: buildingIdsType) => buildingIdsType[key]).join(',')\n\nexport type buildingIdsInterface = {readonly [key in buildingIdsType]: any}\n\nexport const typesBuiding = {\n    'school': 'big_school.png',\n    'innovation': 'innovation_house.png',\n    'ministerstvo': 'ministerstvo.png',\n    'zakupki_and_tenderi': 'zakupki_and_tenderi.png',\n}\n\nexport const orderBuidings: buildingIdsType[] = [\"ministerstvo\", \"innovation\", \"zakupki_and_tenderi\", \"school\"]\n\nexport const BUIDING_COORDS: buildingIdsInterface = {\n    'ministerstvo': {\n        position: {\n            x: 100,\n        },\n        scale: {\n            x: 0,\n            y: 1,\n        }\n    },\n    'innovation': {\n        position: {\n            x: 1100,\n        },\n        scale: {\n            x: 0,\n            y: 1,\n        }\n    },\n    'zakupki_and_tenderi': {\n        position: {\n            x: 2000\n        },\n        scale: {\n            x: 0,\n            y: 1,\n        }\n    },\n    'school': {\n        position: {\n            x: 3000,\n        },\n        scale: {\n            x: 0,\n            y: 1,\n        }\n    }\n}\n\nexport const MOOD = {\n    step : 10,\n}\n\nexport const enum LayersIds {\n    person = 'person',\n    tilemap = 'tilemap',\n    tiles = 'tiles',\n    coin = 'coin',\n    enemy = 'enemy',\n    ground = 'ground',\n    cactus = 'cactus',\n    clouds = 'clouds',\n    policeman = 'policeman',\n    hands = 'hands',\n    clerk = 'clerk',\n    passer = 'passer',\n    // obstacles = 'obstacles',\n    donation = 'donation',\n    mood = 'mood',\n    loading = 'loading',\n    background = 'background',\n}\n\nexport enum obstaclesKeys {\n    vasya = 'obstacles_vasya',\n    texture = 'obstacles_texture'\n}\n\n\nconst TILE = {\n    x: 16,\n    y: 16\n}\n\nexport interface PasserConstantOptions {\n    setTo: number[]\n    stand: {\n        frames: number[],\n        frameRate: number\n    },\n    move: {\n        frames: number[],\n        frameRate: number\n    }\n}\n\nexport type PasserConstantType = {\n    [k in string]: PasserConstantOptions\n} \n\nconst passerHeights = [0.1, 0.11, 0.101, 0.115]\n\nexport const passersConstants: PasserConstantType = {\n   'usual-1': {\n       setTo: [0.11, passerHeights[getRandomValueFromArray(passerHeights)]],\n       stand: {\n           frames: [8],\n           frameRate: 1,\n       }, \n       move: {\n           frames: [0, 1, 2, 3, 4, 5, 6].reverse(),\n           frameRate: 8\n       }\n   },\n   'usual-2': {\n        setTo: [0.1, 0.1],\n        stand: {\n            frames: [1],\n            frameRate: 1,\n        }, \n        move: {\n            frames: [0, 1, 2, 3, 4, 5, 6, 7].reverse(),\n            frameRate: 8\n        }  \n   },\n   'sentsov': {\n        setTo: [0.1, 0.1],\n        stand: {\n            frames: [1],\n            frameRate: 1,\n        }, \n        move: {\n            frames: [0,1,2,3,4,5,6,7].reverse(),\n            frameRate: 8\n        } \n   },\n   'pupil': {\n        setTo: [0.09, 0.085],\n        stand: {\n            frames: [2],\n            frameRate: 1,\n        }, \n        move: {\n            frames: [4,5,6,7, 0, 1, 2, 3].reverse(),\n            frameRate: 8\n        } \n   }\n}\n\nexport const passersTypes = strEnumHelper(Object.keys(passersConstants))\n\nexport type passersIdsTypes = keyof typeof passersTypes\n\n\n\nexport type PassersKeys = {\n    readonly key: passersIdsTypes,\n    readonly count: number,\n}\n\nexport const passers: PassersKeys[] = [\n    {key: 'usual-1', count: 1}, \n    {key: 'usual-2', count: 1}, \n    {key: 'sentsov', count: 1}, \n    {key: 'pupil', count: 10}\n]\n\nexport const FAIL_MSG = {\n    mood: 'You are not gonna be in a good mood at this moment! Will try tomorrow!)',\n    money: 'You are out of money!'\n}\n\nexport const HANDS = {\n    width: 60,\n    height: 80\n} \n\nexport const HANDS_COORDS = [[1230, 130], [2161, 200], [735, 200]]","import {\n    createStore,\n    combineReducers\n} from 'redux'\n\nimport policeman, { PolicemanState } from '../reducers/policeman'\nimport enemy, { EnemyState } from '../reducers/enemy'\nimport mood, { MoodState } from '../reducers/mood'\nimport score, { ScoreState } from '../reducers/score'\nimport official, { OfficialState } from '../reducers/official'\nimport passers, { PasserState } from '../reducers/passer'\nimport events, { EventsState } from '../reducers/events'\nimport statusGame, { FinalState } from '../reducers/final'\n\nexport interface State {\n    readonly policeman: PolicemanState,\n    readonly enemy: EnemyState,\n    readonly mood: MoodState,\n    readonly score: ScoreState,\n    readonly official: OfficialState,\n    readonly passers: PasserState,\n    readonly events: EventsState,\n    readonly statusGame: FinalState,\n}\n\nconst rootReducer = combineReducers<State>({\n    policeman,\n    enemy,\n    mood,\n    score,\n    official,\n    passers,\n    events,\n    statusGame,\n});\n\nconst store = createStore(\n    rootReducer,\n    (window as any).__REDUX_DEVTOOLS_EXTENSION__ && (window as any).__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nexport default store","export const PERSON_POLICEMAN_COLLIDE = 'PERSON_POLICEMAN_COLLIDE'\nexport const PERSON_POLICEMAN_REMOVE = 'PERSON_POLICEMAN_REMOVE'\n\nexport const ENEMY_COLLIDE = 'ENEMY_COLLIDE';\n\nexport const CHANGE_MOOD = 'CHANGE_MOOD'\nexport const REDUCE_MOOD = 'REDUCE_MOOD'\n\nexport const UPDATE_SCORE = 'UPDATE_SCORE'\nexport const UPDATE_MONEY = 'UPDATE_MONEY'\n\n\nexport const ADD_CACTUS = 'ADD_CACTUS'\nexport const THROW_CACTUS = 'THROW_CACTUS'\n\nexport const COLLIDE_POLICEMAN_CACTUS = 'COLLIDE_POLICEMAN_CACTUS'\n\nexport const GAME_OVER = 'GAME_OVER'\n\nexport const COLLIDE_OFFICIAL = 'COLLIDE_OFFICIAL'\nexport const COLLIDE_PASSER = 'COLLIDE_PASSER'\n\nexport const ADD_ENEMY = 'ADD_ENEMY';\n\nexport const RENDER_CROWD = 'RENDER_CROWD'\n\nexport const HAPPY_END = 'HAPPY_END'","// Actions\nimport * as TYPES from '../types/types';\nimport { passersIdsTypes, ENEMY_TYPES } from '../constants/constants';\n\ntype CollidePersonWithPolicemanAction = {\n    id: string\n}\n\nexport function collidePersonWithPoliceman(action: CollidePersonWithPolicemanAction) {\n    return {\n        type: TYPES.PERSON_POLICEMAN_COLLIDE,\n        id: action.id,\n    };\n}\n\nexport function removePolicemanFromCollided(action: CollidePersonWithPolicemanAction) {\n    return {\n        type: TYPES.PERSON_POLICEMAN_REMOVE,\n        id: action.id\n    };\n}\n\nexport function addCactus() {\n    return {\n        type: TYPES.ADD_CACTUS\n    }\n}\n\ntype AddEnemyAction = {\n    readonly playerId: string,\n    readonly type: ENEMY_TYPES\n}\n\nexport function addEnemy(action: AddEnemyAction) {\n    return {\n        type: TYPES.ADD_ENEMY,\n        enemyType: action.type,\n        playerId: action.playerId\n    }\n}\n\nexport function throwCactus() {\n    return {\n        type: TYPES.THROW_CACTUS\n    }\n}\n\nexport function changeMoney(amount: number) {\n    return {\n        type: TYPES.UPDATE_MONEY,\n        amount\n    }        \n}\n\nexport function renderCrowd() {\n    return {\n        type: TYPES.RENDER_CROWD\n    }\n}\n\n// export function collidePersonWithEnemy(action) {\n//     return {\n//         type: TYPES.ENEMY_COLLIDE,\n//         type: action.type\n//     }\n// }\n\ninterface ReduceModeAction {\n    readonly cause: string\n}\n\nexport function reduceMood(action: ReduceModeAction) {\n    return {\n        type: TYPES.REDUCE_MOOD,\n        cause: action.cause\n    }\n}\n\ninterface ChangeMoodAction {\n    readonly incr: number\n}\n\nexport function changeMood(action: ChangeMoodAction) {\n    return {\n        type: TYPES.CHANGE_MOOD,\n        incr: action.incr\n    }\n}\n\nexport interface GameOverAction {\n    readonly msg: string\n}\n\nexport function gameOver(action: GameOverAction) {\n    return {\n        type: TYPES.GAME_OVER,\n        msg: action.msg\n    }\n}\n\n\nexport function gameEnd() {\n    return {\n        type: TYPES.HAPPY_END\n    }\n}\n\nexport function collideOfficial(id: number) {\n   return {\n       type: TYPES.COLLIDE_OFFICIAL,\n       id\n   }     \n}\n\nexport function collidePasser(id: passersIdsTypes) {\n    return {\n        type: TYPES.COLLIDE_PASSER,\n        id\n    }\n}","const abc = 'sdkfjhskdf34234623V4sdfjgh234234JG3eu247y237RKWRG3U2YTGKUW7R234TGqwmjhegmqjrgea,jthlei485y3i4yr';\n\nconst getChar = () => abc[Math.round(Math.random()*(abc.length-1))];\n\nexport function getString(length:number = 8): string {\n\n    let result = '';\n\n    for (let i = 0; i < length; i++){\n        result += getChar();\n    }\n\n    return result;\n}\n\n\nexport function generatorRandomString() {\n    let idsForEnemies: string[] = [];\n\n    return {\n        getId() {\n            let id: string = getString();\n\n            if (idsForEnemies.indexOf(id) >= 0) {\n                this.getId();\n            }\n            else {\n                idsForEnemies.push(id);\n                return id;\n            }\n        }\n    }\n}\n\n\nexport const generatorId = () => {\n    let id = 0;\n    return {\n        get: (name: string) => {\n            return name+'-'+(++id);\n        },\n    }\n}\n\nexport const getRandom = () => Boolean(Math.round(Math.random()))\n\nexport function deepFlatten<T>(arr: T[]): T[] { return [].concat(...arr.map(v => (Array.isArray(v) ? deepFlatten(v) : v)))}\n\nexport const getRandomValueFromArray = (arr: any[]) => Math.floor(Math.random() * arr.length)\n\nexport const sampleSize = ([...arr], n = 1) => {\n    let m = arr.length;\n    while (m) {\n      const i = Math.floor(Math.random() * m--);\n      [arr[m], arr[i]] = [arr[i], arr[m]];\n    }\n    return arr.slice(0, n);\n  }\n\n\nexport const isDevelopment = process.env.DEVELOPMENT === 'true'\n\n\nexport const utils = {\n    centerGameObjects: function (objects: any[]) {\n      objects.forEach(function (object) {\n        object.anchor.setTo(0.5);\n      })\n    }\n};","import { generatorId } from '../utils';\n\nconst g = generatorId();\nconst { get } = g;\n\ninterface PersonProps {\n    readonly game: Phaser.Game,\n    readonly x: number,\n    readonly y: number,\n    readonly key: string,\n}\n \nexport default class Person {\n    public sprite: Phaser.Sprite\n    public playerId: string\n\n    constructor ({\n        game,\n        x,\n        y,\n        key\n    }: PersonProps) {\n        this.sprite = game.add.sprite(x, y, key)\n        this.playerId = get(key)\n        game.add.existing(this.sprite)\n        game.physics.arcade.enable(this.sprite)\n    }\n}\n","type SubscriberFunction = (args: any) => void\n\nconst PubSubFunction = () => {\n    const subscribers: SubscriberFunction[] = []\n    return {\n        subscribe(fn: SubscriberFunction) {\n            subscribers.push(fn)    \n        },\n        publish(...args : any[]) {\n            subscribers.forEach(subscriber => {\n                subscriber.call(this,  ...Array.prototype.slice.apply(args) )\n            })\n        }\n    }\n}\n\nexport const PubSub = PubSubFunction()","import autobind from 'autobind-decorator'\n\nimport Person from './Person'\nimport store from '../store'\nimport { connect } from '../utils/connect';\nimport PersonBase from './PersonBase';\nimport { LayersIds, passers, passersConstants, PasserConstantOptions, ground, PassersKeys } from '../constants/constants';\n\n\nimport '../assets/clerk/clerk.png'\nimport { changeMoney, collidePasser, changeMood } from '../actions';\nimport { deepFlatten } from '../utils';\n\nexport type COORD = {\n    readonly x: number\n}\n\nexport type SPEED = {\n    readonly min: number,\n    readonly max: number,\n}\n\nconst AMOUNT_FUNDRISING = 10\nconst MOOD_DEVIDER_COLLIDED_PASSERS = 5\nconst MOOD_INCREMENT = 10\n\nconst PASSER_SPEED = {\n    min: 15,\n    max: 30\n}\n\nconst TIME_THRESHOLD = 2000\n\nconst mapStateToProps = (state = store.getState()) => {\n    return {\n        state: state\n    }\n}   \n\n// @connect(mapStateToProps, null)\n\nexport class Passer extends PersonBase {\n    game: Phaser.Game\n    sprite: Phaser.Sprite\n    key: string\n\n    constructor( \n        game: Phaser.Game, \n        coord: COORD,\n        speed: SPEED,\n        key: string,\n        passerConfig: PasserConstantOptions,\n        time_threshold?: number\n    ) {\n        super({\n            game: game,\n            x: game.rnd.between(100, coord.x),\n            y: game.world.height - ground.height,\n            key: key,\n            speed: speed,\n            time_threshold: time_threshold ? time_threshold : TIME_THRESHOLD,\n            velocity: {\n                min: 5,\n                max: 8,\n            }\n        });\n        \n        this.game = game;\n        this.key = key\n        // custom logic for sprite\n        // this.sprite.body.setSize(326)\n        this.sprite.scale.setTo(passerConfig.setTo[0], passerConfig.setTo[1])\n        this.sprite.anchor.set(0.5, 1)\n        this.sprite.animations.add('stand', passerConfig.stand.frames, passerConfig.stand.frameRate, true)\n        this.animationRun = this.sprite.animations.add('move', passerConfig.move.frames, passerConfig.move.frameRate, true)\n        this.sprite.animations.play('stand')\n        this.game.debug.body(this.sprite)\n    }\n\n    render() {}\n}\n\n\nexport interface PassersProps {\n    sprites: Phaser.Sprite[],\n    instances: Passer[],\n    update: any,\n    collisionWithPerson: (sprite: Phaser.Sprite) => any\n    collideWithObstacles: (sprite: Phaser.Sprite) => any\n}\n\nexport const renderPassers = (game: Phaser.Game): PassersProps => {\n    // const passerInstances: Passer[] = []\n    const passerInstances: Passer[][] = passers.map((passer) => {\n        const arr = []\n        if (passer.count > 0 && passer.key !== 'pupil') {\n            for(let i=0; i<passer.count; i++) {\n                arr.push(new Passer(\n                    game, \n                    {\n                        x: game.rnd.between(100, game.world.width - 300)\n                    }, \n                    PASSER_SPEED, \n                    `${LayersIds.passer}-${passer.key}`,\n                    passersConstants[passer.key]\n                ))\n            }\n        }\n        return arr\n    })\n\n    const instances = deepFlatten<any>(passerInstances)\n\n\n\n    return {\n        sprites: instances.map((p) => p.sprite),\n        instances: instances,\n        update: () => instances.forEach((inst: Passer) => inst.update()),\n        collisionWithPerson: (sprite) => {\n            const instance = instances.find(p => p.sprite === sprite)\n            const state = store.getState()\n            if (state.passers.collided.indexOf(instance.key) < 0) {\n                store.dispatch(collidePasser(instance.key))\n                store.dispatch(changeMoney(-AMOUNT_FUNDRISING))\n\n                const numberCollided = state.passers.collided.length\n                if (numberCollided % MOOD_DEVIDER_COLLIDED_PASSERS === 0) {\n                    store.dispatch(changeMood({\n                        incr: MOOD_INCREMENT\n                    }))\n                }\n            }\n        },\n        collideWithObstacles: (sprite) => {\n            const passer = instances.find(p => p.sprite === sprite)\n            passer.collideWithObstacles()\n        }\n    }\n} \n\n\nexport class CrowdHandler {\n    public arr: Passer[] = []\n    game: Phaser.Game\n    isRendered: boolean = false\n    sprites: Phaser.Sprite[] = []\n    constructor(game: Phaser.Game) {\n        // const state = store.getState()\n        // this.isRendered =  state.events.renderCrowd\n        this.game = game\n        store.subscribe(this.render)     \n    }\n\n    collisionWithPerson(sprite: Phaser.Sprite) {\n        console.log('collide with person')\n    }\n\n    update() {\n        this.arr.forEach((inst) => {\n            inst.update()\n        })  \n    }\n\n    render = () => {\n        const state = store.getState()\n        \n        if (!state.events.renderCrowd || state.events.renderCrowd === this.isRendered) {\n            return ;\n        }\n        this.isRendered = state.events.renderCrowd  \n        const passerKey: PassersKeys = passers\n            .find(p => p.key === 'pupil')\n        \n        this.arr = []    \n        if (passerKey.count > 0) {\n            for(let i=0; i<passerKey.count; i++) {\n                this.arr.push(new Passer(\n                    this.game, \n                    {\n                        x: this.game.rnd.between(\n                            this.game.world.width - 100, \n                            this.game.world.width\n                        )\n                    }, \n                    PASSER_SPEED, \n                    `${LayersIds.passer}-${passerKey.key}`,\n                    passersConstants[passerKey.key]\n                ))\n            }\n            \n            this.sprites = this.arr.map((p) => p.sprite)\n        }\n    }\n}\n\n","import autobind from 'autobind-decorator'\n\nimport { ENEMY_TYPES, ground } from '../constants/constants'\nimport Person from './Person'\nimport Enemy from './Enemy'\n\nimport store from '../store'\n\ntype SPEED = {\n    readonly min: number,\n    readonly max: number,\n}\n\ninterface PersonBaseProps {\n    readonly game: Phaser.Game\n    readonly x: number\n    readonly y?: number\n    readonly key: string\n    readonly speed: SPEED\n    readonly time_threshold: number\n    readonly velocity: {\n        readonly min: number,\n        readonly max: number,\n    }\n}\n\nexport default class PersonBase extends Person{\n    game: Phaser.Game\n    sprite: Phaser.Sprite\n    dir: number = Math.round(Math.random()) ? 1 : -1\n    velocity: number\n    animationRun: Phaser.Animation\n    timerChangingVelocity: number\n    props: PersonBaseProps\n\n    constructor(props: PersonBaseProps) {\n        super({\n            game: props.game,\n            x: props.x,\n            y: props.game.world.height - ground.height,\n            key: props.key,\n        })\n        this.game = props.game\n        this.props = {...props}\n        this.sprite.body.collideWorldBounds = true\n        this.velocity = this.game.rnd.between(props.speed.min, props.speed.max)\n        this.sprite.body.gravity.y = 300\n        this.timerChangingVelocity = Date.now()\n    }\n\n    public update() {\n        if (Date.now() - this.timerChangingVelocity > this.props.time_threshold) {\n            this.sprite.body.moves = true\n            this.timerChangingVelocity = Date.now()\n            this.dir = Math.round(Math.random()) ? 1 : -1\n            this.velocity = this.game.rnd.between(this.props.speed.min, this.props.speed.max)\n        }\n\n        this.sprite.scale.setTo(-this.dir * Math.abs(this.sprite.scale.x), this.sprite.scale.y)\n        this.sprite.body.velocity.x = this.velocity * this.dir\n\n        if ((this.sprite.body.x <= 0 && this.dir < 0) ||\n            (this.sprite.body.x >= this.game.world.width && this.dir > 0)) {\n            if (this.sprite.body.x <= 0) {\n                this.sprite.body.x = 0\n            }\n            else {\n                this.sprite.body.x = this.game.world.width\n            }\n            this.sprite.body.velocity.x = 0\n            this.dir *= -1\n            this.sprite.animations.stop('move', true)\n        }\n        else {\n            if (\n                this.sprite.animations.currentAnim.name !== 'move' ||\n                !this.sprite.animations.currentAnim.isPlaying\n            ) {\n                this.sprite.animations.play('move', (this.velocity < 15) ? this.props.velocity.min : this.props.velocity.max)\n            }\n        }\n    }\n\n    public collideWithObstacles() {\n        this.sprite.body.velocity.y *= -1\n    }\n}","module.exports = __webpack_public_path__ + \"assets/clerk.png\";","// import * as Phaser from 'phaser-ce'\n\n// (window as WindowPhaser).Phaser = Phaser\n\n// import PIXI from 'phaser-ce/build/custom/pixi.js'\n// import p2 from 'expose-loader?p2!phaser-ce/build/custom/p2.js';\n// import Phaser from 'expose-loader?Phaser!/node_modules/phaser-ce/build/phaser.js'\n//  import Phaser from 'phaser-ce'\n\n// interface WindowPhaser extends Window {\n//     Phaser: any,\n//     PIXI: any,\n// }\n\n// (window as WindowPhaser).Phaser = Phaser\n\nimport PreBoot from './states/Boot'\nimport Game from './states/Game'\nimport FinalScreen from './states/FinalScreen'\n\nimport { rgResizeBody } from './utils/sizes'\n\nimport {\n    STATES,\n} from './constants/constants'\nimport { mainMenu, Menu, MenuWrapper } from './states/Menu';\nimport Help from './states/Help';\n// import {MenuWrapper} from './states/Menu';\n\n\nconst getSizes = (className: string) => {\n    const containerNode = <HTMLElement>document.querySelector(className)\n    return rgResizeBody(containerNode)\n}\n\nconst initGame = () => {\n    const className: string = '.js-game-container'\n    const [ gameWidth, gameHeight ] = getSizes(className)\n\n    this.game = new Phaser.Game({\n        width: gameWidth,\n        height: gameHeight,\n        parent: <HTMLScriptElement>document.querySelector(className),\n        antialias: true,\n        renderer: Phaser.CANVAS\n    })\n\n    this.game.state.add(STATES.PreBoot, PreBoot)\n    this.game.state.add(STATES.Game, Game)\n    this.game.state.add(STATES.Finish, FinalScreen)\n    this.game.state.add(STATES.Menu, MenuWrapper)\n    this.game.state.add(STATES.Help, Help)\n    this.game.state.start(STATES.PreBoot)\n}\n\nwindow.onload = initGame\n\nwindow.onresize = () => {\n    if (this.game) {\n        // this.game.scale.setGameSize(...getSizes('.js-game-container'))\n    }\n}\n","import { STATES, LayersIds, passersTypes, obstaclesKeys } from \"../constants/constants\"\n\nimport '../assets/loading.png'\nimport '../assets/buildings/big_school.png'\nimport '../assets/buildings/innovation_house.png'\nimport '../assets/buildings/ministerstvo.png'\nimport '../assets/buildings/zakupki_and_tenderi.png'\nimport '../assets/buildings/buildings.png'\nimport '../assets/buildings/buildings.json'\nimport '../assets/player.png'\nimport '../assets/hands/raised_hands.png'\nimport '../assets/one-coin.png'\nimport '../assets/ground.png'\nimport '../assets/cactuses.png'\nimport '../assets/clouds/clouds.png'\nimport '../assets/policeman/policeman.png'\nimport '../assets/passers/kindpasser.png'\nimport '../assets/passers/kindpasser_green.png'\nimport '../assets/passers/pupil.png'\nimport '../assets/passers/sentsov.png'\nimport '../assets/super_mario.png'\nimport '../assets/donation.png'\nimport '../assets/obstacles.png'\nimport '../assets/obstacles/grey_texture.png'\nimport '../assets/obstacles/vasya.png'\nimport '../assets/test_level2.json'\nimport { utils } from \"../utils\";\n\nexport default class PreBoot extends Phaser.State {\n    assetsPath: string = './assets/'\n    preload () {\n        this.load.image(LayersIds.loading, `${this.assetsPath}loading.png`)\n        this.load.image(LayersIds.cactus, `${this.assetsPath}cactuses.png`)\n    }\n\n    create() {\n        this.state.add(STATES.Boot, Boot);\n\n        this.state.start(STATES.Boot)\n    }\n}\n\n\nclass Boot extends Phaser.State {\n    assetsPath: string = './assets/'\n    loadingBar: Phaser.Sprite\n    logo: Phaser.Sprite\n    status: Phaser.Text\n    preloadBar: Phaser.Graphics\n\n    init () {\n        \n    }\n\n    preload () {\n        this.game.stage.backgroundColor = '#000';\n        this.loadingBar = this.add.sprite(this.world.centerX, 100, LayersIds.loading);\n        this.logo       = this.add.sprite(this.world.centerX, 200, LayersIds.cactus);\n        this.status     = this.add.text(this.world.centerX, 380, 'Loading...', {fill: 'white'});\n        this.loadingBar.anchor.set(0.5, 0)\n        this.logo.scale.setTo(1.2);\n\n        utils.centerGameObjects([this.logo, this.status]);\n        this.load.setPreloadSprite(this.loadingBar, 0);\n        this.game.load.atlasJSONHash(\n            'buildings', \n            './assets/buildings.png', \n            './assets/buildings.json'\n        )\n\n        this.load.spritesheet(LayersIds.person, `${this.assetsPath}player.png`, 128, 128, 12)\n        this.load.image(LayersIds.hands, `${this.assetsPath}raised_hands.png`)\n        this.load.tilemap(LayersIds.tilemap, `${this.assetsPath}test_level2.json`, null, Phaser.Tilemap.TILED_JSON)\n        this.load.image(LayersIds.tiles, `${this.assetsPath}obstacles.png`)\n        this.load.image(LayersIds.coin, `${this.assetsPath}one-coin.png`)\n        this.load.image(LayersIds.tiles, `${this.assetsPath}super_mario.png`)\n        this.load.image(LayersIds.ground, `${this.assetsPath}ground.png`)\n        this.load.image(LayersIds.clouds, `${this.assetsPath}clouds.png`)\n        this.load.spritesheet(LayersIds.policeman, `${this.assetsPath}policeman.png`, 274, 756.5, 8)\n        this.load.spritesheet(LayersIds.clerk, `${this.assetsPath}clerk.png`, 721.5, 1105, 8)\n        this.load.image(LayersIds.donation, `${this.assetsPath}donation.png`);\n        this.load.spritesheet(`${LayersIds.passer}-${passersTypes['usual-1']}`, `${this.assetsPath}kindpasser_green.png`, 329, 894, 9)\n        this.load.spritesheet(`${LayersIds.passer}-${passersTypes['usual-2']}`, `${this.assetsPath}kindpasser.png`, 329.25, 896.5, 8)\n        this.load.spritesheet(`${LayersIds.passer}-${passersTypes['sentsov']}`, `${this.assetsPath}sentsov.png`, 451.5, 894, 8)\n        this.load.spritesheet(`${LayersIds.passer}-${passersTypes['pupil']}`, `${this.assetsPath}pupil.png`, 445.25, 986.5, 8)\n\n        this.load.image(obstaclesKeys.texture, `${this.assetsPath}grey_texture.png`)\n        this.load.image(obstaclesKeys.vasya, `${this.assetsPath}vasya.png`)\n        \n    }\n    \n    create() {\n        this.status.setText('Ready!');\n        // this.state.start(STATES.Menu)\n        this.state.start(STATES.Game)\n    }\n\n    render () {\n    }\n}\n","export function strEnumHelper<T extends string>(o: Array<T>): { [K in T]: K } {\n    return o.reduce(\n      (res, key) => {\n        res[key] = key\n        return res\n      },\n      Object.create(null))\n  }","module.exports = __webpack_public_path__ + \"assets/loading.png\";","module.exports = __webpack_public_path__ + \"assets/big_school.png\";","module.exports = __webpack_public_path__ + \"assets/innovation_house.png\";","module.exports = __webpack_public_path__ + \"assets/ministerstvo.png\";","module.exports = __webpack_public_path__ + \"assets/zakupki_and_tenderi.png\";","module.exports = __webpack_public_path__ + \"assets/buildings.png\";","module.exports = __webpack_public_path__ + \"assets/buildings.json\";","module.exports = __webpack_public_path__ + \"assets/player.png\";","module.exports = __webpack_public_path__ + \"assets/raised_hands.png\";","module.exports = __webpack_public_path__ + \"assets/one-coin.png\";","module.exports = __webpack_public_path__ + \"assets/ground.png\";","module.exports = __webpack_public_path__ + \"assets/cactuses.png\";","module.exports = __webpack_public_path__ + \"assets/clouds.png\";","module.exports = __webpack_public_path__ + \"assets/policeman.png\";","module.exports = __webpack_public_path__ + \"assets/kindpasser.png\";","module.exports = __webpack_public_path__ + \"assets/kindpasser_green.png\";","module.exports = __webpack_public_path__ + \"assets/pupil.png\";","module.exports = __webpack_public_path__ + \"assets/sentsov.png\";","module.exports = __webpack_public_path__ + \"assets/super_mario.png\";","module.exports = __webpack_public_path__ + \"assets/donation.png\";","module.exports = __webpack_public_path__ + \"assets/obstacles.png\";","module.exports = __webpack_public_path__ + \"assets/grey_texture.png\";","module.exports = __webpack_public_path__ + \"assets/vasya.png\";","module.exports = __webpack_public_path__ + \"assets/test_level2.json\";","import autobind from 'autobind-decorator'\nimport debounce from 'lodash.debounce'\nimport once from 'lodash.once'\nimport Phaser, { TilemapLayer, Sprite } from 'phaser-ce'\n\n\nimport store from '../store'\n\nimport Enemy from './Enemy'\nimport Person from './Person'\nimport FBK from './FBK'\nimport Score from './Score'\nimport { PolicemanManager, PolicemanManagerProps } from \"./Policeman\"\nimport { CactusHandler, ThrowCactusProps, CactusHanlerProps } from \"./Cactus\"\nimport {HandsHandler} from './Hands'\nimport {render as renderObstacles} from './Obstacles'\n\nimport {\n    backgroundColor,\n    ground,\n    BUIDING_COORDS,\n    orderBuidings,\n    typesBuiding,\n    ENEMY_TYPES,\n    LayersIds,\n    passers,\n    passersTypes,\n    obstaclesKeys\n} from '../constants/constants'\n\nimport { OfficialProps, renderOfficials } from './Official'\nimport { renderPassers, PassersProps, CrowdHandler } from './Passer';\nimport { isDevelopment } from '../utils';\n\nexport default class Game extends Phaser.State{\n    private map: Phaser.Tilemap\n    private obstacles: Phaser.Group\n    private person: FBK\n    private cactuses: Phaser.Group\n    private crowd: CrowdHandler\n    private ground: Phaser.Sprite\n    private cloudsSprite: Phaser.TileSprite\n    private ladder: Phaser.TilemapLayer;\n    private listBuidingsSprite: Phaser.Sprite[] = []\n    private score: Score\n    private handsHandler: HandsHandler\n    private officials: OfficialProps\n    private passers: PassersProps\n    donation: Phaser.Group\n    cactusHandler: CactusHanlerProps\n    policemanWatcher: PolicemanManagerProps\n    assetsPath: string = './assets/'\n\n    init() {\n         \n    }\n\n    preload() {\n        \n    }\n\n    createClouds() {\n        console.log(this.game.height)\n        this.cloudsSprite = this.game.add.tileSprite(0, 0, this.game.width * 3000, this.game.height - 200, 'clouds', 0)\n        this.cloudsSprite.scale.set(1.1, 1)\n        this.cloudsSprite.smoothed = true;\n        this.cloudsSprite.autoScroll(-5, 0);\n    }\n\n    createGround() {\n        let graphics: Phaser.Graphics = this.game.make.graphics()\n        graphics.beginFill(0x766627, 1)\n        graphics.drawRect(0, 0, ground.width, ground.height)\n        graphics.endFill()\n        graphics.boundsPadding = 0;\n        this.ground = this.game.add.sprite(0, this.game.world.height - ground.height)\n        this.ground.addChild(graphics)\n        this.ground.width = ground.width\n        this.ground.height = ground.height\n        this.ground.anchor.set(0, 0)\n        this.physics.arcade.enable(this.ground)\n        this.ground.body.immovable = true\n    }\n\n    createBuidings() {\n        for(let type of orderBuidings) {\n            if (typeof(BUIDING_COORDS[type]) !== 'undefined') {\n                let buildingInfo = BUIDING_COORDS[type]\n                let building = this.game.add.sprite(\n                    buildingInfo.position.x, \n                    this.game.world.height - ground.height, \n                    'buildings', \n                    `${typesBuiding[type]}`\n                )\n                building.anchor.setTo(buildingInfo.scale.x, buildingInfo.scale.y)\n                this.listBuidingsSprite.push(building)\n            }\n        }\n    }\n\n    createGroundFromTiles() {\n        // const layer = this.map.createLayer('background')\n        // this.physics.arcade.enable(layer);\n        // layer.anchor.set(0, 0)    \n        // // layer.debug = true\n        // this.map.setCollision([58, 59, 60], true, layer);\n        // layer.position.x = 0\n        // layer.position.y = 0\n        // layer.fixedToCamera = false\n        // layer.scrollFactorX = 0\n        // layer.scrollFactorY = 0\n        // layer.setScale(Math.round(this.game.world.width/this.game.width), 1)\n        // layer.position.set(0, this.game.height - 512)\n        // this.backgroundlayer = layer\n    }\n\n\n    _createObstacles() {\n        // this.map.addTilesetImage('obstacles', LayersIds.obstacles);\n        // const collisionPoints = [...Array(96)].map((_, v) => v)\n        // this.obstacles = this.map.createLayer('obstacles');\n        // this.physics.arcade.enable(this.obstacles);\n        // this.obstacles.anchor.set(0, 0)\n        // this.map.setCollision(collisionPoints, true, this.obstacles);\n        // console.log('height = ', this.obstacles.height)\n        // // this.obstacles.debug = true\n        // this.obstacles.position.x = 0\n        // this.obstacles.position.y = 0\n        // this.obstacles.fixedToCamera = false\n        // this.obstacles.scrollFactorX = 0\n        // this.obstacles.scrollFactorY = 0\n        // console.log(this.obstacles.getLocalBounds())\n        // console.log(this.obstacles.scale.y)\n        // this.obstacles.position.set(0, 0)\n    }\n\n\n    createObstacles() {\n        \n        // var bmd = this.game.make.bitmapData(320, 256)\n        // bmd.copy(obstaclesKeys.texture)\n        // const sprite = this.game.add.sprite(100, this.game.height - ground.height, obstaclesKeys.texture)\n        // sprite.anchor.set(0, 1)\n        // group.add(sprite)\n        // sprite.body.immovable = true\n        \n\n        const poly = new Phaser.Polygon()\n\n        //  And then populate it via setTo, using any combination of values as above\n        poly.setTo([ new Phaser.Point(200, 100), new Phaser.Point(350, 100), new Phaser.Point(375, 200), new Phaser.Point(150, 200) ])\n\n        // this.physics.arcade.enable(group);\n        // this.physics.arcade.enable(shapeSprite);\n        // group.forEach((el: Phaser.Graphics) => {\n        // shapeSprite.body.allowGravity = true\n        // shapeSprite.body.gravity.y = 400\n        // shapeSprite.body.immovable = true\n        // })\n\n        this.obstacles = renderObstacles.call({game: this.game})\n    }\n\n    createLadder() {\n        this.map = this.add.tilemap(LayersIds.tilemap);\n        this.map.heightInPixels = this.game.world.height\n        this.map.addTilesetImage('obstacles', LayersIds.tiles);\n        this.ladder = this.map.createLayer('ladder');\n\n        this.physics.arcade.enable(this.ladder);\n        this.map.setCollision([58, 59], true, this.ladder);\n        this.ladder.anchor.set(0, 0)\n        // this.ladder.anchor.set(0, 1)\n        this.ladder.scrollFactorY = 0\n        this.ladder.scrollFactorX = 0\n        this.ladder.scrollY = 0\n        this.ladder.fixedToCamera = false\n        // this.ladder.resize(this.game.width, this.game.world.height)\n        // this.ladder.scale.set(1, Math.round(960/this.game.world.height))\n    }\n\n    createFinalPoints() {\n        const coords = [{\n            y: this.game.world.height - ground.height - 400,\n            x: this.game.world.width - 100\n        }]\n\n        this.donation = this.game.add.physicsGroup(Phaser.Physics.ARCADE)\n        // this.map.createFromObjects('finalpoints', 'point', LayersIds.donation, 0, true, false, this.donation); \n\n        coords.forEach((coord: Phaser.Sprite) => {\n            const sprite = this.game.add.sprite(coord.x, coord.y, LayersIds.donation)\n            sprite.width = 50\n            sprite.height = 50\n            this.donation.add(sprite)\n        })\n    }\n\n    create() {\n        this.physics.startSystem(Phaser.Physics.ARCADE);\n\n        this.stage.backgroundColor = backgroundColor;\n        // this.game.world.setBounds(0, 0, ground.width, this.game.world.height);\n        this.game.world.resize(ground.width, this.game.height);\n        this.createLadder()\n        this.createClouds();\n        this.createGround();\n        this.createBuidings();\n        this.createObstacles()\n        this.createFinalPoints()\n        \n        \n\n        this.handsHandler = new HandsHandler(\n            this.game\n        )\n\n        this.person = new FBK({\n            game: this.game\n        });\n        \n        \n\n\n        this.score = new Score({\n            game: this.game,\n        });\n\n        this.officials = renderOfficials(this.game)\n        this.passers = renderPassers(this.game)\n        this.cactusHandler = CactusHandler(this.game)\n        this.policemanWatcher = PolicemanManager(this.game)\n\n        this.crowd = new CrowdHandler(\n            this.game\n        )\n       \n    }\n\n    \n    update() {\n\n        this.physics.arcade.collide(\n            this.person.sprite, \n            this.obstacles, \n            null, \n            null, \n            this\n        );\n\n        this.physics.arcade.collide(\n            this.obstacles,\n            this.ground,\n            null,\n            null, \n            this\n        )\n\n        // this.physics.arcade.collide(\n        //     this.policemanWatcher.getAllSprites(), \n        //     this.obstacles, \n        //     this.policemanWatcher.collideWithObstacles, \n        //     null, \n        //     this\n        // );\n\n        // this.physics.arcade.collide(\n        //     this.officials.sprites, \n        //     this.obstacles, \n        //     this.officials.collideWithObstacles, \n        //     null, \n        //     this\n        // );\n\n        // this.physics.arcade.collide(\n        //     this.passers.sprites,\n        //     this.obstacles,\n        //     this.passers.collideWithObstacles,\n        //     null,\n        //     this\n        // )\n\n        this.physics.arcade.collide(\n            this.passers.sprites,\n            this.obstacles,\n            this.passers.collideWithObstacles,\n            null,\n            this\n        )\n\n        this.physics.arcade.overlap(\n            this.person.sprite,\n            this.donation, \n            this.person.collideFinalPoints,\n            null,\n            this\n        )\n\n        this.physics.arcade.overlap(\n            this.person.sprite,\n            this.policemanWatcher.getAllActivePoliceman(),\n            (_: Phaser.Sprite, policeman: Phaser.Sprite) => {\n                if (!isDevelopment) {\n                    this.policemanWatcher.collidePerson(policeman)\n                    this.person.collideWithEnemy({\n                        type: ENEMY_TYPES.policeman\n                    })\n                }\n            },\n            null,\n            this\n        )\n        this.physics.arcade.collide(\n            this.ground, \n            this.policemanWatcher.getAllSprites()\n        )\n        this.physics.arcade.collide(\n            this.person.sprite,\n            this.cactusHandler.aliveCactuses(),\n            (_: Phaser.Sprite, cactus: Phaser.Sprite) => {\n                this.cactusHandler.collidePersonWithCactus(cactus)\n            },\n            null,\n            this\n        )\n        this.physics.arcade.collide(\n            this.policemanWatcher.getAllSprites(),\n            this.cactusHandler.thrownCactuses, \n            (policeman: Phaser.Sprite, cactus: Phaser.Sprite) => {\n                this.policemanWatcher.collideCactus(policeman)\n                this.cactusHandler.collidePolicemanWithCactus(cactus)\n            },\n            null, \n            this\n        );\n        this.physics.arcade.collide(\n            this.cactusHandler.thrownCactuses, \n            this.obstacles, \n            this.cactusHandler.collideObstaclesWithCactus, \n            null, \n            this\n        );\n        this.physics.arcade.collide(\n            this.person.sprite, \n            this.crowd, \n            this.meetCrowd, \n            null, \n            this\n        );\n        this.physics.arcade.collide(\n            this.person.sprite, \n            this.ground, \n            () => {\n                this.person.endJumping();\n            }, \n            null, \n            this\n        );\n\n        this.physics.arcade.collide(\n            this.ground,\n            this.passers.sprites\n        )\n\n        this.physics.arcade.collide(\n            this.ground,\n            this.officials.sprites\n        )\n\n        this.physics.arcade.collide(\n            this.ground,\n            this.crowd.sprites\n        )\n\n\n        this.physics.arcade.overlap(\n            this.person.sprite,\n            this.handsHandler.getHandsSprite(),\n            (_: Phaser.Sprite, handSprite: Phaser.Sprite) => {\n                this.handsHandler.collidePerson(handSprite)        \n            }\n        )\n\n        this.physics.arcade.overlap(\n            this.person.sprite,\n            this.officials.sprites,\n            this.collideWithOfficials,\n            null,\n            this\n        )\n\n        this.physics.arcade.overlap(\n            this.person.sprite,\n            this.passers.sprites,\n            this.collideWithPassers,\n            null,\n            this\n        )\n\n        this.person.update()\n        this.handsHandler.update(this.person.sprite.centerX)\n        this.passers.update()\n        this.officials.update()\n        this.cactusHandler.update()\n        this.policemanWatcher.update()\n        this.crowd.update()\n    }\n\n    collideWithOfficials(person: Phaser.Sprite, official: Phaser.Sprite) {\n        this.officials.collisionWithPerson(official)\n    }\n\n    collideWithPassers(person: Phaser.Sprite, passer: Phaser.Sprite) {\n        this.passers.collisionWithPerson(passer)\n    }\n\n    render() {\n        // this.game.debug.geom( this.obstacles, 'rgba(255,0,0,1)' ) ;\n        // this.game.debug.body(this.ground);\n\n        this.obstacles.forEach((o: Phaser.Sprite) => {\n            // this.game.debug.body(o);\n        })\n        this.person.render()\n        // this.game.debug.body(this.ladder);\n        \n    }\n\n    meetCrowd(person: Phaser.Sprite, crowd: Phaser.Sprite) {\n        this.game.state.start('Finish', true, false);\n    }\n}\n","import once from 'lodash.once'\nimport autobind from 'autobind-decorator'\n\nimport Person from './Person'\nimport store from '../store'\n\nimport {\n    PERSON,\n    ENEMY_TYPES,\n    MOOD,\n    DEACTIVATE_TIME_FOR_COLLIDE_PERSON_POLICEMAN,\n    ground,\n    STATES\n} from '../constants/constants'\n\nimport { throwCactus, changeMoney, reduceMood, changeMood, renderCrowd, gameEnd } from '../actions'\nimport { PubSub } from './Pubsub';\n\ninterface FBKProps {\n    readonly game: Phaser.Game,\n    // readonly onThrowCactus: (\n    //     x:number, \n    //     y:number, \n    //     velocityX: number, \n    //     angularVelocity: number\n    // ) => void\n}\ninterface CollideEventProps {\n    readonly type: ENEMY_TYPES\n}\n\n\nconst COUNT_JUMPING_TRIALS = 2\n\n\nexport default class FBK extends Person {\n    isTouchedEnemy: boolean = false\n    game: Phaser.Game\n    sprite: Phaser.Sprite\n    tween: Phaser.Tween\n    time: number\n    cactuses: Phaser.Sprite[] = []\n    private isJumping:boolean = false\n    private facing: string = 'right'\n    private direction: number = 1\n    private timer: Phaser.TimerEvent\n    private keys: {[key: string]: Phaser.Key}\n    // private onThrowCactus: (x: number, y: number, velocityX: number, angularVelocity: number) => void\n    private animationsRunRight: Phaser.Animation\n    private animationsJump: Phaser.Animation\n    private animationsStand: Phaser.Animation\n    countJumps: number = 0\n    // private collideWithEnemy: (enemies: any, person: Phaser.Sprite, enemy:Phaser.Sprite) => void\n\n    constructor( {\n        game, \n        // onThrowCactus \n    }: FBKProps) {\n        \n        super({\n            game: game,\n            x: 0,\n            y: game.world.height - ground.height,\n            key: 'person'\n        });\n        \n        this.game = game;\n        this.time = Date.now();\n\n        this.sprite.width = PERSON.width;\n        this.sprite.height = PERSON.height;\n        \n        this.sprite.anchor.set(0.5, 1);\n        this.sprite.body.setSize(PERSON.width, PERSON.height, 20, 17) \n        // this.sprite.scale.setTo(PERSON.setTo[0], PERSON.setTo[1]);\n        // this.sprite.body.offset.y = this.sprite.body.offset.y - 18;\n\n        this.animationsRunRight = this.sprite.animations.add(\n            'run',\n            PERSON.tweenSettings.run.frames,\n            PERSON.tweenSettings.run.frameRate,\n            true\n        );\n        this.animationsJump = this.sprite.animations.add(\n            'jump', \n            PERSON.tweenSettings.jump.frames, \n            PERSON.tweenSettings.jump.frameRate, \n            true\n        );\n        this.animationsStand = this.sprite.animations.add(\n            'stand', \n            PERSON.tweenSettings.stand.frames, \n            PERSON.tweenSettings.stand.frameRate, \n            true\n        );\n        this.game.physics.arcade.enable(this.sprite);\n        this.sprite.body.gravity.y = 3000;\n        // this.sprite.body.immovable = true;\n        // this.sprite.body.allowGravity = true; \n\n        this.sprite.animations.play('stand');\n        this.sprite.body.collideWorldBounds = true;\n        \n        this.game.camera.follow(this.sprite);\n        this.initiateKeyboardEvents()   \n    }\n\n    initiateKeyboardEvents = () => {\n        this.keys = {\n            up: this.game.input.keyboard.addKey(Phaser.Keyboard.UP),\n            down: this.game.input.keyboard.addKey(Phaser.Keyboard.DOWN),\n            left: this.game.input.keyboard.addKey(Phaser.Keyboard.LEFT),\n            right: this.game.input.keyboard.addKey(Phaser.Keyboard.RIGHT),\n            a: this.game.input.keyboard.addKey(Phaser.Keyboard.A), //throw\n            d: this.game.input.keyboard.addKey(Phaser.Keyboard.D) //delete\n        }\n    }\n\n    render() {\n        // this.game.debug.body(this.sprite);\n    }\n\n    @autobind\n    collideWithEnemy(collideProps: CollideEventProps) {\n        const state = store.getState();\n        switch(collideProps.type) {\n            case ENEMY_TYPES.fsb:\n                if (!this.isTouchedEnemy) {\n                    state.dispatch(changeMoney(10))\n                    this.addDisabledAnimation()\n                }\n                break;\n            case ENEMY_TYPES.gangster:\n            case ENEMY_TYPES.official:\n                state.dispatch(changeMoney(-10))\n                this.deactivateForTime();\n                break;\n            case ENEMY_TYPES.policeman:\n                if (!this.isTouchedEnemy) {\n                    this.addDisabledAnimation()\n                    this.reduceMood(ENEMY_TYPES.policeman);\n                    store.dispatch(changeMood({\n                        incr: -MOOD.step\n                    }))\n                    break;\n                }\n            default: break;\n        }\n    }\n\n    deactivateForTime() {\n        this.timer = this.game.time.events.loop(2000, this.activate, this);\n    }\n\n    addDisabledAnimation() {\n        this.isTouchedEnemy = true;\n        this.tween = this.game.add.tween(this.sprite).to(\n            { alpha: 0 },\n            300, Phaser.Easing.Linear.None, true, 0, 100, false\n        );\n\n        this.timer = this.game.time.events.loop(\n            DEACTIVATE_TIME_FOR_COLLIDE_PERSON_POLICEMAN, \n            this.finishCollision, \n            this\n        )\n\n        this.animationsStand.play()\n        this.sprite.body.velocity.x = -1 * Math.abs(this.sprite.body.velocity.x);\n    }\n    \n    \n    renderCrowd = once(() => {\n        store.dispatch(renderCrowd())\n    })\n\n    update() {\n        let cursors = this.keys;\n        let player = this.sprite;\n        let jumpButton = this.keys.up;\n        if (this.sprite.position.x >= ground.width/2) {\n            this.renderCrowd()\n        }\n        if (!this.isTouchedEnemy) {\n            player.body.velocity.x = 0;\n            if (cursors.left.isDown) {\n                this.direction = -1\n                player.body.velocity.x = -PERSON.velocityX;\n\n                if (this.facing != 'left' || player.body.touching.down || player.body.onFloor())\n                {\n                    this.sprite.scale.setTo(-Math.abs(this.sprite.scale.x), this.sprite.scale.y);\n                    player.animations.play('run');\n                    this.facing = 'left';\n                }\n            } else if (cursors.right.isDown) {\n                player.body.velocity.x = PERSON.velocityX;\n                this.direction = 1 \n                if (this.facing != 'right' || player.body.touching.down || player.body.onFloor())\n                {\n                    this.sprite.scale.setTo(Math.abs(this.sprite.scale.x), this.sprite.scale.y);\n                    player.animations.play('run');\n                    this.facing = 'right';\n                }\n            } else {\n                if (this.facing != 'idle')\n                {\n                    player.animations.stop();\n                    player.frame = 0;\n                    this.facing = 'idle';\n                }\n                else {\n                    if ( player.body.touching.down || player.body.onFloor() ) {\n                        player.frame = 0;\n                        this.facing = 'idle';\n                        this.countJumps = 0\n                    }\n                }\n            }\n\n            if (jumpButton.isDown)\n            {\n                this.countJumps++\n                if (this.countJumps < COUNT_JUMPING_TRIALS || !this.isJumping) {\n                    player.animations.play('jump');\n                    player.body.velocity.y = player.body.velocity.y - PERSON.velocityY;\n                    this.isJumping = true;\n                }\n            }\n\n\n            const state = store.getState();\n            if (state.score.cactuses > 0 && this.keys.a.justDown) {\n                this.throwCactus();\n            }\n        }\n    }\n\n    finishCollision() {\n       this.endAnimation();\n       this.activate();\n    }\n\n\n    endAnimation() {\n        this.sprite.alpha = 1;\n        this.tween.stop();\n    }\n\n    activate() {\n        this.game.time.events.remove(this.timer);\n        this.isTouchedEnemy = false;\n    }\n\n    public throwCactus() {\n        store.dispatch(throwCactus());\n        PubSub.publish({\n            x: this.sprite.position.x,\n            y: this.sprite.worldPosition.y - this.sprite.body.height,\n            velocityX: this.direction * PERSON.velocityX,\n            angularVelocity: 100\n        })\n        \n    }\n\n    @autobind\n    reduceMood(cause: string) {\n        store.dispatch(reduceMood({\n            cause\n        }))\n    }\n\n    public endJumping() {\n        this.isJumping = false;\n        // if (this.sprite.body.checkCollision.down) {\n        //     this.sprite.body.gravity.y = 0;\n        // }\n    }\n\n    public collideFinalPoints = once(() => {\n        store.dispatch(gameEnd())\n        this.game.state.start(STATES.Finish)\n    })\n}\n","import omit from 'lodash.omit'\nimport * as TYPES from '../types/types'\n\nexport interface PolicemanState {\n    readonly activeIds: {[k: string]: boolean}\n}\n\nconst defaultState = {\n    activeIds: {}\n};\n\ntype CollideWithPersonAction = {\n    type: typeof TYPES.PERSON_POLICEMAN_COLLIDE,\n    id: string,\n}\n\n\ntype PolicemanRemoveAction = {\n    type: typeof TYPES.PERSON_POLICEMAN_REMOVE,\n    id: string,\n}\n\ntype CollideCactusAction = {\n    type: typeof TYPES.COLLIDE_POLICEMAN_CACTUS,\n    id: string,    \n}\n\ntype PolicemanAction = CollideWithPersonAction | PolicemanRemoveAction | CollideCactusAction\n\nexport default function (state: PolicemanState = defaultState, action: PolicemanAction) {\n    switch(action.type) {\n        case TYPES.PERSON_POLICEMAN_COLLIDE:\n            return {\n                ...state,\n                activeIds: {\n                    ...state.activeIds,\n                    [action.id]: true\n                }\n            };\n        case TYPES.PERSON_POLICEMAN_REMOVE:\n            return omit(state, [action.id]);\n\n        case TYPES.COLLIDE_POLICEMAN_CACTUS:\n            return {\n                collide_id_with_cactus: action.id\n            };\n        default:\n            return state;\n    }\n}","import { ADD_ENEMY } from '../types/types';\nimport { ENEMY_TYPES } from '../constants/constants';\n\nexport interface EnemyState {\n    enemies: {\n        [k in string]: string[]\n    }\n}\n\nconst defaultState = {\n    enemies: {\n\n    }\n};\n\ntype AddActionType = {\n    type: typeof ADD_ENEMY,\n    enemyType: ENEMY_TYPES,\n    playerId: string\n}\n\ntype Action = AddActionType\n\n// XXX maybe this file need to be removed\n\nexport default function (state: EnemyState = defaultState, action: Action) {\n    switch(action.type) {\n        case ADD_ENEMY:\n            const enemies = {...state.enemies}\n            if (typeof(enemies[action.enemyType]) === 'undefined') {\n                enemies[action.enemyType] = []\n            }\n            enemies[action.enemyType].push(action.playerId)\n            return {\n                ...state,\n                enemies\n            };\n        default:\n            return state;\n    }\n}","import { CHANGE_MOOD, REDUCE_MOOD } from '../types/types'\nimport { MOOD } from '../constants/constants'\n\nexport interface MoodState {\n    readonly total: number\n}\n\nconst defaultState = {\n    total: 100\n}\n\n\ntype ChangeMoodAction = {\n    readonly type: typeof CHANGE_MOOD,\n    readonly incr: number\n}\n\ntype ReduceMoodAction = {\n    readonly type: typeof REDUCE_MOOD,\n    readonly cause: string\n}\n\ntype MoodAction = ChangeMoodAction | ReduceMoodAction\n\nexport default function (state: MoodState = defaultState, action: MoodAction) {\n    switch(action.type) {\n        case CHANGE_MOOD:\n            let total = state.total + action.incr < 0 ? 0 : state.total + action.incr;\n            return {\n                ...state,\n                total\n            } \n        case REDUCE_MOOD:\n            return {\n                ...state,\n                cause: action.cause\n            }      \n        default:\n            return state;\n    }\n}","import * as TYPES from '../types/types'\nimport { COINS } from '../constants/constants'\n\nexport interface ScoreState {\n   readonly cactuses: number,\n   readonly money: number \n}\n\nconst defaultState = {\n    cactuses: 0,\n    money: COINS.startSum\n}\n\ntype UpdateScore = {\n    type: typeof TYPES.UPDATE_SCORE,\n    diff: number,\n}\n\ntype UpdateMoney = {\n    type: typeof TYPES.UPDATE_MONEY,\n    amount: number,\n}\n\ntype AddCactus = {\n    type: typeof TYPES.ADD_CACTUS,\n}\n\ntype ThrowCactus = {\n    type: typeof TYPES.THROW_CACTUS\n}\n\ntype Action = UpdateScore | UpdateMoney | AddCactus | ThrowCactus\n\nexport default function (state: ScoreState = defaultState, action: Action) {\n    switch(action.type) {\n        case TYPES.UPDATE_SCORE:\n            return {\n                ...state,\n                cactuses: state.cactuses + action.diff\n            }\n        case TYPES.UPDATE_MONEY:\n            const money = state.money + action.amount\n            return {\n                ...state,\n                money: money < 0 ? 0 : money\n            }\n        case TYPES.ADD_CACTUS:\n            return {\n                ...state,\n                cactuses: state.cactuses + 1\n            }\n        case TYPES.THROW_CACTUS:\n            return {\n                ...state,\n                cactuses: state.cactuses - 1\n            }\n        default:\n            return state;\n    }\n}","import { ENEMY_TYPES } from '../constants/constants'\nimport { COLLIDE_OFFICIAL } from '../types/types'\n\nexport interface OfficialState {\n    collided: number[]\n}\n\nconst defaultState: OfficialState = {\n    collided: []\n}\n\ntype ActionCollide = {\n    type: typeof COLLIDE_OFFICIAL,\n    id: number\n}\n\ntype Action = ActionCollide\n// XXX maybe this file need to be removed\n\nexport default function (state = defaultState, action: Action) {\n    switch(action.type) {\n        case COLLIDE_OFFICIAL:\n            return {\n                ...state,\n                collided: (state.collided.push(action.id), state.collided)\n            };\n        default:\n            return state;\n    }\n}","import { ENEMY_TYPES } from '../constants/constants'\nimport { COLLIDE_PASSER } from '../types/types'\n\nexport interface PasserState {\n    collided: number[]\n}\n\nconst defaultState: PasserState = {\n    collided: []\n}\n\ntype ActionCollide = {\n    type: typeof COLLIDE_PASSER,\n    id: number\n}\n\ntype Action = ActionCollide\n// XXX maybe this file need to be removed\n\nexport default function (state = defaultState, action: Action) {\n    switch(action.type) {\n        case COLLIDE_PASSER:\n            return {\n                ...state,\n                collided: (state.collided.push(action.id), state.collided)\n            };\n        default:\n            return state;\n    }\n}","import { RENDER_CROWD } from \"../types/types\";\n\nexport interface EventsState {\n    readonly renderCrowd: boolean\n}\n\nconst defaultState = {\n    renderCrowd: false\n};\n\ntype RenderCrowdAction = {\n    type: typeof RENDER_CROWD\n}\n\ntype Action = RenderCrowdAction\n\n// XXX maybe this file need to be removed\n\nexport default function (state: EventsState = defaultState, action: Action) {\n    switch(action.type) {\n        case RENDER_CROWD: \n            return {\n                ...state,\n                renderCrowd: true \n            }\n        default: \n            return state    \n    }\n}","import { GAME_OVER, HAPPY_END } from '../types/types'\n\nexport interface FinalState {\n    readonly [k: string]: string\n}\n\nconst defaultState = {\n    status: 'fail'\n}\n\ntype GameOverAction = {\n    readonly type: typeof GAME_OVER,\n    readonly msg: string,\n}\n\ntype HappyEndAction = {\n    readonly type: typeof HAPPY_END,\n}\n\ntype Action = GameOverAction | HappyEndAction\n\nexport default function statusGame(state: FinalState = defaultState, action: Action) {\n    switch(action.type) {\n        case GAME_OVER: \n            return {\n                ...state,\n                status: 'fail',\n                msg: action.msg,\n            }\n        case HAPPY_END:\n            return {\n                ...state,\n                status: 'end'\n            }\n        default: return state    \n    }\n}","import autobind from 'autobind-decorator'\nimport Coins from './Coins'\nimport Mood from './Mood'\nimport store from '../store'\n\ninterface ScoreProps {\n    readonly game: Phaser.Game\n}\n\nclass Score {\n    group: Phaser.Group\n    game: Phaser.Game\n    cactusesText: Phaser.Text\n    mood: Mood\n    cactuses: number\n    private coins: Coins\n\n    constructor({ game }: ScoreProps) {\n        this.game = game\n        this.group = this.game.add.group()\n        this.group.fixedToCamera = true\n        this.group.x = 0\n        this.group.y = 0\n        this.mood = new Mood({ game })\n        this.coins = new Coins({ game })\n        this.group.add(this.coins.group) \n        let cactusGroup = this.game.add.group()\n        let cactusImg = this.game.add.sprite(20, 85, 'cactus')\n        cactusImg.width = 30\n        cactusImg.height = 30\n\n        this.cactusesText = this.game.add.text(55, 85, '0', {\n            font: '25px Arial',\n            fill: '#fff'\n        })\n        // this.textTimer.anchor.set(1, 0);\n        // this.textTimer.setShadow(2, 2, 'rgba(0, 0, 0, .8)', 0);\n        cactusGroup.add(cactusImg)\n        cactusGroup.add(this.cactusesText)\n        this.group.add(cactusGroup)\n        store.subscribe(this.updateScore)\n    }\n\n    @autobind\n    updateScore() {\n        const state = store.getState()\n        const { score: { cactuses } } = state\n        if (this.cactuses !== cactuses) {\n            this.cactuses = cactuses\n            this.cactusesText.setText(cactuses.toString())\n        }\n    }\n\n    kill() {\n        this.group.killAll()\n    }\n}\n\nexport default Score","import autobind from 'autobind-decorator';\n\nimport { COINS, FAIL_MSG } from '../constants/constants';\n\nimport store from '../store';\nimport { gameOver } from '../actions';\n\nexport default class Coins {\n    coinImage: Phaser.Sprite;\n    label: Phaser.Text;\n    money: number = 0;\n    game: Phaser.Game;\n    group: Phaser.Group;\n    // width: number;\n\n    constructor( { game }: { game: Phaser.Game } ) {\n        this.game = game;\n\n        this.group = this.game.add.group();\n        this.group.x = 20;\n        this.group.y = 50;\n\n        this.coinImage = this.game.add.sprite(0, 0, 'coin');\n        this.coinImage.width = 30;\n        this.coinImage.height = 30;\n\n        this.label = this.game.add\n            .text(\n                35,\n                0,\n                String(COINS.startSum),\n                {\n                    font: \"25px Arial\",\n                    fill: \"#ffffff\",\n                    align: \"center\"\n                }\n            );\n\n        this.group.add(this.coinImage);\n        this.group.add(this.label);\n        store.subscribe(this.update);\n    }\n\n    @autobind\n    update() {\n        const state = store.getState();\n        const { money } = state.score;\n        if (money !== this.money) {\n            this.money = money;\n            this.label.setText(this.money.toString());\n            if (money) {\n                store.dispatch(gameOver({\n                    msg: FAIL_MSG.money\n                }))\n            }\n        }\n    }\n}","import autobind from 'autobind-decorator';\n\nimport MoodRange from './RangeComponent';\n\nimport store from '../store';\nimport { gameOver } from '../actions';\nimport { FAIL_MSG } from '../constants/constants';\n\ninterface Colors {\n    readonly [percentage: string]: string\n}\nconst colors: Colors = {\n    '10': '#FF0000',\n    '20': '#FF4000',\n    '30': '#DF7401',\n    '40': '#DBA901',\n    '50': '#D7DF01',\n    '60': '#A5DF00',\n    '70': '#74DF00',\n    '80': '#3ADF00',\n    '90': '#01DF01',\n    '100': '#01DF3A',\n}\n\nconst LIMIT_MOOD: number = 30 \n\nexport default class Mood {\n    group: Phaser.Group\n    game: Phaser.Game\n    cactusesText: Phaser.Text\n    mood: any\n    moodValue: number = 100\n    total: number\n    timer: any\n    barSpriteTween: Phaser.Tween\n    \n    constructor({ game }: {\n        game: Phaser.Game\n    }) {\n        this.game = game;\n        this.mood = new MoodRange(this.game, {\n            width: 200,\n            height: 30,\n            x: 120,\n            y: 30,\n            bg: {\n                color: '#651828'\n            },\n            bar: {\n                color: '#10ff80'\n            },\n            animationDuration: 200,\n            flipped: false,\n            isFixedToCamera: true\n        });\n\n        store.subscribe(this.changeMood);\n\n        this.barSpriteTween = this.game.add.tween(this.mood.barSprite).to( \n            { alpha: 0.5 }, \n            300, \n            Phaser.Easing.Linear.None, \n            false,\n            0,\n            -1,\n            false\n        );\n        // this.coins = coins;\n        // this.person = person;\n        // this.group = this.game.add.group();\n        // this.group.fixedToCamera = true;\n        // this.group.x = this.game.width - 60;\n        // this.group.y = 20;\n        //\n        // this.group.add(this.coins.group);\n        //\n        // this.cactusesText = this.game.add.text(\n        //     0,\n        //     10,\n        //     this.person.cactuses.length.toString(),\n        //     {\n        //         font: '25px Arial',\n        //         fill: '#fff'\n        //     }\n        // );\n        // this.group.add(this.cactusesText);\n    }\n\n    @autobind\n    changeMood() {\n        const total: number = store.getState().mood.total\n        if (this.total !== total) {\n            this.total = total\n            this.mood.setPercent(this.total)\n\n            if (this.total === 0) {\n                store.dispatch(gameOver({\n                    msg: FAIL_MSG.mood\n                })) \n            }\n\n            const percentages = Object.keys(colors).filter((p) => !Number.isNaN(+p)).map(p => +p)\n\n            const reversedPercentages = percentages.reverse()\n            const foundPercentage = reversedPercentages.find((p) => p <= this.total)\n            if (foundPercentage) {\n                this.mood.setBarColor(colors[`${foundPercentage}`])\n                if (foundPercentage <= LIMIT_MOOD) {\n                    this.barSpriteTween.start()\n                }\n                else {\n                    this.barSpriteTween.stop()\n                }\n            }\n        }\n    }\n}\n","/**\n Copyright (c) 2015 Belahcen Marwane (b.marwane@gmail.com)\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n */\nvar HealthBar = function HealthBar(game, providedConfig) {\n  this.game = game;\n  this.setupConfiguration(providedConfig);\n  this.setPosition(this.config.x, this.config.y);\n  this.drawBackground();\n  this.drawHealthBar();\n  this.setFixedToCamera(this.config.isFixedToCamera);\n};\n\nHealthBar.prototype.constructor = HealthBar;\n\nHealthBar.prototype.setupConfiguration = function (providedConfig) {\n  this.config = this.mergeWithDefaultConfiguration(providedConfig);\n  this.flipped = this.config.flipped;\n};\n\nHealthBar.prototype.mergeWithDefaultConfiguration = function (newConfig) {\n  var defaultConfig = {\n    width: 250,\n    height: 40,\n    x: 0,\n    y: 0,\n    bg: {\n      color: '#651828'\n    },\n    bar: {\n      color: '#FEFF03'\n    },\n    animationDuration: 200,\n    flipped: false,\n    isFixedToCamera: false\n  };\n  return mergeObjetcs(defaultConfig, newConfig);\n};\n\nfunction mergeObjetcs(targetObj, newObj) {\n  for (var p in newObj) {\n    try {\n      targetObj[p] = newObj[p].constructor == Object ? mergeObjetcs(targetObj[p], newObj[p]) : newObj[p];\n    } catch (e) {\n      targetObj[p] = newObj[p];\n    }\n  }\n\n  return targetObj;\n}\n\nHealthBar.prototype.drawBackground = function () {\n  var bmd = this.game.add.bitmapData(this.config.width, this.config.height);\n  bmd.ctx.fillStyle = this.config.bg.color;\n  bmd.ctx.beginPath();\n  bmd.ctx.rect(0, 0, this.config.width, this.config.height);\n  bmd.ctx.fill();\n  bmd.update();\n  this.bgSprite = this.game.add.sprite(this.x, this.y, bmd);\n  this.bgSprite.anchor.set(0.5);\n};\n\nHealthBar.prototype.drawHealthBar = function () {\n  var bmd = this.game.add.bitmapData(this.config.width, this.config.height);\n  bmd.ctx.fillStyle = this.config.bar.color;\n  bmd.ctx.beginPath();\n  bmd.ctx.rect(0, 0, this.config.width, this.config.height);\n  bmd.ctx.fill();\n  bmd.update();\n  this.barSprite = this.game.add.sprite(this.x - this.bgSprite.width / 2, this.y, bmd);\n  this.barSprite.anchor.y = 0.5;\n\n  if (this.flipped) {\n    this.barSprite.anchor.x = 1;\n    this.barSprite.position.x = this.bgSprite.position.x + this.config.width * this.bgSprite.anchor.x;\n  }\n};\n\nHealthBar.prototype.setPosition = function (x, y) {\n  this.x = x;\n  this.y = y;\n\n  if (this.bgSprite !== undefined && this.barSprite !== undefined) {\n    this.bgSprite.position.x = x;\n    this.bgSprite.position.y = y;\n    this.barSprite.position.x = this.bgSprite.position.x - this.config.width * this.bgSprite.anchor.x;\n    this.barSprite.position.y = y;\n\n    if (this.flipped) {\n      this.barSprite.position.x = this.bgSprite.position.x;\n    }\n  }\n};\n\nHealthBar.prototype.setPercent = function (newValue) {\n  if (newValue < 0) newValue = 0;\n  if (newValue > 100) newValue = 100;\n  var newWidth = newValue * this.config.width / 100;\n  this.setWidth(newWidth);\n};\n/*\n Hex format, example #ad3aa3\n */\n\n\nHealthBar.prototype.setBarColor = function (newColor) {\n  var bmd = this.barSprite.key;\n  bmd.update();\n  var currentRGBColor = bmd.getPixelRGB(0, 0);\n  var newRGBColor = hexToRgb(newColor);\n  bmd.replaceRGB(currentRGBColor.r, currentRGBColor.g, currentRGBColor.b, 255, newRGBColor.r, newRGBColor.g, newRGBColor.b, 255);\n};\n\nHealthBar.prototype.setWidth = function (newWidth) {\n  this.game.add.tween(this.barSprite).to({\n    width: newWidth\n  }, this.config.animationDuration, Phaser.Easing.Linear.None, true);\n};\n\nHealthBar.prototype.setFixedToCamera = function (fixedToCamera) {\n  this.bgSprite.fixedToCamera = fixedToCamera;\n  this.barSprite.fixedToCamera = fixedToCamera;\n};\n\nHealthBar.prototype.setAnchor = function (xAnchor, yAnchor) {\n  this.bgSprite.anchor.set(xAnchor, yAnchor);\n  this.barSprite.position.x = this.bgSprite.position.x - this.config.width * this.bgSprite.anchor.x;\n  this.barSprite.anchor.y = yAnchor;\n\n  if (this.flipped) {\n    this.barSprite.anchor.x = 1;\n    this.barSprite.position.x = this.bgSprite.position.x;\n  }\n};\n\nHealthBar.prototype.kill = function () {\n  this.bgSprite.kill();\n  this.barSprite.kill();\n};\n/**\n Utils\n */\n\n\nfunction hexToRgb(hex) {\n  // Expand shorthand form (e.g. \"03F\") to full form (e.g. \"0033FF\")\n  var shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n  hex = hex.replace(shorthandRegex, function (m, r, g, b) {\n    return r + r + g + g + b + b;\n  });\n  var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  return result ? {\n    r: parseInt(result[1], 16),\n    g: parseInt(result[2], 16),\n    b: parseInt(result[3], 16)\n  } : null;\n}\n\nexport default HealthBar;","import autobind from 'autobind-decorator';\n\nimport { ENEMY_TYPES, passersConstants, LayersIds } from '../constants/constants';\nimport Enemy from './Enemy';\n\nimport store from '../store';\nimport { collidePersonWithPoliceman, removePolicemanFromCollided } from '../actions';\nimport { generatorId } from '../utils';\n\nexport const POLICEMAN = {\n    width: 100,\n    height: 70,\n    rangeX: [2500, 5000],\n    count: 2,\n    speed_min: 1,\n    speed_max: 40,\n    time_threshold: 3000,\n    time_disabled: 3000,\n}\n\nexport const POLICEMAN_SPRITE_INFO = {\n    setTo: [0.12, 0.12],\n    stand: {\n        frames: [0],\n        frameRate: 1,\n    }, \n    move: {\n        frames: [7, 6, 5, 4, 3, 2, 1, 0],\n        frameRate: 8\n    }\n}\n\nexport class Policeman extends Enemy{\n    game: Phaser.Game\n    sprite: Phaser.Sprite\n    dir: number = Math.round(Math.random()) ? 1 : -1\n    velocity: number\n    animationRun: Phaser.Animation\n    timerChangingVelocity: number\n\n    constructor(game: Phaser.Game) {\n        super({\n            game, \n            coord: {\n                x: game.rnd.between(POLICEMAN.rangeX[0], POLICEMAN.rangeX[1])\n            }, \n            speed: {\n                min: POLICEMAN.speed_min,\n                max: POLICEMAN.speed_max,\n            }, \n            key: LayersIds.policeman,\n            spriteOptions: POLICEMAN_SPRITE_INFO,\n            type: ENEMY_TYPES.policeman,\n            time_threshold: POLICEMAN.time_threshold,\n            time_disabled: POLICEMAN.time_disabled,\n        })\n        \n        this.game = game;\n    }\n}\n\ninterface CollideEnemiesIdProps {\n    [k: string]: number\n}\n\ninterface EnemyObjProp {\n    [key: string]: Enemy\n}\nexport interface PolicemanManagerProps {\n    // readonly policemen: typeof Policeman[]\n    // readonly create: () => void,\n    readonly getAllSprites: () => Phaser.Sprite[],\n    readonly getAllActivePoliceman: () => Phaser.Sprite[],\n    readonly update: () => void,\n    readonly getPolicemanPlayerId: (sprite: Phaser.Sprite) => string\n    readonly collidePerson: (policemanSprite: Phaser.Sprite) => void\n    // readonly enemiesObj: EnemyObjProp\n    readonly collideCactus: (enemy: Phaser.Sprite) => void\n    readonly collideWithObstacles: (sprite: Phaser.Sprite) => void\n}\n\nexport const PolicemanManager = (game: Phaser.Game): PolicemanManagerProps => {\n    const enemies = game.add.physicsGroup(Phaser.Physics.ARCADE);\n    const enemiesObj: EnemyObjProp = {}\n    for(let i = 0; i < POLICEMAN.count; i++) {\n        let policeman = new Policeman(\n            game\n        )\n        // this.policemen.push(policeman)\n        // this.enemies.add(policeman.sprite)\n        enemiesObj[policeman.playerId] = policeman\n    }\n    return {\n        getAllSprites: function() {\n            return Object.values(enemiesObj).map((enemy: Policeman) => enemy.sprite)\n        },\n        getAllActivePoliceman: function() {\n            return Object\n                .values(enemiesObj)\n                .filter(enemy => !enemy.isTouchedByCactus)\n                .map((enemy: Policeman) => enemy.sprite)\n        },\n        update: function() {\n            Object.values(enemiesObj).forEach((policeman: Policeman) => {\n                policeman.update()\n            })\n            // for (let name in enemiesObj) {\n            //     if (enemiesObj[name].enemy === null) {\n            //         enemiesObj[name] = null;\n            //         delete enemiesObj[name];\n            //     }\n            // }\n        },\n        getPolicemanPlayerId: function(sprite) {\n            return Object\n                .keys(enemiesObj)\n                .find((playedId: string) => \n                    enemiesObj[playedId].sprite === sprite\n                )\n        },\n\n        collidePerson: function(policeman) {\n            // const collidedPolicemanIds = store.getState().policeman.activeIds\n            const policemanId = this.getPolicemanPlayerId(policeman)\n            // let startTime = collidedPolicemanIds[policemanId].time\n            // if ((!startTime || Date.now() - startTime > TIMEOUT_COLLIDE_POLIMEN_CACTUS) && \n            // enemiesObj[policemanId].isTouchedByCactus) {\n            //     \n            //     enemiesObj[policemanId]\n            // }\n            // const policemanStore = store.getState().policeman\n            // if (policemanStore.activeIds[policemanId]) {\n            //     return ;\n            // }\n\n\n            const collideBefore = () => {\n                store.dispatch(collidePersonWithPoliceman({\n                    id: policemanId,\n                }))\n            }\n\n            const collideAfter = () => {\n                store.dispatch(removePolicemanFromCollided({\n                    id: policemanId,\n                }))\n            }\n\n            enemiesObj[policemanId].collideWithPerson()\n\n        },\n        collideCactus: function(policemanSprite) {\n            const playerId = this.getPolicemanPlayerId(policemanSprite)\n            enemiesObj[playerId].onCactusCollision()\n        },\n        collideWithObstacles: function(sprite) {\n            const playedId = this.getPolicemanPlayerId(sprite)\n            enemiesObj[playedId].collideWithObstacles()\n        }\n    }\n}","import {\n    ENEMY_TYPES,\n    PasserConstantOptions,\n    DEACTIVATE_TIME_FOR_COLLIDE_PERSON_POLICEMAN\n} from '../constants/constants';\n\nimport Person from './Person';\n\nimport { generatorRandomString } from '../utils';\nimport { Passer, COORD, SPEED } from './Passer';\nimport store from '../store';\nimport { addEnemy } from '../actions';\n\nconst generatorId = generatorRandomString();\n\ninterface EnemyProps {\n    readonly game: Phaser.Game,\n    readonly coord: COORD,\n    readonly speed: SPEED,\n    readonly key: string,\n    readonly type: ENEMY_TYPES,\n    readonly spriteOptions: PasserConstantOptions\n    readonly time_threshold?: number\n    readonly time_disabled: number\n}\n\n// function EnemiesGlobal(game: Phaser.Game) {\n//     return function decorator(Class: any) {\n//         return (...args: any[]) => {\n//             console.log(`Arguments for ${name}: args`); \n//             const enemiesGroup = game.add.physicsGroup(Phaser.Physics.ARCADE)\n//             return new Class(...args, enemiesGroup)\n//         }\n//     }\n// }\n\n\nexport default class Enemy extends Passer{\n    sprite: Phaser.Sprite\n    game: Phaser.Game\n    time_disabled: number\n    public isTouchedByCactus: boolean = false\n    tween: Phaser.Tween\n    timer: Phaser.TimerEvent\n    type: ENEMY_TYPES\n    isCollidedWithPerson: boolean = false\n\n    constructor(props: EnemyProps) {\n        super(\n            props.game, \n            props.coord,\n            props.speed,\n            props.key,\n            props.spriteOptions,\n            props.time_threshold\n        )\n\n        this.game = props.game\n        this.type = props.type    \n        this.time_disabled = props.time_disabled\n        this.addEnemy()\n    }\n\n    addEnemy() {\n        store.dispatch(addEnemy({\n            playerId: this.playerId,\n            type: this.type,\n        }))\n    }\n\n    update() {\n        if (this.isTouchedByCactus) {\n            this.sprite.animations.stop('move', true);\n            return true;\n        }\n        super.update()\n    }\n\n    onCactusCollision() {\n        switch(this.type) {\n            case ENEMY_TYPES.policeman:\n                this.deactivateForTheTime()\n                break\n            default: break\n        }\n    }\n\n    deactivateForTheTime() {\n        this.isTouchedByCactus = true\n        this.sprite.body.moves = false\n        this.tween = this.game.add.tween(this.sprite).to(\n            { alpha: 0 },\n            300, Phaser.Easing.Linear.None, true, 0, 100, false\n        )\n        // this.timer = this.game.time.create(false)\n        // this.timer.loop(2000, this.finishCollision, this)\n        // this.timer.start()\n        this.timer = this.game.time.events.loop(this.time_disabled, this.finishCollision, this)\n    }\n\n    finishCollision() {\n        // this.timer.remove();\n        this.game.time.events.remove(this.timer)\n        this.isTouchedByCactus = false\n        this.sprite.alpha = 1\n        this.tween.stop()\n    }\n\n    kill() {\n        this.sprite.kill()\n    }\n\n    public collideWithPerson(cbBefore?: () => void, cbAfter?: () => void) {\n        if (!this.isTouchedByCactus && !this.isCollidedWithPerson) {\n            this.isCollidedWithPerson = true\n\n            if (cbBefore) {\n                cbBefore()\n            }\n\n            const timer = this.game.time.events.loop(DEACTIVATE_TIME_FOR_COLLIDE_PERSON_POLICEMAN, () => {\n                this.isCollidedWithPerson = false\n                this.game.time.events.remove(timer);\n                if (cbAfter) {\n                    cbAfter()\n                }\n            }, this)\n        }\n    }\n}","import autobind from 'autobind-decorator';\nimport store from '../store';\nimport { addCactus } from '../actions';\nimport { sampleSize, isDevelopment } from '../utils';\nimport { PubSub } from './Pubsub';\nimport { ground } from '../constants/constants';\n\n\ninterface CactusProps {\n    readonly game: Phaser.Game\n    readonly x: number\n    readonly y: number\n    readonly key?: string\n}\n\ninterface CactusProp extends Phaser.Sprite {\n    isKilled?: boolean\n}\n\nexport const CACTUS = {\n    width: 25,\n    height: 30,\n}\n\nconst CACTUS_COORDS = [\n    {x: 200, y: 100}, \n    {x: 300, y: 100}, \n    {x: 400, y: 100}, \n    {x: 500, y: 100}, \n    {x: 700, y: 100}, \n    {x: 1010, y: 100}, \n    {x: 1010, y: 230}, \n    {x: 1300, y: 170}, \n    {x: 2190, y: 170}, \n    {x: 2330, y: 170}, \n    {x: 2463, y: 170}, \n    {x: 2595, y: 170},  \n]\n\nexport class Cactus {\n    cactus: CactusProp\n\n    constructor({\n        game, \n        x, \n        y, \n        key = 'cactus'\n    }: CactusProps) {\n        this.cactus = game.add.sprite(\n            x,\n            y,\n            key\n        );\n        game.physics.arcade.enable(this.cactus);\n        this.cactus.width = CACTUS.width;\n        this.cactus.height = CACTUS.height;\n        this.cactus.body.immovable = true;\n        this.cactus.body.allowGravity = false;\n        this.cactus.body.collideWorldBounds = true;\n        this.cactus.body.onWorldBounds = new Phaser.Signal();\n        this.cactus.body.onWorldBounds.add(this.hitWorldBounds, this);\n        this.cactus.anchor.set(0.5, 1)\n    }\n\n    hitWorldBounds() {\n        this.cactus.destroy();\n    }\n}\n\nexport interface ThrowCactusProps {\n    readonly x:number, \n    readonly y:number, \n    readonly velocityX: number, \n    readonly angularVelocity: number\n}\n\n\nexport interface CactusHanlerProps {\n    readonly cactuses: Phaser.Group\n    readonly thrownCactuses: CactusProp[] \n    readonly aliveCactuses: () => Phaser.Sprite[]\n    readonly update: () => any\n    readonly instances: Cactus[]\n    readonly collidePolicemanWithCactus: (cactus: CactusProp)=> any\n    readonly collidePersonWithCactus: (cactus: CactusProp) => any\n    readonly collideObstaclesWithCactus: (cactus: CactusProp) => any\n}\n\n\nexport const CactusHandler = (game: Phaser.Game): CactusHanlerProps => {\n    const cactuses = game.add.physicsGroup(Phaser.Physics.ARCADE);\n    const arrFromCoords = isDevelopment ? CACTUS_COORDS : sampleSize(CACTUS_COORDS, Math.floor(Math.random() * CACTUS_COORDS.length))\n    const instances: Cactus[] = []   \n    const thrownCactuses: CactusProp[] = [] \n    arrFromCoords.forEach((coord) => {\n        let instance = new Cactus({\n            game: game,\n            x: coord.x/*Math.floor(Math.random() * (game.world.width - 100)) + 100*/,\n            y: game.world.height - ground.height - coord.y,\n        })\n        instances.push(instance)\n    \n        cactuses.add(instance.cactus)\n    })\n\n\n    const throwCactus = (props: ThrowCactusProps) => {\n        const {\n            x, \n            y,\n            velocityX,\n            angularVelocity\n        } = props\n        if (!thrownCactuses.length) {\n            return ;\n        }\n        const cactus = thrownCactuses[thrownCactuses.length-1];\n        cactus.revive();\n        game.physics.arcade.enable(cactus);\n        cactus.body.enable = true\n        cactus.body.x = x;\n        cactus.body.y = y;\n        cactus.body.velocity.x = velocityX;\n        cactus.body.velocity.y = 0;\n        cactus.body.angularVelocity = angularVelocity;\n        cactus.body.allowGravity = true\n        cactus.body.gravity.y = 100\n    }\n\n    PubSub.subscribe(throwCactus)\n    return  {\n        instances,\n        thrownCactuses,\n        cactuses,\n        update: () => {\n            cactuses.forEachAlive((cactus: CactusProp) => {\n                game.debug.body(cactus);\n            }, this);\n            // cactuses.forEach((cactus: CactusProp) => {\n            //     if (!cactus.alive && cactus.isKilled){\n            //         cactus.destroy();\n            //     }\n            // }, this);\n        },\n        aliveCactuses: () => cactuses.getAll('isKilled', false || undefined),\n        collidePolicemanWithCactus: (cactus) => {\n            thrownCactuses.pop()\n            cactus.destroy();\n            // cactus.isKilled = true;\n        },\n        collideObstaclesWithCactus: (cactus) => {\n            thrownCactuses.pop()\n            cactus.destroy()\n        },\n        collidePersonWithCactus: (cactus) => {\n            cactus.isKilled = true\n            cactus.kill()\n            thrownCactuses.push(cactus)\n            store.dispatch(addCactus())\n        },\n    }\n}\n","import autobind from 'autobind-decorator'\nimport throttle from 'lodash.throttle'\n\nimport store from '../store'\n\nimport {\n    LayersIds, HANDS, HANDS_COORDS\n} from '../constants/constants'\n\nimport { throwCactus, changeMoney, reduceMood } from '../actions'\nimport Person from './Person';\nimport { getRandom } from '../utils';\n\nconst MIN_DISTANCE_TO_APROACH = 50\nconst PENALTY_AMOUNT = 50\nconst THROTTLE_TIME = 3000\n\ninterface HandsProps {\n    readonly game: Phaser.Game,\n    readonly x: number,\n    readonly y: number,\n}\n\nexport class Hands extends Person {\n    readonly game: Phaser.Game\n    tween: Phaser.Tween\n    tween2: Phaser.Tween\n    constructor( {\n        game, \n        x,\n        y\n    }: HandsProps) {\n        super({\n            game: game,\n            x: x,\n            y: game.world.height - y - 10,\n            key: LayersIds.hands\n        })\n\n        this.game = game\n\n        this.sprite.width = HANDS.width\n        this.sprite.height = HANDS.height\n        this.sprite.alpha = 0\n        this.sprite.body.immovable = true\n        this.sprite.body.moves = true\n        this.sprite.body.enable = true\n        this.update = throttle(this.update, THROTTLE_TIME)\n\n        this.tween = this.game.add.tween(this.sprite).to(\n            this.getTweenProps(true),\n            0, \n            Phaser.Easing.Linear.None, \n            true, \n            0, \n            -1, \n            true\n        )\n        \n        this.tween2 = this.game.add.tween(this.sprite).to(\n            this.getTweenProps(false),\n            0, \n            Phaser.Easing.Linear.None, \n            true, \n            0, \n            -1, \n            true\n        ) \n    \n    }\n\n    getTweenProps(isVisible: boolean) {\n        return (isVisible) ? { \n            alpha: 1,\n            y: this.sprite.y + 20,\n        } : { \n            alpha: 0,\n            y: this.sprite.y - 20,\n        }\n    }\n\n    changeVisibility(isVisible: boolean) {\n        if (isVisible) {\n            this.tween.resume()\n            this.tween2.pause()\n        } else {\n            this.tween.pause()\n            this.tween2.resume()\n        }\n    }\n\n    update() {\n        store.dispatch(changeMoney(-PENALTY_AMOUNT))\n    }\n}\n\nexport class HandsHandler {\n    readonly hands: Hands[]\n    readonly handsX: number[]\n    constructor(game: Phaser.Game) {\n        this.handsX = HANDS_COORDS.map(coord => coord[0])\n        this.hands = HANDS_COORDS.map((handCoord) => {\n            return new Hands({\n                game,\n                x: handCoord[0],\n                y: handCoord[1]\n            })\n        })\n        // this.update = throttle(this.update, 5000)\n    }\n\n    getHandsSprite() {\n        return this.hands.map((hand) => hand.sprite)\n    }\n\n    collidePerson(sprite: Phaser.Sprite) {\n        const hand = this.hands.find(hand => hand.sprite === sprite)\n        hand.update()\n    }\n\n    update(x: number) {\n        // const {personCoords} = state\n        const handIndexes = HANDS_COORDS.reduce((res, coord, i) => {\n            if (Math.abs(this.hands[i].sprite.centerX - x) < MIN_DISTANCE_TO_APROACH) \n                res.push(i)\n            return res    \n        }, []) \n\n        this.hands.forEach((_, i) => {\n            const index = handIndexes.find(handIndex => handIndex === i)\n            typeof(index)!=='undefined' && index >= 0 ? this.hands[i].changeVisibility(true): this.hands[i].changeVisibility(false)\n        })\n    }\n}\n","import { obstaclesKeys, ground } from \"../constants/constants\";\n\ninterface Coord {\n    readonly x: number\n    readonly y: number\n    readonly w: number\n    readonly h: number\n}\n\nconst coords = [\n    {x: 900, y: 70, w: 200, h: 30},\n    {x: 900, y: 200, w: 200, h: 30},\n    {x: 1172, y: 130, w: 20, h: 30},\n    {x: 1200, y: 240, w: 200, h: 30},\n    {x: 3440, y: 50, w: 100, h: 30},\n    {x: 3540, y: 80, w: 200, h: 30},\n    {x: 3740, y: 110, w: 150, h: 40},\n    {x: 3890, y: 150, w: 200, h: 30},\n    {x: 4090, y: 180, w: 200, h: 30},\n]\n\nconst imageObstacles = [\n{\n    key: obstaclesKeys.texture, \n    w: 300,\n    h: 40,\n    x: 1890,\n    y: 0,\n}, \n{\n    key: obstaclesKeys.texture, \n    w: 150,\n    h: 10,\n    x: 2100,\n    y: 100,\n},\n{\n    key: obstaclesKeys.vasya, \n    w: 300,\n    h: 40,\n    x: 1374,\n    y: 0,\n}]\n\nfunction renderObstacle(coord: Coord) {\n    let graphics: Phaser.Graphics = this.game.make.graphics()\n    graphics.beginFill(0x8C7272, 1)\n    graphics.drawRect(0, 0, coord.w, coord.h)\n    graphics.endFill()\n    graphics.boundsPadding = 0;\n\n    // Create an empty sprite as a container\n    let shapeSprite = this.game.add.sprite(\n        coord.x, \n        this.game.world.height - ground.height - coord.y - coord.h\n    );\n\n    // Add the graphics to the sprite as a child\n    shapeSprite.addChild(graphics);\n    this.group.add(shapeSprite)\n    // this.game.physics.enable(shapeSprite, Phaser.Physics.ARCADE);\n    shapeSprite.body.width = coord.w\n    shapeSprite.body.height = coord.h\n    shapeSprite.anchor.set(0, 0)\n    shapeSprite.body.collideWorldBounds = true;\n    shapeSprite.body.immovable = true\n}\n\n\n\nexport function render(params?: any) {\n    const group = this.game.add.physicsGroup(Phaser.Physics.ARCADE)\n    const r = renderObstacle.bind({game: this.game as Phaser.Game, group})\n    coords.forEach(coord => {\n        r(coord)\n    })\n\n    imageObstacles.forEach((imageObstacle) => {\n        const bmd = this.game.make.bitmapData(imageObstacle.w, imageObstacle.h)\n        bmd.copy(imageObstacle.key)\n        const sprite = this.game.add.sprite(imageObstacle.x, this.game.height - ground.height, imageObstacle.key)\n        sprite.anchor.set(0, 1)\n        group.add(sprite)\n        if (imageObstacle.key === obstaclesKeys.vasya) {\n            sprite.scale.set(0.24, 0.1)\n        }\n        sprite.body.immovable = true\n    })\n\n    return group\n}","import autobind from 'autobind-decorator'\n\nimport Person from './Person'\nimport store from '../store'\nimport { connect } from '../utils/connect';\nimport PersonBase from './PersonBase';\nimport { LayersIds, ground } from '../constants/constants';\n\n\nimport '../assets/clerk/clerk.png'\nimport { collideOfficial, changeMoney } from '../actions';\n\ntype COORD = {\n    readonly x: number\n}\n\ntype SPEED = {\n    readonly min: number,\n    readonly max: number,\n}\n\nconst PASSER_COORDS: COORD[] = [{\n    x: 100,\n}, {\n    x: 200,\n}, {\n    x: 300\n}]\n\nconst PASSER_SPEED = {\n    min: 10,\n    max: 30\n}\n\nconst TIME_THRESHOLD = 2000\nconst PENALTY_IN_COLLISION_WITH_OFFICIAL = -1\n\nconst mapStateToProps = (state = store.getState()) => {\n    return {\n        state: state\n    }\n}   \n\n// @connect(mapStateToProps, null)\n\nexport class Official extends PersonBase {\n    game: Phaser.Game\n    sprite: Phaser.Sprite\n\n    constructor( \n        game: Phaser.Game, \n        coord: COORD,\n        speed: SPEED,\n        key: string\n    ) {\n        super({\n            game: game,\n            x: game.rnd.between(100, coord.x),\n            y: game.world.height - ground.height,\n            key: key,\n            speed: speed,\n            time_threshold: TIME_THRESHOLD,\n            velocity: {\n                min: 5,\n                max: 8,\n            }\n        })\n        this.game = game;\n\n        // custom logic for sprite\n        this.sprite.scale.setTo(0.09, 0.085)\n        this.sprite.anchor.set(0.5, 1)\n        this.sprite.animations.add('stand', [2], 8, true);\n        this.animationRun = this.sprite.animations.add('move', [3, 2, 1, 0], 8, true)\n        this.sprite.animations.play('stand')\n        this.game.debug.body(this.sprite)\n    }\n\n    render() {\n\n    }\n}\n\n\nexport interface OfficialProps {\n    sprites: Phaser.Sprite[],\n    instances: Official[],\n    update: any,\n    collisionWithPerson: (sprite: Phaser.Sprite) => any\n    collideWithObstacles: (sprite: Phaser.Sprite) => any\n}\n\nexport const renderOfficials = (game: Phaser.Game): OfficialProps => {\n\n    const passers = PASSER_COORDS.map((PASSER_COORD) => {\n        return new Official(game, PASSER_COORD, PASSER_SPEED, LayersIds.clerk)\n    })\n\n    return {\n        sprites: passers.map((p) => p.sprite),\n        instances: passers,\n        update: () => passers.forEach((inst: Official) => inst.update()),\n        collisionWithPerson: (sprite) => {\n            const id = passers.findIndex(p => p.sprite === sprite)\n            const state = store.getState()\n            if (state.official.collided.indexOf(id) < 0) {\n                store.dispatch(collideOfficial(id))\n                store.dispatch(changeMoney(PENALTY_IN_COLLISION_WITH_OFFICIAL))\n            }\n        },\n        collideWithObstacles: function(sprite: Phaser.Sprite) {\n            const official = passers.find(p => p.sprite === sprite)\n            official.collideWithObstacles()\n        }\n    }\n} \n\n\n","import store, { State } from \"../store\";\nimport { COINS, LayersIds, STATES } from \"../constants/constants\";\nimport { isDevelopment } from \"../utils\";\n\nimport '../assets/smiles.png'\nimport '../assets/menu_bg.png'\n\nclass FinalScreen {\n    game: Phaser.Game;\n    back: Phaser.Text;\n    state: State\n    assetsPath: string = './assets/'\n    heading: Phaser.Text\n    backWrapper: Phaser.Graphics\n    bg: Phaser.TileSprite\n\n    preload() {\n        this.game.stage.backgroundColor = 'rgb(65, 75, 122)'\n        this.game.load.spritesheet(LayersIds.mood, `${this.assetsPath}smiles.png`, 203.2, 204, 5)\n        this.game.load.image(LayersIds.coin, `${this.assetsPath}one-coin.png`)\n        this.game.load.image('background',`${this.assetsPath}menu_bg.png`);\n    }\n\n    createCharacteristics() {\n        const money = this.state.score.money\n        const mood = this.state.mood.total\n        let moodTemplate = ''\n        let moodLevel;\n        if (mood < 40) {\n            moodTemplate = `But, you mood is rather poor at this momemt. \\nJust follow the next tips to boost your mind - try to meet more passers and touch them, they will inspire you. \\nTry to avoid all communications with policemen because they make you feel sad in this case \\nthrowing a cactus looks a good idea. Good luck!`\n            moodLevel = 'bad'\n        }\n        else if (mood < 80) {\n            moodTemplate = `Cheer up when something goes wrong :) \\nEvery day may not be good, but there’s something good in every day. \\nYou will feel better when you escape meetings with policeman and officials.`\n            moodLevel = 'good'\n        }\n        else {\n            moodTemplate = `You're a professional! Seems that you can overcome even more difficult missions.`\n            moodLevel = 'excellent'\n        }\n\n        let moneyTalk = ''\n        if (money < COINS.startSum) {\n            moneyTalk = `Good job! \\nYou earned ${money}, but that's not so much to invest this money to some business or any good deals. \\nThe thing is all clashes with police lead to irritation and mood reduction. \\nSo, please, try to avoid routine communication with officials and any kinds of clerks.`\n        }\n        else {\n            moneyTalk = `How did you do that! Unbelievable! You saved ${money} RUR from Government waste. \\nAnd that means you can invest it to the profitable business as an investment or in any good deals like building new schools ans kindegartens.`\n        }\n        return {\n            moodTemplate,\n            moneyTalk,\n            moodLevel\n        }    \n    }\n\n    create() {\n        this.game.world.setBounds(0, 0, this.game.width, this.game.height);\n        this.bg = this.game.add.tileSprite(0, 0, this.game.world.width * 5, this.game.world.height * 5, 'background');\n        this.bg.scale.set(0.3, 0.3)\n        this.bg.smoothed = true;\n        this.bg.alpha = 0.2\n        this.state = store.getState()\n        const statusGame = this.state.statusGame.status\n        const statusGameStatusMsg = this.state.statusGame.msg\n\n        let title = ''\n        let description = ''\n        switch(statusGame) {\n            case \"fail\":\n                title = 'Game Over, Man!'\n                description = statusGameStatusMsg || 'You should try again, the most important thing is not to give up and \\ndefeat the damned corrupt! Good luck!'\n                break;\n            case \"end\":\n                title = 'Congratulations!'\n                description = 'That was hard but you did it!'\n                break;\n            default: \n                return ;        \n        }\n        const bar = this.game.add.graphics()\n        bar.beginFill(0x000000, 0.2)\n        bar.drawRect(0, 100, this.game.width, 100)\n\n\n        this.heading = this.game.add.text(\n            0,\n            0,\n            title, \n            {\n                fill: '#fff',\n                align: 'center',\n                wordWrapWidth: this.game.width * 0.7,\n                boundsAlignH: \"center\",\n                boundsAlignV: \"middle\", \n            },\n        )\n\n        // heading.anchor.set(0.5);\n\n        this.heading.setShadow(3, 3, 'rgba(0,0,0,0.5)', 2);\n            \n        this.heading.setTextBounds(0, 100, this.game.width, 100);    \n\n        const descriptionElement = this.game.add.text(\n            this.game.world.centerX ,\n            bar.getBounds().y + bar.getBounds().height + 10,\n            description, \n            {\n                font: 'bold 25px Arial',\n                fill: '#fff',\n                align: 'center',\n                wordWrapWidth: this.game.width * 0.7 ,\n            },\n        )\n\n        descriptionElement.lineSpacing = 5\n        descriptionElement.strokeThickness = 5;\n        descriptionElement.setShadow(2, 2, \"#333333\", 2, true, false);\n\n        descriptionElement.anchor.set(0.5, 0);\n            \n        const characteristics = this.createCharacteristics()\n\n        interface CharacteristicsMapping {\n            readonly [key: string]: string\n        }\n        const characteristicsMapping: CharacteristicsMapping = {\n            [LayersIds.mood]: characteristics.moodTemplate,\n            [LayersIds.coin]: characteristics.moneyTalk\n        }\n        \n\n        const {y, height} = descriptionElement.getBounds()   \n        let offset = y + height\n        \n        for(let key in characteristicsMapping) {\n            let results: Phaser.Group = this.game.add.group();\n            let icon: Phaser.Sprite;\n            if (key === LayersIds.mood) {\n                icon = this.game.add.sprite(50, 50, LayersIds.mood);\n                switch(characteristics.moodLevel) {\n                    case \"bad\":\n                        icon.frame = 4\n                    case \"good\":\n                        icon.frame = 0\n                    case \"excellent\":\n                        icon.frame = 2\n                    default:\n                        icon.frame = 0    \n                }\n                icon.width = 50\n                icon.height = 50\n            }\n\n            if (key === LayersIds.coin) {\n                icon = this.game.add.sprite(50, 50, LayersIds.coin);\n                icon.width = 50\n                icon.height = 50\n            }\n\n            // icon.anchor.set(0, 0.5);\n            const textObject = this.game.add.text(\n                0,\n                0,\n                `${characteristicsMapping[key]}`,\n                {\n                    font: `20px Arial`,\n                    fill: '#fff',\n                    wordWrap: true,\n                    wordWrapWidth: this.game.width * 0.6,\n                    align: 'left',\n                }\n            );\n\n            textObject.x = 110\n\n            icon.centerY = textObject.centerY\n\n            results.add(icon)\n            results.add(textObject)\n            offset += 40\n            results.y = offset;\n            offset +=  textObject.height\n            results.centerX = this.game.world.centerX\n        }\n\n        this.backWrapper = this.game.add.graphics()\n        this.backWrapper.beginFill(0xd70000, 0.9)\n        this.backWrapper.drawRect(this.game.world.centerX - 300/2, offset + 50, 300, 100);\n        \n        this.back = this.game.add\n        .text(\n            0,\n            0,\n            `Start again!`,\n            {\n                font: `28px Arial`,\n                fill: '#fff',\n                align: 'center',\n                fontWeight: 'bold',\n                boundsAlignH: \"center\",\n                boundsAlignV: \"middle\", \n                wordWrap: true, \n                wordWrapWidth: 200 \n            }\n        );\n        this.back.setTextBounds(this.game.world.centerX -  300/2, offset + 50, 300, 100)\n\n        // this.back.anchor.set(0.5)\n        \n        // this.back.anchor.setTo(0.5, 0.5);\n        // backWrapper.addChild(this.back);\n        // this.game.world.addChild(backWrapper);\n        // let backWrapper = this.game.add.graphics();\n        // backWrapper.beginFill(0x000000, 0.2);\n        // backWrapper.drawRect(this.game.world.centerX - this.back.centerX, this.game.world.height - 200, 200, 100);\n        // this.back.setTextBounds(100, 100, this.back.texture.frame.width, this.back.texture.frame.height)    \n        this.back.setShadow(-3, 3, 'rgba(0,0,0,0.2)', 0);\n\n        const grd = this.back.context.createLinearGradient(0, 0, this.back.width, this.back.height);\n\n        grd.addColorStop(0, '#FFD1AA');   \n        grd.addColorStop(1, '#D49A6A');\n\n        this.back.fill = grd\n        \n        this.game.input.onDown.add(this.handleClickBack, this);\n\n    }\n\n    render() {\n        \n    }\n\n    handleClickBack() {\n        if (this.backWrapper.getBounds().contains(this.game.input.x, this.game.input.y)) {\n            this.game.input.onDown.remove(this.handleClickBack, this);\n            this.game.state.start(STATES.PreBoot, true, false);\n            return true;\n        }\n    }\n}\n\nexport default FinalScreen;","module.exports = __webpack_public_path__ + \"assets/smiles.png\";","module.exports = __webpack_public_path__ + \"assets/menu_bg.png\";","function rgResizeBody(containerNode: HTMLElement) {\n    const windowInnerHeight = window.innerHeight;\n    if (document.body.clientHeight > windowInnerHeight) {\n        document.body.style.height = windowInnerHeight + 'px';\n        document.documentElement.style.height = windowInnerHeight + 'px';\n    }\n\n    return [containerNode.clientWidth, containerNode.clientHeight];\n};\n\n\nexport {\n    rgResizeBody\n}","import { STATES } from \"../constants/constants\";\n\ninterface MainMenuInterface {\n    readonly text: string\n    readonly targetState: string\n}\n\nexport let mainMenu = [{\n    text: 'Start Game',\n    targetState: STATES.Game\n}, {\n    text: 'Guide',\n    targetState: STATES.Help\n}];\n\n// newGameMenu = [{\n//     text: 'Start a new game'\n// }, {\n//     text: 'Back',\n//     targetState: 'MainMenu'\n// }];\n\n// loadGameMenu = [{\n//     text: 'Load a saved game'\n// }, {\n//     text: 'Back',\n//     targetState: 'MainMenu'\n// }];\n\n\n\nconst config = {\n    textStyle: {\n        font: \"24px Arial\",\n        fill: \"#888\"\n    },\n    textStyleFocused: {\n        font: '30px Arial',\n        fill: '#000',\n        backgroundColor: '#888'\n    }\n};\n\n\nexport const MenuWrapper = function() {\n    return new Menu('Menu:', mainMenu);\n}\n\nexport class Menu extends Phaser.State {\n    focused: number = 0\n    keyboard: Phaser.Keyboard\n    controls: any\n    heading: string\n    options: MainMenuInterface[]\n    menuItems: MenuItem[]\n    constructor(heading: string, options: MainMenuInterface[]) {\n        super();\n\n        this.heading = heading;\n        this.options = options;\n    }\n\n    create() {\n        this.focused = 0;\n\n        this.keyboard = this.game.input.keyboard;\n\n        this.controls = this.keyboard.addKeys({\n            up: Phaser.Keyboard.UP,\n            down: Phaser.Keyboard.DOWN,\n            left: Phaser.Keyboard.LEFT,\n            right: Phaser.Keyboard.RIGHT,\n            interact: Phaser.Keyboard.ENTER\n        });\n\n        this.game.add\n            .text(this.game.world.centerX, this.game.world.centerY - 100, this.heading, config.textStyle)\n            .anchor.set(0.5);\n        \n        this.menuItems = [];\n\n        for (let i = 0; i < this.options.length; i++) {\n            let options,\n                menuItem;\n\n            options = this.options[i];\n\n            menuItem = new MenuItem(this.game, this.game.world.centerX, this.game.world.centerY + (((i + 1) * 70)), options.text, options.targetState);\n\n            this.menuItems.push(menuItem);\n        }\n\n        this.menuItems[this.focused].focus(true);\n\n        this.controls.interact.onDown.add(this.activateFocusedItem, this);\n        this.controls.up.onDown.add(this.selectItem, this, 0, -1);\n        this.controls.down.onDown.add(this.selectItem, this, 0, 1);\n    }\n\n    selectItem(key: any, delta: number) {\n        this.menuItems[this.focused].focus(false);\n\n        this.focused += delta;\n\n        if (this.focused >= this.menuItems.length) {\n            this.focused -= this.menuItems.length;\n        } else if (this.focused < 0) {\n            this.focused += this.menuItems.length;\n        }\n\n        this.menuItems[this.focused].focus(true);\n    }\n\n    activateFocusedItem() {\n        this.menuItems[this.focused].navigate();\n    }\n}\n\nclass MenuItem extends Phaser.Text {\n    focused: boolean\n    targetState: string\n    options: MainMenuInterface[]\n    baseText: string\n\n    constructor(\n        game: Phaser.Game, \n        x: number, \n        y: number, \n        text: string, \n        targetState: string, \n        focused = false\n    ) {\n        super(game, x, y, text, config.textStyle);\n\n        this.baseText = text;\n        this.targetState = targetState;\n        this.focused = focused;\n\n        this.game.world.addChild(this);\n        this.anchor.set(0.5)\n    }\n\n    focus(focused: boolean) {\n        if (focused) {\n            this.focused = true;\n            this.setStyle(config.textStyleFocused);\n        } else {\n            this.focused = false;\n            this.setStyle(config.textStyle);\n        }\n    }\n\n    navigate() {\n        if (this.targetState) {\n            this.game.state.start(this.targetState);\n        }\n    }\n\n    select() {\n        this.text = this.baseText \n    }\n}\n","import '../assets/back-arrow.png'\nimport '../assets/helpMoveDesktop.png'\nimport { STATES, LayersIds } from '../constants/constants';\n\nclass Help extends Phaser.State{\n    back: Phaser.Text\n    button: Phaser.Button\n    assetsPath: string = './assets/'\n\n    preload() {\n        this.game.stage.backgroundColor = '#000';\n        this.game.load.image('back', `${this.assetsPath}back-arrow.png`)\n        this.game.load.image('helpMoveDesktop', `${this.assetsPath}helpMoveDesktop.png`)\n    }\n\n    create() {\n        const backKey = this.game.input.keyboard.addKey(Phaser.Keyboard.LEFT);\n        backKey.onDown.add(this.handleClickBack, this);\n        const data = [\n            {\n                image:  this.game.make.sprite(0, 0, 'helpMoveDesktop'),\n                text: 'Up - jump, Left, Right - direction',\n                options: {\n                    image: {\n                        width: 250,\n                        height: 70,\n                    },\n                    text: {\n                        boundsAlignH: \"center\", \n                        boundsAlignV: \"middle\"\n                    }\n                }\n            }, \n            {\n                image: this.game.make.sprite(0, 0, LayersIds.cactus), \n                text: 'PRESS \"A\" to throw a cactus. This item used for protection player against cops',\n                options: {\n                    image: {\n                        width: 40,\n                        height: 40,\n                    },\n                    text: {\n                        boundsAlignH: \"center\", \n                        boundsAlignV: \"middle\"\n                    }\n                }\n            }, \n            {\n                image: this.game.make.sprite(0, 0, LayersIds.coin),\n                text: 'Money that you need to save as much as you can',\n                options: {\n                    image: {\n                        width: 40,\n                        height: 40,\n                    },\n                    text: {\n                        boundsAlignH: \"center\", \n                        boundsAlignV: \"middle\"\n                    }\n                }\n            },\n            {\n                image: this.game.make.sprite(0, 0, LayersIds.loading),\n                text: 'Stay positive otherwise the system will kill you',\n                options: {\n                    image: {\n                        width: 70,\n                        height: 30,\n                    },\n                    text: {\n                        boundsAlignH: \"center\", \n                        boundsAlignV: \"middle\"\n                    }\n                }\n            }\n        ]\n\n\n        const horizontalOffset = 100\n        \n        this.button = this.game.add.button(\n            100, this.game.height / 15, 'back', this.handleClickBack, this, 2, 1, 0\n        );\n\n        this.back = this.game.add.text(\n            140,\n            this.game.height / 15,\n            'Back',\n            {\n                fill: '#fff',\n                align: 'center',\n            }\n        );\n\n\n        const commonGroup = this.game.add.group();\n        let verticalOffset = 0;\n        const spacing = this.game.height / 15 < 20 ? 20 : this.game.height / 15;\n        const fontSize = Math.min(22, Math.round(this.game.height / 19));\n        data.forEach((item, i) => {\n            let itemGroup = this.game.add.group() \n            const textObject = this.game.add.text(\n                horizontalOffset,\n                verticalOffset,\n                `${item.text}.`,\n                {\n                    font: `${fontSize}px Arial`,\n                    fill: '#fff',\n                    wordWrap: true,\n                    wordWrapWidth: this.game.width - horizontalOffset * 2,\n                    ...item.options.text,\n                }\n            );\n            itemGroup.height = 100\n            this.game.add.existing(item.image)\n            item.image.width = item.options.image.width\n            item.image.height = item.options.image.height\n            textObject.anchor.set(0, 0.5)\n            textObject.y = itemGroup.centerY\n            textObject.position.x = item.image.width + 50\n            item.image.anchor.set(0, 0.5)\n            item.image.y = itemGroup.centerY\n            itemGroup.add(item.image)\n            itemGroup.add(textObject);\n            verticalOffset += textObject.height + spacing;\n            itemGroup.y = verticalOffset\n            commonGroup.add(itemGroup)\n        });\n\n        commonGroup.width = 700\n        commonGroup.x = this.game.world.centerX - (commonGroup.width * 0.5);\n        commonGroup.y = this.game.world.centerY - (commonGroup.height* 0.5);\n\n        this.game.input.onDown.add(this.handleClickBack, this);\n    }\n\n    handleClickBack() {\n        this.state.start(STATES.Menu, true, false);\n    }\n}\n\nexport default Help;","module.exports = __webpack_public_path__ + \"assets/back-arrow.png\";","module.exports = __webpack_public_path__ + \"assets/helpMoveDesktop.png\";"],"sourceRoot":""}